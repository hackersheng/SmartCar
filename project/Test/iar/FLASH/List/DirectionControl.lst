###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        17/Jul/2016  20:40:43
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\whstarlit\Desktop\Smart_Car\lib\common\DirectionControl.c
#    Command line =  
#        C:\Users\whstarlit\Desktop\Smart_Car\lib\common\DirectionControl.c -D
#        LPLD_K60 -D USE_K60D10 -lCN
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\List\ -lB
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\List\ -o
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\app\ -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\common\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\class\
#        -I C:\Users\whstarlit\Desktop\Smart_Car\lib\ -Ol -I
#        D:\IAR\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\List\DirectionControl.lst
#    Object file  =  
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\Obj\DirectionControl.o
#
###############################################################################

C:\Users\whstarlit\Desktop\Smart_Car\lib\common\DirectionControl.c
      1          #include "DirectionControl.h"
      2          #include "include.h"
      3          

   \                                 In section .text, align 2, keep-with-next
      4          void directionControl()
      5          {
   \                     directionControl: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
      6            if (crossFlag == 0)
   \   00000002   0x....             LDR.N    R0,??DataTable1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xF040 0x8094      BNE.W    ??directionControl_0
      7            {
      8              int i, sum, t, lineNum;
      9              sum = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
     10              lineNum = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
     11              for (i = Line2; i >= Line1; i--)
   \   00000010   0x....             LDR.N    R2,??DataTable1_1
   \   00000012   0x6812             LDR      R2,[R2, #+0]
   \   00000014   0xE00E             B.N      ??directionControl_1
     12              {
     13                t = midDot[i] - midDot[i-1];
   \                     ??directionControl_2: (+1)
   \   00000016   0x....             LDR.N    R3,??DataTable1_2
   \   00000018   0xF853 0x3022      LDR      R3,[R3, R2, LSL #+2]
   \   0000001C   0x....             LDR.N    R4,??DataTable1_2
   \   0000001E   0xEB14 0x0482      ADDS     R4,R4,R2, LSL #+2
   \   00000022   0xF854 0x4C04      LDR      R4,[R4, #-4]
   \   00000026   0x1B1B             SUBS     R3,R3,R4
     14          //      if (t >= 5 || t <= -5)
     15          //      {
     16          //        midDot[i-1] = midDot[i];
     17          //      }
     18                lineNum++;
   \   00000028   0x1C40             ADDS     R0,R0,#+1
     19                sum += midDot[i];
   \   0000002A   0x....             LDR.N    R3,??DataTable1_2
   \   0000002C   0xF853 0x3022      LDR      R3,[R3, R2, LSL #+2]
   \   00000030   0x1859             ADDS     R1,R3,R1
     20              }
   \   00000032   0x1E52             SUBS     R2,R2,#+1
   \                     ??directionControl_1: (+1)
   \   00000034   0x....             LDR.N    R3,??DataTable1_3
   \   00000036   0x681B             LDR      R3,[R3, #+0]
   \   00000038   0x429A             CMP      R2,R3
   \   0000003A   0xDAEC             BGE.N    ??directionControl_2
     21            
     22              if (countAver >= 3)
   \   0000003C   0x....             LDR.N    R2,??DataTable1_4
   \   0000003E   0x6812             LDR      R2,[R2, #+0]
   \   00000040   0x2A03             CMP      R2,#+3
   \   00000042   0xDB02             BLT.N    ??directionControl_3
     23              {
     24                countAver = 0;
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x....             LDR.N    R3,??DataTable1_4
   \   00000048   0x601A             STR      R2,[R3, #+0]
     25              }
     26              curAver = sum/lineNum - absMid;
   \                     ??directionControl_3: (+1)
   \   0000004A   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   0000004E   0x....             LDR.N    R1,??DataTable1_5
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0x1A40             SUBS     R0,R0,R1
   \   00000054   0x....             LDR.N    R1,??DataTable1_6
   \   00000056   0x6008             STR      R0,[R1, #+0]
     27              devAver = curAver - preAver;
   \   00000058   0x....             LDR.N    R0,??DataTable1_6
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x....             LDR.N    R1,??DataTable1_7
   \   0000005E   0x6809             LDR      R1,[R1, #+0]
   \   00000060   0x1A40             SUBS     R0,R0,R1
   \   00000062   0x....             LDR.N    R1,??DataTable1_8
   \   00000064   0x6008             STR      R0,[R1, #+0]
     28              preAver = curAver;
   \   00000066   0x....             LDR.N    R0,??DataTable1_6
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x....             LDR.N    R1,??DataTable1_7
   \   0000006C   0x6008             STR      R0,[R1, #+0]
     29              averData[countAver] = curAver;
   \   0000006E   0x....             LDR.N    R0,??DataTable1_6
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x....             LDR.N    R1,??DataTable1_9
   \   00000074   0x....             LDR.N    R2,??DataTable1_4
   \   00000076   0x6812             LDR      R2,[R2, #+0]
   \   00000078   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
     30              countAver++;
   \   0000007C   0x....             LDR.N    R0,??DataTable1_4
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x1C40             ADDS     R0,R0,#+1
   \   00000082   0x....             LDR.N    R1,??DataTable1_4
   \   00000084   0x6008             STR      R0,[R1, #+0]
     31            
     32              //取三次的平均值
     33              sumAverData = (averData[0] + averData[1] + averData[2])/3;
   \   00000086   0x....             LDR.N    R0,??DataTable1_9
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x....             LDR.N    R1,??DataTable1_9
   \   0000008C   0x6849             LDR      R1,[R1, #+4]
   \   0000008E   0x1808             ADDS     R0,R1,R0
   \   00000090   0x....             LDR.N    R1,??DataTable1_9
   \   00000092   0x6889             LDR      R1,[R1, #+8]
   \   00000094   0x1808             ADDS     R0,R1,R0
   \   00000096   0x2103             MOVS     R1,#+3
   \   00000098   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000009C   0x....             LDR.N    R1,??DataTable1_10
   \   0000009E   0x6008             STR      R0,[R1, #+0]
     34            
     35              angle = midAngle + curAver * (P/10.0) + devAver * (D/10.0) + 4 * sumAverData;
   \   000000A0   0x....             LDR.N    R0,??DataTable1_11
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0x.... 0x....      BL       __aeabi_i2d
   \   000000A8   0x0006             MOVS     R6,R0
   \   000000AA   0x000F             MOVS     R7,R1
   \   000000AC   0x....             LDR.N    R0,??DataTable1_6
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0x.... 0x....      BL       __aeabi_i2d
   \   000000B4   0x0004             MOVS     R4,R0
   \   000000B6   0x000D             MOVS     R5,R1
   \   000000B8   0x....             LDR.N    R0,??DataTable1_12
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x.... 0x....      BL       __aeabi_f2d
   \   000000C0   0x2200             MOVS     R2,#+0
   \   000000C2   0x....             LDR.N    R3,??DataTable1_13  ;; 0x40240000
   \   000000C4   0x.... 0x....      BL       __aeabi_ddiv
   \   000000C8   0x0022             MOVS     R2,R4
   \   000000CA   0x002B             MOVS     R3,R5
   \   000000CC   0x.... 0x....      BL       __aeabi_dmul
   \   000000D0   0x0032             MOVS     R2,R6
   \   000000D2   0x003B             MOVS     R3,R7
   \   000000D4   0x.... 0x....      BL       __aeabi_dadd
   \   000000D8   0x0006             MOVS     R6,R0
   \   000000DA   0x000F             MOVS     R7,R1
   \   000000DC   0x....             LDR.N    R0,??DataTable1_8
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0x.... 0x....      BL       __aeabi_i2d
   \   000000E4   0x0004             MOVS     R4,R0
   \   000000E6   0x000D             MOVS     R5,R1
   \   000000E8   0x....             LDR.N    R0,??DataTable1_14
   \   000000EA   0x6800             LDR      R0,[R0, #+0]
   \   000000EC   0x.... 0x....      BL       __aeabi_f2d
   \   000000F0   0x2200             MOVS     R2,#+0
   \   000000F2   0x....             LDR.N    R3,??DataTable1_13  ;; 0x40240000
   \   000000F4   0x.... 0x....      BL       __aeabi_ddiv
   \   000000F8   0x0022             MOVS     R2,R4
   \   000000FA   0x002B             MOVS     R3,R5
   \   000000FC   0x.... 0x....      BL       __aeabi_dmul
   \   00000100   0x0032             MOVS     R2,R6
   \   00000102   0x003B             MOVS     R3,R7
   \   00000104   0x.... 0x....      BL       __aeabi_dadd
   \   00000108   0x0004             MOVS     R4,R0
   \   0000010A   0x000D             MOVS     R5,R1
   \   0000010C   0x....             LDR.N    R0,??DataTable1_10
   \   0000010E   0x6800             LDR      R0,[R0, #+0]
   \   00000110   0x0080             LSLS     R0,R0,#+2
   \   00000112   0x.... 0x....      BL       __aeabi_i2d
   \   00000116   0x0022             MOVS     R2,R4
   \   00000118   0x002B             MOVS     R3,R5
   \   0000011A   0x.... 0x....      BL       __aeabi_dadd
   \   0000011E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000122   0x....             LDR.N    R1,??DataTable1_15
   \   00000124   0x6008             STR      R0,[R1, #+0]
     36              angle = angleProtected(angle);
   \   00000126   0x....             LDR.N    R0,??DataTable1_15
   \   00000128   0x6800             LDR      R0,[R0, #+0]
   \   0000012A   0x.... 0x....      BL       angleProtected
   \   0000012E   0x....             LDR.N    R1,??DataTable1_15
   \   00000130   0x6008             STR      R0,[R1, #+0]
   \   00000132   0xE02B             B.N      ??directionControl_4
     37            }
     38            else
     39            {
     40              curAver *= crossScale;
   \                     ??directionControl_0: (+1)
   \   00000134   0x....             LDR.N    R0,??DataTable1_6
   \   00000136   0x6800             LDR      R0,[R0, #+0]
   \   00000138   0x.... 0x....      BL       __aeabi_i2f
   \   0000013C   0x....             LDR.N    R1,??DataTable1_16
   \   0000013E   0x6809             LDR      R1,[R1, #+0]
   \   00000140   0x.... 0x....      BL       __aeabi_fmul
   \   00000144   0x.... 0x....      BL       __aeabi_f2iz
   \   00000148   0x....             LDR.N    R1,??DataTable1_6
   \   0000014A   0x6008             STR      R0,[R1, #+0]
     41              angle = midAngle + curAver * (P/10.0);
   \   0000014C   0x....             LDR.N    R0,??DataTable1_11
   \   0000014E   0x6800             LDR      R0,[R0, #+0]
   \   00000150   0x.... 0x....      BL       __aeabi_i2d
   \   00000154   0x0006             MOVS     R6,R0
   \   00000156   0x000F             MOVS     R7,R1
   \   00000158   0x....             LDR.N    R0,??DataTable1_6
   \   0000015A   0x6800             LDR      R0,[R0, #+0]
   \   0000015C   0x.... 0x....      BL       __aeabi_i2d
   \   00000160   0x0004             MOVS     R4,R0
   \   00000162   0x000D             MOVS     R5,R1
   \   00000164   0x....             LDR.N    R0,??DataTable1_12
   \   00000166   0x6800             LDR      R0,[R0, #+0]
   \   00000168   0x.... 0x....      BL       __aeabi_f2d
   \   0000016C   0x2200             MOVS     R2,#+0
   \   0000016E   0x....             LDR.N    R3,??DataTable1_13  ;; 0x40240000
   \   00000170   0x.... 0x....      BL       __aeabi_ddiv
   \   00000174   0x0022             MOVS     R2,R4
   \   00000176   0x002B             MOVS     R3,R5
   \   00000178   0x.... 0x....      BL       __aeabi_dmul
   \   0000017C   0x0032             MOVS     R2,R6
   \   0000017E   0x003B             MOVS     R3,R7
   \   00000180   0x.... 0x....      BL       __aeabi_dadd
   \   00000184   0x.... 0x....      BL       __aeabi_d2iz
   \   00000188   0x....             LDR.N    R1,??DataTable1_15
   \   0000018A   0x6008             STR      R0,[R1, #+0]
     42            }
     43            LPLD_FTM_PWM_ChangeDuty(FTM2, FTM_Ch0, angle);
   \                     ??directionControl_4: (+1)
   \   0000018C   0x....             LDR.N    R0,??DataTable1_15
   \   0000018E   0x6802             LDR      R2,[R0, #+0]
   \   00000190   0x2100             MOVS     R1,#+0
   \   00000192   0x....             LDR.N    R0,??DataTable1_17  ;; 0x400b8000
   \   00000194   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     44          }
   \   00000198   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     45          
     46          

   \                                 In section .text, align 2, keep-with-next
     47          int angleProtected(int t)
     48          {
     49            if (t >= rightMaxAngle)
   \                     angleProtected: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable1_18
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x4288             CMP      R0,R1
   \   00000006   0xDB02             BLT.N    ??angleProtected_0
     50            {
     51              return rightMaxAngle;
   \   00000008   0x....             LDR.N    R0,??DataTable1_18
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xE006             B.N      ??angleProtected_1
     52            }
     53            else if (t <= leftMaxAngle)
   \                     ??angleProtected_0: (+1)
   \   0000000E   0x....             LDR.N    R1,??DataTable1_19
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0x4281             CMP      R1,R0
   \   00000014   0xDB02             BLT.N    ??angleProtected_2
     54            {
     55              return leftMaxAngle;
   \   00000016   0x....             LDR.N    R0,??DataTable1_19
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xE7FF             B.N      ??angleProtected_1
     56            }
     57            else
     58            {
     59              return t;
   \                     ??angleProtected_2: (+1)
   \                     ??angleProtected_1: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
     60            }
     61          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     crossFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     Line2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     midDot

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     Line1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     countAver

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     absMid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     curAver

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     preAver

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     devAver

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     averData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     sumAverData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     midAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     P

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x40240000         DC32     0x40240000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x........         DC32     D

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x........         DC32     angle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x........         DC32     crossScale

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   0x........         DC32     rightMaxAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   0x........         DC32     leftMaxAngle
     62          
     63          
     64          //void normal(int a, int b, int c)
     65          //{ 
     66          //  polyfit((float*)midDot, (float*)index, n);
     67          //  float k = b_x;
     68          //  float t = c_x;
     69          //  
     70          //  for (i = 55; i > a; i--)
     71          //  {
     72          //    midDot[i] = (i - t)/k;
     73          //  }
     74          //  
     75          //   28 35 55
     76          //  三个定行
     77          //  line1 = a;
     78          //  line2 = b;
     79          //  line3 = c;
     80          //
     81          //  //头两行丢线
     82          //  if (endLine > ctrLine)
     83          //  {
     84          //    line1 = 40;
     85          //    line2 = 43;
     86          //  }
     87          //  int x1, x2, x3;
     88          //
     89          //  x1 = midDot[line1];
     90          //  x2 = midDot[line3];
     91          //  x3 = midDot[line3];
     92          //  //key = 0;//countError();
     93          //  s = (x1 * line2 - x2 * line1) + (x2 * line3 - x3 * line2) + (x3 * line1 - x1 * line3);
     94          //  s = s * 0.5 * 0.07;
     95          //
     96          //  deviation = s - preS;
     97          //  preS = s;
     98          //  
     99          //  angle = midAngle + s * (P/10.0) + deviation * (D/10.0) + -4 * (midDot[50] - absMid);
    100          //  angle = angleProtected(angle);
    101          //  LPLD_FTM_PWM_ChangeDuty(FTM2, FTM_Ch1, angle);
    102          //}
    103          
    104          
    105          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   angleProtected
      24   directionControl
        24   -> LPLD_FTM_PWM_ChangeDuty
        24   -> __aeabi_d2iz
        24   -> __aeabi_dadd
        24   -> __aeabi_ddiv
        24   -> __aeabi_dmul
        24   -> __aeabi_f2d
        24   -> __aeabi_f2iz
        24   -> __aeabi_fmul
        24   -> __aeabi_i2d
        24   -> __aeabi_i2f
        24   -> angleProtected


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      30  angleProtected
     410  directionControl

 
 520 bytes in section .text
 
 520 bytes of CODE memory

Errors: none
Warnings: 3
