///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM       14/Jul/2016  17:43:05
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        C:\Users\whstarlit\Desktop\Smart_Car\lib\LPLD\DEV\LQ12864.c
//    Command line =  
//        C:\Users\whstarlit\Desktop\Smart_Car\lib\LPLD\DEV\LQ12864.c -D
//        LPLD_K60 -D USE_K60D10 -lCN
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\List\ -lB
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\List\ -o
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\Obj\
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M4 -e --fpu=None --dlib_config
//        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\app\ -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\CPU\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\common\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\HW\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\DEV\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\FUNC\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\uCOS-II\Ports\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\uCOS-II\Source\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\FatFs\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\FatFs\option\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\common\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\driver\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\descriptor\
//        -I
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\class\
//        -I C:\Users\whstarlit\Desktop\Smart_Car\lib\ -Ol -I
//        D:\IAR\arm\CMSIS\Include\ -D ARM_MATH_CM4
//    List file    =  
//        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\List\LQ12864.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN LPLD_GPIO_Init
        EXTERN __aeabi_cfcmple
        EXTERN __aeabi_cfrcmple
        EXTERN __aeabi_d2iz
        EXTERN __aeabi_dadd
        EXTERN __aeabi_ddiv
        EXTERN __aeabi_dmul
        EXTERN __aeabi_f2d
        EXTERN __aeabi_f2iz
        EXTERN __aeabi_f2uiz
        EXTERN __aeabi_fmul
        EXTERN __aeabi_fsub
        EXTERN __aeabi_i2f
        EXTERN __aeabi_memcpy4
        EXTERN __aeabi_ui2d
        EXTERN __aeabi_ui2f
        EXTERN sprintf

        PUBLIC Change_To_Bit
        PUBLIC Delay_temp
        PUBLIC Draw_BMP
        PUBLIC Draw_LQLogo
        PUBLIC Draw_LibLogo
        PUBLIC F14x16
        PUBLIC F14x16_Idx
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC Float_To_String
        PUBLIC LCD_CLS
        PUBLIC LCD_DLY_ms
        PUBLIC LCD_Fill
        PUBLIC LCD_Fill_Line
        PUBLIC LCD_Init
        PUBLIC LCD_P14x16Str
        PUBLIC LCD_P14x16Str2
        PUBLIC LCD_P6x8Str
        PUBLIC LCD_P6x8Str2
        PUBLIC LCD_P8x16Str
        PUBLIC LCD_P8x16Str2
        PUBLIC LCD_PaintTSL1401_Bulk
        PUBLIC LCD_PaintTSL1401_Line
        PUBLIC LCD_Print
        PUBLIC LCD_PutPixel
        PUBLIC LCD_Rectangle
        PUBLIC LCD_Set_Pos
        PUBLIC LCD_WrCmd
        PUBLIC LCD_WrDat
        PUBLIC LCD_Write_Float
        PUBLIC LCD_Write_Float_Dot
        PUBLIC LCD_Write_Float_Dot_Chinese
        PUBLIC LED_PrintImag2
        PUBLIC LED_PrintImage
        PUBLIC LIBLOGO60x58
        PUBLIC List_Move
        PUBLIC List_Paint
        PUBLIC OLED_Write_Data
        PUBLIC Paint_Angle
        PUBLIC Paint_List
        PUBLIC SetAddressingMode
        PUBLIC SetColumnAddress
        PUBLIC SetContrastControl
        PUBLIC SetPageAddress
        PUBLIC SetStartColumn
        PUBLIC SetStartLine
        PUBLIC SetStartPage
        PUBLIC Set_Charge_Pump
        PUBLIC Set_Common_Config
        PUBLIC Set_Common_Remap
        PUBLIC Set_Display_Clock
        PUBLIC Set_Display_Offset
        PUBLIC Set_Display_On_Off
        PUBLIC Set_Entire_Display
        PUBLIC Set_Inverse_Display
        PUBLIC Set_Multiplex_Ratio
        PUBLIC Set_NOP
        PUBLIC Set_Precharge_Period
        PUBLIC Set_Segment_Remap
        PUBLIC Set_VCOMH
        PUBLIC Temp_List
        PUBLIC adjust
        PUBLIC floatToInt
        PUBLIC floatToInt2
        PUBLIC gpio_init_struct_OLED
        PUBLIC init_gpio_OLED
        PUBLIC longqiu96x64
        PUBLIC str1
        PUBLIC str2
        PUBLIC str3
        PUBLIC str4
        PUBLIC str5
        PUBLIC str6

// C:\Users\whstarlit\Desktop\Smart_Car\lib\LPLD\DEV\LQ12864.c
//    1 /********************************************************
//    2 【平    台】龙丘MC9S12AC16开发板V2.0
//    3 【编    写】龙丘
//    4 【Designed】by Chiu Sir
//    5 【E-mail  】chiusir@163.com
//    6 【软件版本】V1.0
//    7 【最后更新】2009年12月15日
//    8 【相关信息参考下列地址】
//    9 【网    站】http://www.lqist.cn
//   10 【淘宝店铺】http://shop36265907.taobao.com
//   11 ------------------------------------------------
//   12 【dev.env.】Code Warrior 6.2
//   13 【Target  】MC9S12AC16
//   14 【Crystal 】8.000Mhz
//   15 【busclock】16.000MHz
//   16 【pllclock】32.000MHz
//   17 *********************************************************/ 
//   18 #include "common.h"
//   19 #include "LQ12864.h"
//   20 
//   21 #define HIGH  1u
//   22 #define LOW   0u
//   23 
//   24 #define LED_IMAGE_WHITE       1
//   25 #define LED_IMAGE_BLACK       0
//   26 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   27 GPIO_InitTypeDef gpio_init_struct_OLED;
gpio_init_struct_OLED:
        DS8 20

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//   28 void init_gpio_OLED()
//   29 {
init_gpio_OLED:
        PUSH     {R7,LR}
//   30  /*
//   31   *配置 PTC16~PTC19 为GPIO功能,输出,高电平，禁用中断
//   32   */
//   33   
//   34   //D0, D1口
//   35 //  gpio_init_struct_OLED.GPIO_PTx = PTA;
//   36 //  gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin14|GPIO_Pin16;
//   37 //  gpio_init_struct_OLED.GPIO_Dir = DIR_OUTPUT;
//   38 //  gpio_init_struct_OLED.GPIO_Output = OUTPUT_H;
//   39 //  gpio_init_struct_OLED.GPIO_PinControl = IRQC_DIS;
//   40 //  LPLD_GPIO_Init(gpio_init_struct_OLED);
//   41 //  
//   42 //  //DC, RST口
//   43 //  gpio_init_struct_OLED.GPIO_PTx = PTB;
//   44 //  gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin20|GPIO_Pin21;
//   45 //  LPLD_GPIO_Init(gpio_init_struct_OLED);
//   46   
//   47 //  //D0 - C16, D1 - C15口
//   48   gpio_init_struct_OLED.GPIO_PTx = PTC;
        LDR.W    R0,??DataTable13  ;; 0x400ff080
        LDR.W    R1,??DataTable13_1
        STR      R0,[R1, #+0]
//   49   gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin16|GPIO_Pin15;
        MOVS     R0,#+98304
        LDR.W    R1,??DataTable13_1
        STR      R0,[R1, #+4]
//   50   gpio_init_struct_OLED.GPIO_Dir = DIR_OUTPUT;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable13_1
        STRB     R0,[R1, #+12]
//   51   gpio_init_struct_OLED.GPIO_Output = OUTPUT_H;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable13_1
        STRB     R0,[R1, #+13]
//   52   gpio_init_struct_OLED.GPIO_PinControl = IRQC_DIS;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable13_1
        STR      R0,[R1, #+8]
//   53   LPLD_GPIO_Init(gpio_init_struct_OLED);
        LDR.W    R1,??DataTable13_1
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//   54   
//   55   //DC - C11, RST - C13口
//   56   gpio_init_struct_OLED.GPIO_PTx = PTC;
        LDR.W    R0,??DataTable13  ;; 0x400ff080
        LDR.W    R1,??DataTable13_1
        STR      R0,[R1, #+0]
//   57   gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin11|GPIO_Pin13;
        MOV      R0,#+10240
        LDR.W    R1,??DataTable13_1
        STR      R0,[R1, #+4]
//   58   LPLD_GPIO_Init(gpio_init_struct_OLED);
        LDR.W    R1,??DataTable13_1
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//   59   
//   60   //Test ---- B11 B10, B3, B2
//   61 //  gpio_init_struct_OLED.GPIO_PTx = PTB;
//   62 //  gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin11|GPIO_Pin10;
//   63 //  gpio_init_struct_OLED.GPIO_Dir = DIR_OUTPUT;
//   64 //  gpio_init_struct_OLED.GPIO_Output = OUTPUT_H;
//   65 //  gpio_init_struct_OLED.GPIO_PinControl = IRQC_DIS;
//   66 //  LPLD_GPIO_Init(gpio_init_struct_OLED);
//   67 //  
//   68 //  gpio_init_struct_OLED.GPIO_PTx = PTB;
//   69 //  gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin3|GPIO_Pin2;
//   70 //  LPLD_GPIO_Init(gpio_init_struct_OLED);
//   71 }
        POP      {R0,PC}          ;; return

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_0:
        DATA
        DC8 25H, 64H, 2EH, 25H, 64H, 0, 0
        DC8 0
//   72 
//   73 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   74 const byte F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   75 {
//   76     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//   77     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//   78     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//   79     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//   80     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//   81     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//   82     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//   83     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//   84     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//   85     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//   86     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//   87     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//   88     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//   89     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//   90     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//   91     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//   92     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//   93     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//   94     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//   95     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//   96     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//   97     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//   98     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//   99     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//  100     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//  101     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//  102     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//  103     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//  104     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//  105     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//  106     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//  107     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//  108     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//  109     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//  110     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//  111     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//  112     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//  113     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//  114     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//  115     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//  116     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//  117     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//  118     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//  119     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//  120     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//  121     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//  122     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//  123     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  124     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  125     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  126     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  127     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  128     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  129     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  130     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  131     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  132     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  133     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  134     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  135     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  136     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  137     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  138     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  139     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  140     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  141     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  142     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  143     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  144     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  145     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  146     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  147     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  148     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  149     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  150     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  151     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  152     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  153     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  154     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  155     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  156     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  157     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  158     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  159     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  160     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  161     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  162     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  163     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  164     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  165     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  166     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  167     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  168 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  169 const byte F14x16_Idx[] = 
F14x16_Idx:
        DATA
        DC8 0B1H, 0B1H, 0BEH, 0A9H, 0C1H, 0FAH, 0C7H, 0F0H
        DC8 0C7H, 0F1H, 0BFH, 0C6H, 0BCH, 0BCH, 0BFH, 0AAH
        DC8 0B7H, 0A2H, 0B0H, 0E5H, 0D6H, 0C7H, 0C4H, 0DCH
        DC8 0B3H, 0B5H, 0CAH, 0D7H, 0D1H, 0A1H, 0D2H, 0BAH
        DC8 0BEH, 0A7H, 0CAH, 0D2H, 0CEH, 0C2H, 0B6H, 0C8H
        DC8 0B0H, 0B4H, 0BCH, 0FCH, 0B4H, 0CEH, 0B5H, 0E7H
        DC8 0D1H, 0B9H, 0E3H, 0D0H, 0D6H, 0B5H, 0C9H, 0CFH
        DC8 0CFH, 0C2H, 0D7H, 0F3H, 0D3H, 0D2H, 0CBH, 0D9H
        DC8 0B6H, 0C8H, 0B7H, 0BDH, 0CFH, 0F2H, 0BFH, 0D8H
        DC8 0BDH, 0C7H, 0B4H, 0F3H, 0D0H, 0A1H, 0B8H, 0DFH
        DC8 0B5H, 0CDH, 0B6H, 0C1H, 0D0H, 0B4H, 0CDH, 0CBH
        DC8 0B3H, 0F6H, 0CFH, 0DEH, 0D6H, 0C6H, 0D7H, 0B4H
        DC8 0CCH, 0ACH, 0A3H, 0BAH, 0CAH, 0BCH, 0BDH, 0E1H
        DC8 0CAH, 0F8H, 0D5H, 0FDH, 0B7H, 0B4H, 0D5H, 0BCH
        DC8 0BFH, 0D5H, 0B1H, 0C8H, 0B8H, 0B4H, 0CEH, 0BBH
        DC8 0D6H, 0D0H, 0B9H, 0D8H, 0B1H, 0D5H, 0B3H, 0F5H
        DC8 0BBH, 0AFH, 0C9H, 0E8H, 0D6H, 0C3H, 0B6H, 0E6H
        DC8 0BBH, 0FAH, 0CBH, 0C0H, 0C7H, 0F8H, 0C7H, 0B0H
        DC8 0D5H, 0B0H, 0BEH, 0E0H, 0C0H, 0EBH, 0D4H, 0A4H
        DC8 0C9H, 0E8H, 0BCH, 0ECH, 0B2H, 0E2H, 0B5H, 0C6H
        DC8 0B1H, 0C8H, 0C0H, 0FDH, 0CEH, 0A2H, 0B7H, 0D6H
        DC8 0BBH, 0FDH, 0B2H, 0EEH, 0C0H, 0B6H, 0D1H, 0C0H
        DC8 0CEH, 0DEH, 0CFH, 0DFH, 0CFH, 0D4H, 0CAH, 0BEH
        DC8 0CBH, 0ABH, 0
        DC8 0
//  170 {
//  171 	"北京龙丘邱科技开发板智能车首选液晶室温度按键次电压阈值上下左右速度方向控角大小高低读写退出限制状态：始结束正反占空比复位中关闭初化设置舵机死区前瞻距离预设检测灯比例微分积差蓝牙无线显示双"
//  172 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  173 const byte F14x16[] = {  
F14x16:
        DATA
        DC8 0, 0, 64, 64, 64, 254, 0, 0, 254, 128, 64, 32, 32, 0, 0, 48, 16, 16
        DC8 8, 127, 0, 0, 127, 64, 64, 64, 120, 0, 0, 8, 8, 232, 72, 72, 74, 76
        DC8 72, 72, 232, 8, 8, 0, 0, 64, 32, 19, 10, 66, 254, 2, 2, 10, 19, 96
        DC8 0, 0, 0, 0, 32, 32, 32, 254, 34, 32, 224, 36, 168, 160, 16, 0, 0
        DC8 64, 32, 16, 12, 35, 16, 8, 127, 66, 65, 64, 120, 0, 0, 0, 0, 248
        DC8 136, 136, 136, 136, 132, 132, 134, 192, 0, 0, 0, 0, 32, 63, 32, 32
        DC8 32, 32, 63, 32, 32, 32, 32, 0, 0, 0, 252, 68, 68, 196, 66, 64, 252
        DC8 4, 196, 52, 12, 0, 0, 48, 31, 16, 16, 15, 16, 16, 127, 0, 16, 17
        DC8 30, 0, 0, 0, 72, 252, 68, 66, 0, 136, 16, 0, 254, 2, 0, 0, 0, 12, 2
        DC8 127, 1, 3, 8, 8, 5, 4, 255, 4, 2, 0, 0, 16, 16, 254, 16, 144, 144
        DC8 144, 144, 254, 144, 144, 16, 0, 0, 2, 65, 127, 129, 128, 64, 39, 40
        DC8 24, 38, 65, 64, 0, 0, 132, 132, 132, 252, 132, 132, 132, 132, 252
        DC8 132, 134, 128, 0, 0, 64, 32, 16, 15, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0
        DC8 0, 24, 36, 160, 124, 34, 32, 34, 36, 172, 32, 0, 0, 0, 64, 48, 140
        DC8 131, 65, 39, 25, 25, 39, 97, 64, 64, 0, 0, 0, 224, 254, 144, 32
        DC8 248, 200, 72, 68, 196, 98, 0, 0, 0, 6, 1, 127, 65, 184, 71, 33, 22
        DC8 28, 35, 96, 64, 0, 0, 48, 44, 170, 120, 168, 164, 32, 252, 136, 136
        DC8 120, 0, 0, 0, 2, 2, 1, 126, 82, 83, 83, 82, 82, 126, 0, 0, 0, 0
        DC8 112, 168, 164, 162, 232, 48, 0, 126, 144, 136, 184, 64, 0, 0, 0
        DC8 127, 10, 74, 127, 0, 0, 126, 72, 68, 66, 112, 0, 0, 0, 8, 200, 56
        DC8 12, 10, 232, 8, 8, 136, 8, 0, 0, 0, 8, 8, 9, 9, 9, 9, 127, 9, 9, 8
        DC8 8, 8, 0, 0, 16, 16, 208, 82, 76, 112, 80, 76, 82, 208, 16, 0, 0, 0
        DC8 0, 0, 127, 74, 74, 74, 74, 74, 74, 127, 0, 0, 0, 0, 0, 132, 72, 192
        DC8 160, 156, 144, 254, 144, 144, 144, 128, 0, 0, 32, 31, 16, 32, 80
        DC8 78, 65, 64, 95, 80, 88, 80, 0, 0, 64, 132, 224, 16, 200, 56, 152
        DC8 238, 88, 72, 200, 8, 0, 0, 8, 126, 1, 2, 255, 129, 65, 38, 27, 62
        DC8 97, 64, 0, 0, 0, 0, 128, 124, 84, 84, 84, 84, 84, 126, 0, 0, 0, 0
        DC8 0, 127, 73, 73, 127, 0, 0, 127, 73, 73, 63, 1, 0, 0, 32, 88, 72, 72
        DC8 200, 74, 76, 72, 200, 40, 24, 0, 0, 0, 64, 64, 75, 75, 74, 126, 74
        DC8 74, 74, 75, 64, 64, 0, 0, 32, 4, 248, 16, 252, 148, 148, 148, 148
        DC8 252, 0, 0, 0, 0, 0, 126, 65, 126, 66, 126, 66, 66, 126, 66, 126, 64
        DC8 0, 0, 0, 248, 72, 72, 232, 88, 70, 72, 248, 72, 40, 0, 0, 64, 56
        DC8 135, 128, 128, 68, 77, 53, 53, 77, 66, 64, 64, 0, 0, 0, 32, 254
        DC8 144, 32, 24, 144, 106, 20, 16, 48, 24, 0, 0, 2, 65, 127, 128, 129
        DC8 71, 73, 49, 25, 23, 33, 64, 0, 0, 112, 206, 80, 72, 232, 152, 168
        DC8 168, 254, 168, 248, 32, 0, 0, 2, 127, 178, 66, 36, 30, 41, 74, 127
        DC8 74, 73, 68, 0, 0, 0, 4, 248, 16, 192, 48, 46, 224, 32, 32, 32, 16
        DC8 0, 0, 0, 63, 128, 65, 32, 16, 14, 1, 14, 16, 96, 64, 0, 0, 0, 240
        DC8 144, 144, 144, 254, 144, 144, 144, 240, 16, 0, 0, 0, 0, 15, 4, 4, 4
        DC8 127, 68, 68, 68, 79, 80, 96, 0, 0, 0, 252, 4, 4, 4, 4, 252, 4, 4, 4
        DC8 134, 4, 0, 0, 32, 95, 64, 64, 65, 65, 63, 65, 67, 77, 64, 32, 0, 0
        DC8 0, 240, 68, 196, 192, 36, 220, 52, 180, 68, 252, 4, 0, 0, 0, 127
        DC8 19, 20, 47, 25, 11, 14, 17, 124, 127, 0, 0, 0, 128, 240, 12, 8, 200
        DC8 72, 40, 94, 72, 232, 8, 8, 0, 0, 0, 127, 0, 0, 111, 149, 149, 149
        DC8 149, 127, 128, 64, 0, 0, 0, 0, 0, 0, 0, 254, 64, 64, 64, 64, 64, 0
        DC8 0, 0, 64, 64, 64, 64, 64, 63, 64, 64, 64, 64, 64, 32, 0, 0, 0, 8, 8
        DC8 8, 8, 248, 72, 136, 136, 8, 4, 4, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0
        DC8 1, 0, 0, 0, 0, 0, 16, 16, 208, 62, 16, 16, 16, 16, 16, 8, 0, 0, 0
        DC8 16, 8, 70, 65, 65, 65, 127, 65, 65, 65, 96, 64, 0, 0, 16, 16, 16
        DC8 144, 112, 14, 16, 16, 16, 16, 16, 0, 0, 0, 8, 4, 2, 63, 65, 65, 65
        DC8 65, 65, 127, 1, 0, 0, 0, 132, 136, 128, 8, 232, 40, 40, 254, 40, 40
        DC8 232, 8, 0, 0, 32, 16, 31, 48, 73, 69, 67, 127, 69, 69, 73, 64, 0, 0
        DC8 0, 248, 72, 72, 232, 88, 70, 72, 248, 72, 40, 0, 0, 64, 56, 135
        DC8 128, 128, 68, 77, 53, 53, 77, 66, 64, 64, 0, 0, 16, 16, 16, 16, 16
        DC8 242, 156, 144, 144, 144, 16, 24, 0, 0, 0, 64, 48, 8, 7, 64, 64, 64
        DC8 120, 7, 0, 0, 0, 0, 0, 240, 16, 144, 140, 146, 144, 144, 16, 16
        DC8 248, 0, 0, 0, 0, 127, 0, 7, 8, 8, 8, 15, 0, 64, 127, 0, 0, 0, 16
        DC8 16, 254, 144, 48, 144, 80, 12, 20, 80, 176, 24, 0, 0, 66, 65, 127
        DC8 0, 1, 66, 66, 62, 66, 66, 67, 32, 0, 0, 0, 64, 240, 44, 42, 40, 248
        DC8 40, 32, 32, 224, 0, 0, 0, 64, 32, 31, 5, 5, 5, 127, 5, 69, 69, 127
        DC8 0, 0, 0, 32, 32, 32, 32, 32, 254, 162, 32, 32, 32, 32, 32, 0, 0
        DC8 128, 64, 32, 16, 12, 3, 3, 4, 8, 48, 96, 64, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 254, 0, 64, 128, 0, 0, 0, 0, 4, 2, 1, 0, 64, 64, 63, 0, 0, 0, 3
        DC8 6, 0, 0, 8, 8, 8, 232, 168, 166, 168, 168, 248, 8, 8, 4, 0, 0, 0
        DC8 127, 2, 46, 18, 18, 18, 62, 66, 66, 127, 0, 0, 0, 192, 240, 12, 0
        DC8 248, 136, 136, 248, 132, 132, 132, 128, 0, 0, 0, 127, 0, 0, 63, 32
        DC8 48, 81, 14, 16, 32, 112, 0, 64, 64, 196, 0, 32, 104, 168, 168, 126
        DC8 168, 40, 96, 32, 0, 0, 0, 63, 32, 152, 137, 74, 41, 24, 39, 40, 72
        DC8 0, 0, 0, 0, 14, 140, 116, 68, 68, 68, 68, 68, 52, 12, 4, 0, 0, 8, 8
        DC8 9, 9, 9, 9, 9, 9, 73, 113, 15, 0, 0, 0, 0, 132, 200, 0, 0, 252, 164
        DC8 164, 164, 252, 4, 0, 0, 0, 32, 16, 31, 32, 32, 95, 74, 66, 66, 70
        DC8 73, 0, 0, 0, 0, 240, 128, 128, 128, 252, 128, 128, 128, 240, 8, 0
        DC8 0, 0, 0, 126, 64, 64, 64, 63, 64, 64, 64, 67, 124, 0, 0, 0, 0, 252
        DC8 244, 12, 0, 252, 36, 36, 36, 36, 252, 0, 0, 0, 0, 127, 8, 15, 0
        DC8 127, 33, 7, 9, 53, 99, 2, 0, 0, 96, 88, 80, 254, 80, 80, 80, 0, 248
        DC8 0, 252, 2, 0, 0, 30, 2, 2, 127, 18, 62, 1, 0, 15, 64, 127, 0, 0, 0
        DC8 16, 96, 0, 254, 64, 64, 64, 254, 192, 68, 56, 0, 0, 0, 12, 2, 2
        DC8 127, 64, 48, 14, 1, 7, 24, 32, 64, 0, 0, 16, 16, 16, 144, 240, 30
        DC8 48, 80, 144, 16, 8, 0, 0, 0, 34, 26, 1, 124, 64, 69, 74, 64, 112, 1
        DC8 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 50, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 46, 160, 112, 64, 112, 76, 66
        DC8 64, 80, 224, 0, 0, 67, 36, 24, 15, 48, 0, 126, 66, 66, 66, 127, 2
        DC8 0, 0, 224, 152, 134, 96, 32, 144, 144, 144, 254, 144, 144, 16, 0, 0
        DC8 100, 39, 36, 20, 20, 124, 68, 68, 68, 68, 126, 0, 0, 0, 8, 8, 232
        DC8 40, 40, 254, 42, 40, 40, 232, 40, 8, 0, 0, 64, 32, 19, 10, 6, 255
        DC8 2, 14, 18, 51, 32, 32, 0, 0, 0, 4, 196, 68, 4, 4, 252, 4, 4, 4, 132
        DC8 4, 0, 0, 64, 64, 63, 64, 64, 64, 63, 65, 65, 65, 32, 0, 0, 0, 0, 0
        DC8 248, 72, 200, 68, 68, 68, 68, 194, 64, 0, 0, 0, 96, 156, 131, 64
        DC8 33, 34, 20, 24, 54, 33, 64, 64, 0, 0, 0, 0, 0, 0, 0, 254, 32, 32
        DC8 32, 32, 16, 0, 0, 0, 0, 0, 127, 66, 66, 65, 66, 66, 66, 127, 0, 0
        DC8 0, 0, 32, 152, 144, 80, 48, 18, 20, 16, 48, 112, 208, 8, 0, 0, 65
        DC8 64, 64, 66, 66, 126, 66, 66, 66, 65, 64, 64, 0, 0, 0, 254, 128, 128
        DC8 64, 128, 254, 128, 64, 32, 16, 0, 0, 0, 0, 63, 32, 32, 16, 16, 63
        DC8 64, 64, 64, 88, 32, 0, 0, 32, 16, 8, 246, 88, 88, 88, 88, 88, 248
        DC8 4, 0, 0, 0, 128, 144, 136, 69, 79, 53, 21, 61, 79, 69, 64, 64, 0, 0
        DC8 128, 96, 252, 34, 160, 32, 34, 44, 32, 224, 80, 0, 0, 0, 1, 0, 127
        DC8 64, 64, 67, 76, 32, 94, 65, 64, 32, 0, 0, 0, 240, 32, 32, 32, 254
        DC8 34, 32, 32, 32, 240, 0, 0, 0, 0, 3, 2, 2, 2, 255, 2, 2, 2, 2, 3, 0
        DC8 0, 0, 0, 32, 32, 34, 44, 224, 16, 40, 38, 32, 16, 0, 0, 0, 128, 66
        DC8 34, 18, 10, 7, 2, 14, 18, 34, 65, 65, 0, 0, 0, 248, 66, 76, 64, 196
        DC8 252, 68, 68, 68, 252, 4, 0, 0, 0, 127, 8, 4, 2, 33, 63, 0, 0, 64
        DC8 127, 0, 0, 0, 16, 16, 210, 44, 144, 8, 8, 248, 8, 8, 8, 248, 0, 0
        DC8 2, 1, 127, 1, 66, 48, 14, 1, 0, 64, 126, 1, 0, 0, 128, 64, 248, 6
        DC8 0, 0, 254, 0, 128, 96, 16, 0, 0, 0, 1, 0, 127, 8, 4, 4, 62, 65, 64
        DC8 64, 64, 120, 0, 0, 64, 66, 204, 128, 64, 188, 132, 132, 132, 188
        DC8 192, 32, 0, 0, 0, 0, 191, 152, 72, 65, 38, 24, 60, 35, 64, 64, 0, 0
        DC8 0, 94, 212, 84, 92, 244, 84, 92, 84, 212, 62, 0, 0, 64, 64, 64, 127
        DC8 107, 107, 106, 107, 107, 107, 127, 64, 64, 0, 0, 0, 248, 44, 80
        DC8 248, 32, 24, 200, 14, 8, 152, 8, 0, 0, 121, 7, 3, 69, 127, 0, 0
        DC8 127, 66, 65, 64, 112, 0, 0, 0, 160, 254, 160, 0, 248, 8, 8, 8, 252
        DC8 0, 0, 0, 24, 6, 1, 127, 64, 33, 31, 0, 0, 0, 127, 64, 112, 0, 0, 4
        DC8 132, 116, 76, 68, 228, 4, 252, 4, 132, 68, 4, 0, 0, 66, 33, 17, 10
        DC8 7, 0, 0, 63, 65, 64, 64, 120, 0, 0, 0, 252, 4, 20, 36, 68, 132, 196
        DC8 52, 20, 6, 4, 0, 0, 0, 127, 64, 72, 68, 66, 65, 67, 70, 72, 64, 64
        DC8 0, 0, 16, 208, 80, 82, 204, 16, 16, 204, 18, 208, 48, 8, 0, 0, 0
        DC8 127, 9, 9, 127, 0, 0, 31, 64, 127, 0, 0, 0, 0, 252, 72, 248, 4, 240
        DC8 40, 102, 40, 216, 44, 96, 144, 0, 0, 63, 18, 63, 96, 31, 1, 115, 91
        DC8 90, 91, 119, 0, 0, 0, 56, 68, 196, 68, 124, 0, 252, 68, 68, 68, 228
        DC8 4, 0, 0, 63, 34, 31, 18, 1, 0, 127, 68, 68, 68, 71, 32, 0, 0, 0, 8
        DC8 248, 136, 88, 42, 44, 88, 8, 248, 8, 4, 0, 0, 0, 126, 3, 26, 23, 19
        DC8 19, 11, 51, 66, 126, 0, 0, 0, 64, 68, 244, 76, 196, 68, 228, 20
        DC8 236, 36, 228, 2, 0, 0, 0, 0, 127, 0, 128, 128, 79, 32, 31, 16, 31
        DC8 96, 0, 0, 64, 66, 204, 128, 64, 188, 132, 132, 132, 188, 192, 32, 0
        DC8 0, 0, 0, 191, 152, 72, 65, 38, 24, 60, 35, 64, 64, 0, 0, 0, 160
        DC8 254, 160, 96, 160, 152, 134, 136, 80, 32, 64, 0, 0, 6, 1, 127, 64
        DC8 64, 92, 64, 78, 96, 94, 65, 64, 0, 0, 32, 4, 192, 252, 4, 244, 4
        DC8 252, 0, 240, 252, 0, 0, 0, 0, 127, 64, 39, 24, 7, 16, 103, 0, 15
        DC8 127, 0, 0, 0, 192, 0, 254, 32, 24, 8, 8, 8, 248, 8, 8, 4, 0, 0, 96
        DC8 24, 7, 8, 16, 0, 0, 64, 127, 0, 0, 0, 0, 0, 0, 254, 128, 128, 64
        DC8 128, 254, 128, 64, 32, 16, 0, 0, 0, 0, 63, 32, 32, 16, 16, 63, 64
        DC8 64, 64, 88, 32, 0, 0, 128, 248, 6, 136, 120, 72, 200, 68, 224, 16
        DC8 252, 0, 0, 0, 0, 127, 64, 33, 17, 14, 3, 0, 7, 64, 127, 0, 0, 0, 8
        DC8 196, 36, 184, 168, 190, 184, 192, 248, 38, 224, 16, 0, 0, 1, 127, 0
        DC8 48, 14, 130, 94, 73, 35, 28, 39, 64, 0, 0, 0, 192, 160, 152, 132
        DC8 128, 128, 142, 176, 64, 128, 128, 0, 0, 129, 64, 32, 16, 15, 0, 64
        DC8 64, 63, 1, 0, 0, 0, 0, 0, 72, 252, 68, 32, 64, 248, 8, 8, 8, 248, 0
        DC8 0, 0, 4, 3, 127, 1, 67, 32, 17, 13, 1, 5, 25, 96, 0, 0, 0, 0, 82
        DC8 76, 208, 112, 80, 72, 86, 80, 8, 0, 0, 0, 33, 17, 73, 71, 73, 73
        DC8 121, 73, 73, 69, 65, 65, 0, 0, 8, 232, 8, 222, 42, 136, 104, 94
        DC8 200, 72, 40, 0, 0, 0, 64, 67, 124, 71, 124, 69, 124, 68, 68, 127
        DC8 64, 64, 0, 0, 0, 68, 124, 68, 68, 68, 196, 252, 68, 68, 70, 68, 0
        DC8 0, 32, 32, 16, 8, 4, 67, 64, 63, 0, 0, 0, 0, 0, 0, 0, 132, 132, 132
        DC8 132, 252, 132, 132, 132, 132, 68, 64, 0, 0, 128, 64, 32, 16, 14, 1
        DC8 63, 64, 64, 64, 64, 120, 0, 0, 96, 88, 198, 96, 48, 32, 44, 242, 36
        DC8 44, 144, 128, 0, 0, 36, 39, 36, 20, 67, 65, 33, 31, 25, 37, 66, 112
        DC8 0, 0, 0, 0, 252, 148, 148, 148, 148, 148, 148, 252, 0, 0, 0, 0, 0
        DC8 36, 56, 32, 63, 32, 32, 63, 48, 45, 34, 0, 0, 0, 64, 64, 68, 68, 68
        DC8 196, 68, 68, 68, 68, 68, 64, 0, 0, 16, 8, 6, 3, 64, 127, 0, 0, 2, 4
        DC8 24, 16, 0, 0, 8, 72, 136, 136, 120, 8, 56, 200, 8, 136, 120, 0, 0
        DC8 0, 16, 8, 4, 3, 6, 88, 32, 17, 14, 27, 32, 32, 0
//  174 0x00,0x00,0x40,0x40,0x40,0xFE,0x00,0x00,0xFE,0x80,0x40,0x20,0x20,0x00,
//  175 0x00,0x30,0x10,0x10,0x08,0x7F,0x00,0x00,0x7F,0x40,0x40,0x40,0x78,0x00,//北0
//  176 
//  177 0x00,0x08,0x08,0xE8,0x48,0x48,0x4A,0x4C,0x48,0x48,0xE8,0x08,0x08,0x00,
//  178 0x00,0x40,0x20,0x13,0x0A,0x42,0xFE,0x02,0x02,0x0A,0x13,0x60,0x00,0x00,//京1
//  179 
//  180 0x00,0x00,0x20,0x20,0x20,0xFE,0x22,0x20,0xE0,0x24,0xA8,0xA0,0x10,0x00,
//  181 0x00,0x40,0x20,0x10,0x0C,0x23,0x10,0x08,0x7F,0x42,0x41,0x40,0x78,0x00,//龙2
//  182 
//  183 0x00,0x00,0x00,0xF8,0x88,0x88,0x88,0x88,0x84,0x84,0x86,0xC0,0x00,0x00,
//  184 0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x00,//丘3
//  185 
//  186 0x00,0x00,0xFC,0x44,0x44,0xC4,0x42,0x40,0xFC,0x04,0xC4,0x34,0x0C,0x00,
//  187 0x00,0x30,0x1F,0x10,0x10,0x0F,0x10,0x10,0x7F,0x00,0x10,0x11,0x1E,0x00,//邱4
//  188 
//  189 0x00,0x00,0x48,0xFC,0x44,0x42,0x00,0x88,0x10,0x00,0xFE,0x02,0x00,0x00,
//  190 0x00,0x0C,0x02,0x7F,0x01,0x03,0x08,0x08,0x05,0x04,0xFF,0x04,0x02,0x00,//科5
//  191 
//  192 0x00,0x10,0x10,0xFE,0x10,0x90,0x90,0x90,0x90,0xFE,0x90,0x90,0x10,0x00,
//  193 0x00,0x02,0x41,0x7F,0x81,0x80,0x40,0x27,0x28,0x18,0x26,0x41,0x40,0x00,//技6
//  194 
//  195 0x00,0x84,0x84,0x84,0xFC,0x84,0x84,0x84,0x84,0xFC,0x84,0x86,0x80,0x00,
//  196 0x00,0x40,0x20,0x10,0x0F,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,//开7
//  197 
//  198 0x00,0x00,0x18,0x24,0xA0,0x7C,0x22,0x20,0x22,0x24,0xAC,0x20,0x00,0x00,
//  199 0x00,0x40,0x30,0x8C,0x83,0x41,0x27,0x19,0x19,0x27,0x61,0x40,0x40,0x00,//发8
//  200 
//  201 0x00,0x00,0xE0,0xFE,0x90,0x20,0xF8,0xC8,0x48,0x44,0xC4,0x62,0x00,0x00,
//  202 0x00,0x06,0x01,0x7F,0x41,0xB8,0x47,0x21,0x16,0x1C,0x23,0x60,0x40,0x00,//板9
//  203 
//  204 0x00,0x30,0x2C,0xAA,0x78,0xA8,0xA4,0x20,0xFC,0x88,0x88,0x78,0x00,0x00,
//  205 0x00,0x02,0x02,0x01,0x7E,0x52,0x53,0x53,0x52,0x52,0x7E,0x00,0x00,0x00,//智10
//  206 
//  207 0x00,0x70,0xA8,0xA4,0xA2,0xE8,0x30,0x00,0x7E,0x90,0x88,0xB8,0x40,0x00,
//  208 0x00,0x00,0x7F,0x0A,0x4A,0x7F,0x00,0x00,0x7E,0x48,0x44,0x42,0x70,0x00,//能11
//  209 
//  210 0x00,0x00,0x08,0xC8,0x38,0x0C,0x0A,0xE8,0x08,0x08,0x88,0x08,0x00,0x00,
//  211 0x00,0x08,0x08,0x09,0x09,0x09,0x09,0x7F,0x09,0x09,0x08,0x08,0x08,0x00,//车12
//  212 
//  213 0x00,0x10,0x10,0xD0,0x52,0x4C,0x70,0x50,0x4C,0x52,0xD0,0x10,0x00,0x00,
//  214 0x00,0x00,0x00,0x7F,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x7F,0x00,0x00,0x00,//首13
//  215 
//  216 0x00,0x00,0x84,0x48,0xC0,0xA0,0x9C,0x90,0xFE,0x90,0x90,0x90,0x80,0x00,
//  217 0x00,0x20,0x1F,0x10,0x20,0x50,0x4E,0x41,0x40,0x5F,0x50,0x58,0x50,0x00,//选14
//  218 
//  219 0x00,0x40,0x84,0xE0,0x10,0xC8,0x38,0x98,0xEE,0x58,0x48,0xC8,0x08,0x00,
//  220 0x00,0x08,0x7E,0x01,0x02,0xFF,0x81,0x41,0x26,0x1B,0x3E,0x61,0x40,0x00,//液15
//  221 
//  222 0x00,0x00,0x00,0x80,0x7C,0x54,0x54,0x54,0x54,0x54,0x7E,0x00,0x00,0x00,
//  223 0x00,0x00,0x7F,0x49,0x49,0x7F,0x00,0x00,0x7F,0x49,0x49,0x3F,0x01,0x00,//晶16
//  224 
//  225 0x00,0x20,0x58,0x48,0x48,0xC8,0x4A,0x4C,0x48,0xC8,0x28,0x18,0x00,0x00,
//  226 0x00,0x40,0x40,0x4B,0x4B,0x4A,0x7E,0x4A,0x4A,0x4A,0x4B,0x40,0x40,0x00,//室17
//  227 
//  228 0x00,0x20,0x04,0xF8,0x10,0xFC,0x94,0x94,0x94,0x94,0xFC,0x00,0x00,0x00,
//  229 0x00,0x00,0x7E,0x41,0x7E,0x42,0x7E,0x42,0x42,0x7E,0x42,0x7E,0x40,0x00,//温18
//  230 
//  231 0x00,0x00,0xF8,0x48,0x48,0xE8,0x58,0x46,0x48,0xF8,0x48,0x28,0x00,0x00,
//  232 0x40,0x38,0x87,0x80,0x80,0x44,0x4D,0x35,0x35,0x4D,0x42,0x40,0x40,0x00,//度19
//  233 
//  234 0x00,0x00,0x20,0xFE,0x90,0x20,0x18,0x90,0x6A,0x14,0x10,0x30,0x18,0x00,
//  235 0x00,0x02,0x41,0x7F,0x80,0x81,0x47,0x49,0x31,0x19,0x17,0x21,0x40,0x00,//按20
//  236 
//  237 0x00,0x70,0xCE,0x50,0x48,0xE8,0x98,0xA8,0xA8,0xFE,0xA8,0xF8,0x20,0x00,
//  238 0x00,0x02,0x7F,0xB2,0x42,0x24,0x1E,0x29,0x4A,0x7F,0x4A,0x49,0x44,0x00,//键21
//  239 
//  240 0x00,0x00,0x04,0xF8,0x10,0xC0,0x30,0x2E,0xE0,0x20,0x20,0x20,0x10,0x00,
//  241 0x00,0x00,0x3F,0x80,0x41,0x20,0x10,0x0E,0x01,0x0E,0x10,0x60,0x40,0x00,//次22
//  242 
//  243 0x00,0x00,0xF0,0x90,0x90,0x90,0xFE,0x90,0x90,0x90,0xF0,0x10,0x00,0x00,
//  244 0x00,0x00,0x0F,0x04,0x04,0x04,0x7F,0x44,0x44,0x44,0x4F,0x50,0x60,0x00,//电23
//  245 
//  246 0x00,0x00,0xFC,0x04,0x04,0x04,0x04,0xFC,0x04,0x04,0x04,0x86,0x04,0x00,
//  247 0x00,0x20,0x5F,0x40,0x40,0x41,0x41,0x3F,0x41,0x43,0x4D,0x40,0x20,0x00,//压24
//  248 
//  249 0x00,0x00,0xF0,0x44,0xC4,0xC0,0x24,0xDC,0x34,0xB4,0x44,0xFC,0x04,0x00,
//  250 0x00,0x00,0x7F,0x13,0x14,0x2F,0x19,0x0B,0x0E,0x11,0x7C,0x7F,0x00,0x00,//阈25
//  251 
//  252 0x00,0x80,0xF0,0x0C,0x08,0xC8,0x48,0x28,0x5E,0x48,0xE8,0x08,0x08,0x00,
//  253 0x00,0x00,0x7F,0x00,0x00,0x6F,0x95,0x95,0x95,0x95,0x7F,0x80,0x40,0x00,//值26
//  254 
//  255 0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x40,0x40,0x40,0x40,0x40,0x00,0x00,
//  256 0x00,0x40,0x40,0x40,0x40,0x40,0x3F,0x40,0x40,0x40,0x40,0x40,0x20,0x00,//上27
//  257 
//  258 0x00,0x00,0x08,0x08,0x08,0x08,0xF8,0x48,0x88,0x88,0x08,0x04,0x04,0x00,
//  259 0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,//下28
//  260 
//  261 0x00,0x00,0x10,0x10,0xD0,0x3E,0x10,0x10,0x10,0x10,0x10,0x08,0x00,0x00,
//  262 0x00,0x10,0x08,0x46,0x41,0x41,0x41,0x7F,0x41,0x41,0x41,0x60,0x40,0x00,//左29
//  263 
//  264 0x00,0x10,0x10,0x10,0x90,0x70,0x0E,0x10,0x10,0x10,0x10,0x10,0x00,0x00,
//  265 0x00,0x08,0x04,0x02,0x3F,0x41,0x41,0x41,0x41,0x41,0x7F,0x01,0x00,0x00,//右30
//  266 
//  267 0x00,0x84,0x88,0x80,0x08,0xE8,0x28,0x28,0xFE,0x28,0x28,0xE8,0x08,0x00,
//  268 0x00,0x20,0x10,0x1F,0x30,0x49,0x45,0x43,0x7F,0x45,0x45,0x49,0x40,0x00,//速31
//  269 
//  270 0x00,0x00,0xF8,0x48,0x48,0xE8,0x58,0x46,0x48,0xF8,0x48,0x28,0x00,0x00,
//  271 0x40,0x38,0x87,0x80,0x80,0x44,0x4D,0x35,0x35,0x4D,0x42,0x40,0x40,0x00,//度32
//  272 
//  273 0x00,0x10,0x10,0x10,0x10,0x10,0xF2,0x9C,0x90,0x90,0x90,0x10,0x18,0x00,
//  274 0x00,0x00,0x40,0x30,0x08,0x07,0x40,0x40,0x40,0x78,0x07,0x00,0x00,0x00,//方33
//  275 
//  276 0x00,0x00,0xF0,0x10,0x90,0x8C,0x92,0x90,0x90,0x10,0x10,0xF8,0x00,0x00,
//  277 0x00,0x00,0x7F,0x00,0x07,0x08,0x08,0x08,0x0F,0x00,0x40,0x7F,0x00,0x00,//向34
//  278 
//  279 0x00,0x10,0x10,0xFE,0x90,0x30,0x90,0x50,0x0C,0x14,0x50,0xB0,0x18,0x00,
//  280 0x00,0x42,0x41,0x7F,0x00,0x01,0x42,0x42,0x3E,0x42,0x42,0x43,0x20,0x00,//控35
//  281 
//  282 0x00,0x00,0x40,0xF0,0x2C,0x2A,0x28,0xF8,0x28,0x20,0x20,0xE0,0x00,0x00,
//  283 0x00,0x40,0x20,0x1F,0x05,0x05,0x05,0x7F,0x05,0x45,0x45,0x7F,0x00,0x00,//角36
//  284 
//  285 0x00,0x20,0x20,0x20,0x20,0x20,0xFE,0xA2,0x20,0x20,0x20,0x20,0x20,0x00,
//  286 0x00,0x80,0x40,0x20,0x10,0x0C,0x03,0x03,0x04,0x08,0x30,0x60,0x40,0x00,//大37
//  287 
//  288 0x00,0x00,0x00,0x80,0x60,0x00,0x00,0xFE,0x00,0x40,0x80,0x00,0x00,0x00,
//  289 0x00,0x04,0x02,0x01,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x03,0x06,0x00,//小38
//  290 
//  291 0x00,0x08,0x08,0x08,0xE8,0xA8,0xA6,0xA8,0xA8,0xF8,0x08,0x08,0x04,0x00,
//  292 0x00,0x00,0x7F,0x02,0x2E,0x12,0x12,0x12,0x3E,0x42,0x42,0x7F,0x00,0x00,//高39
//  293 
//  294 0x00,0xC0,0xF0,0x0C,0x00,0xF8,0x88,0x88,0xF8,0x84,0x84,0x84,0x80,0x00,
//  295 0x00,0x00,0x7F,0x00,0x00,0x3F,0x20,0x30,0x51,0x0E,0x10,0x20,0x70,0x00,//低40
//  296 
//  297 0x40,0x40,0xC4,0x00,0x20,0x68,0xA8,0xA8,0x7E,0xA8,0x28,0x60,0x20,0x00,
//  298 0x00,0x00,0x3F,0x20,0x98,0x89,0x4A,0x29,0x18,0x27,0x28,0x48,0x00,0x00,//读41
//  299 
//  300 0x00,0x00,0x0E,0x8C,0x74,0x44,0x44,0x44,0x44,0x44,0x34,0x0C,0x04,0x00,
//  301 0x00,0x08,0x08,0x09,0x09,0x09,0x09,0x09,0x09,0x49,0x71,0x0F,0x00,0x00,//写42
//  302 
//  303 0x00,0x00,0x84,0xC8,0x00,0x00,0xFC,0xA4,0xA4,0xA4,0xFC,0x04,0x00,0x00,
//  304 0x00,0x20,0x10,0x1F,0x20,0x20,0x5F,0x4A,0x42,0x42,0x46,0x49,0x00,0x00,//退43
//  305 
//  306 0x00,0x00,0xF0,0x80,0x80,0x80,0xFC,0x80,0x80,0x80,0xF0,0x08,0x00,0x00,
//  307 0x00,0x00,0x7E,0x40,0x40,0x40,0x3F,0x40,0x40,0x40,0x43,0x7C,0x00,0x00,//出44
//  308 
//  309 0x00,0x00,0xFC,0xF4,0x0C,0x00,0xFC,0x24,0x24,0x24,0x24,0xFC,0x00,0x00,
//  310 0x00,0x00,0x7F,0x08,0x0F,0x00,0x7F,0x21,0x07,0x09,0x35,0x63,0x02,0x00,//限45
//  311 
//  312 0x00,0x60,0x58,0x50,0xFE,0x50,0x50,0x50,0x00,0xF8,0x00,0xFC,0x02,0x00,
//  313 0x00,0x1E,0x02,0x02,0x7F,0x12,0x3E,0x01,0x00,0x0F,0x40,0x7F,0x00,0x00,//制46
//  314 
//  315 0x00,0x10,0x60,0x00,0xFE,0x40,0x40,0x40,0xFE,0xC0,0x44,0x38,0x00,0x00,
//  316 0x00,0x0C,0x02,0x02,0x7F,0x40,0x30,0x0E,0x01,0x07,0x18,0x20,0x40,0x00,//状47
//  317 
//  318 0x00,0x10,0x10,0x10,0x90,0xF0,0x1E,0x30,0x50,0x90,0x10,0x08,0x00,0x00,
//  319 0x00,0x22,0x1A,0x01,0x7C,0x40,0x45,0x4A,0x40,0x70,0x01,0x1B,0x00,0x00,//态48
//  320 
//  321 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  322 0x00,0x00,0x33,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//：49
//  323 
//  324 0x00,0x00,0xF0,0x2E,0xA0,0x70,0x40,0x70,0x4C,0x42,0x40,0x50,0xE0,0x00,
//  325 0x00,0x43,0x24,0x18,0x0F,0x30,0x00,0x7E,0x42,0x42,0x42,0x7F,0x02,0x00,//始50
//  326 
//  327 0x00,0xE0,0x98,0x86,0x60,0x20,0x90,0x90,0x90,0xFE,0x90,0x90,0x10,0x00,
//  328 0x00,0x64,0x27,0x24,0x14,0x14,0x7C,0x44,0x44,0x44,0x44,0x7E,0x00,0x00,//结51
//  329 
//  330 0x00,0x08,0x08,0xE8,0x28,0x28,0xFE,0x2A,0x28,0x28,0xE8,0x28,0x08,0x00,
//  331 0x00,0x40,0x20,0x13,0x0A,0x06,0xFF,0x02,0x0E,0x12,0x33,0x20,0x20,0x00,//束52
//  332 
//  333 0x00,0x00,0x04,0xC4,0x44,0x04,0x04,0xFC,0x04,0x04,0x04,0x84,0x04,0x00,
//  334 0x00,0x40,0x40,0x3F,0x40,0x40,0x40,0x3F,0x41,0x41,0x41,0x20,0x00,0x00,//正53
//  335 
//  336 0x00,0x00,0x00,0xF8,0x48,0xC8,0x44,0x44,0x44,0x44,0xC2,0x40,0x00,0x00,
//  337 0x00,0x60,0x9C,0x83,0x40,0x21,0x22,0x14,0x18,0x36,0x21,0x40,0x40,0x00,//反54
//  338 
//  339 0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x20,0x20,0x20,0x20,0x10,0x00,0x00,
//  340 0x00,0x00,0x00,0x7F,0x42,0x42,0x41,0x42,0x42,0x42,0x7F,0x00,0x00,0x00,//占55
//  341 
//  342 0x00,0x20,0x98,0x90,0x50,0x30,0x12,0x14,0x10,0x30,0x70,0xD0,0x08,0x00,
//  343 0x00,0x41,0x40,0x40,0x42,0x42,0x7E,0x42,0x42,0x42,0x41,0x40,0x40,0x00,//空56
//  344 
//  345 0x00,0x00,0xFE,0x80,0x80,0x40,0x80,0xFE,0x80,0x40,0x20,0x10,0x00,0x00,
//  346 0x00,0x00,0x3F,0x20,0x20,0x10,0x10,0x3F,0x40,0x40,0x40,0x58,0x20,0x00,//比57
//  347 
//  348 0x00,0x20,0x10,0x08,0xF6,0x58,0x58,0x58,0x58,0x58,0xF8,0x04,0x00,0x00,
//  349 0x00,0x80,0x90,0x88,0x45,0x4F,0x35,0x15,0x3D,0x4F,0x45,0x40,0x40,0x00,//复58
//  350 
//  351 0x00,0x80,0x60,0xFC,0x22,0xA0,0x20,0x22,0x2C,0x20,0xE0,0x50,0x00,0x00,
//  352 0x00,0x01,0x00,0x7F,0x40,0x40,0x43,0x4C,0x20,0x5E,0x41,0x40,0x20,0x00,//位59
//  353 
//  354 0x00,0x00,0xF0,0x20,0x20,0x20,0xFE,0x22,0x20,0x20,0x20,0xF0,0x00,0x00,
//  355 0x00,0x00,0x03,0x02,0x02,0x02,0xFF,0x02,0x02,0x02,0x02,0x03,0x00,0x00,//中60
//  356 
//  357 0x00,0x00,0x20,0x20,0x22,0x2C,0xE0,0x10,0x28,0x26,0x20,0x10,0x00,0x00,
//  358 0x00,0x80,0x42,0x22,0x12,0x0A,0x07,0x02,0x0E,0x12,0x22,0x41,0x41,0x00,//关61
//  359 
//  360 0x00,0x00,0xF8,0x42,0x4C,0x40,0xC4,0xFC,0x44,0x44,0x44,0xFC,0x04,0x00,
//  361 0x00,0x00,0x7F,0x08,0x04,0x02,0x21,0x3F,0x00,0x00,0x40,0x7F,0x00,0x00,//闭62
//  362 
//  363 0x00,0x10,0x10,0xD2,0x2C,0x90,0x08,0x08,0xF8,0x08,0x08,0x08,0xF8,0x00,
//  364 0x00,0x02,0x01,0x7F,0x01,0x42,0x30,0x0E,0x01,0x00,0x40,0x7E,0x01,0x00,//初63
//  365 
//  366 0x00,0x80,0x40,0xF8,0x06,0x00,0x00,0xFE,0x00,0x80,0x60,0x10,0x00,0x00,
//  367 0x00,0x01,0x00,0x7F,0x08,0x04,0x04,0x3E,0x41,0x40,0x40,0x40,0x78,0x00,//化64
//  368 
//  369 0x00,0x40,0x42,0xCC,0x80,0x40,0xBC,0x84,0x84,0x84,0xBC,0xC0,0x20,0x00,
//  370 0x00,0x00,0x00,0xBF,0x98,0x48,0x41,0x26,0x18,0x3C,0x23,0x40,0x40,0x00,//设65
//  371 
//  372 0x00,0x00,0x5E,0xD4,0x54,0x5C,0xF4,0x54,0x5C,0x54,0xD4,0x3E,0x00,0x00,
//  373 0x40,0x40,0x40,0x7F,0x6B,0x6B,0x6A,0x6B,0x6B,0x6B,0x7F,0x40,0x40,0x00,//置66
//  374 
//  375 0x00,0x00,0xF8,0x2C,0x50,0xF8,0x20,0x18,0xC8,0x0E,0x08,0x98,0x08,0x00,
//  376 0x00,0x79,0x07,0x03,0x45,0x7F,0x00,0x00,0x7F,0x42,0x41,0x40,0x70,0x00,//舵67
//  377 
//  378 0x00,0x00,0xA0,0xFE,0xA0,0x00,0xF8,0x08,0x08,0x08,0xFC,0x00,0x00,0x00,
//  379 0x18,0x06,0x01,0x7F,0x40,0x21,0x1F,0x00,0x00,0x00,0x7F,0x40,0x70,0x00,//机68
//  380 
//  381 0x00,0x04,0x84,0x74,0x4C,0x44,0xE4,0x04,0xFC,0x04,0x84,0x44,0x04,0x00,
//  382 0x00,0x42,0x21,0x11,0x0A,0x07,0x00,0x00,0x3F,0x41,0x40,0x40,0x78,0x00,//死0
//  383 
//  384 0x00,0x00,0xFC,0x04,0x14,0x24,0x44,0x84,0xC4,0x34,0x14,0x06,0x04,0x00,
//  385 0x00,0x00,0x7F,0x40,0x48,0x44,0x42,0x41,0x43,0x46,0x48,0x40,0x40,0x00,//区1
//  386 
//  387 0x00,0x10,0xD0,0x50,0x52,0xCC,0x10,0x10,0xCC,0x12,0xD0,0x30,0x08,0x00,
//  388 0x00,0x00,0x7F,0x09,0x09,0x7F,0x00,0x00,0x1F,0x40,0x7F,0x00,0x00,0x00,//前0
//  389 
//  390 0x00,0xFC,0x48,0xF8,0x04,0xF0,0x28,0x66,0x28,0xD8,0x2C,0x60,0x90,0x00,
//  391 0x00,0x3F,0x12,0x3F,0x60,0x1F,0x01,0x73,0x5B,0x5A,0x5B,0x77,0x00,0x00,//瞻1
//  392 
//  393 0x00,0x38,0x44,0xC4,0x44,0x7C,0x00,0xFC,0x44,0x44,0x44,0xE4,0x04,0x00,
//  394 0x00,0x3F,0x22,0x1F,0x12,0x01,0x00,0x7F,0x44,0x44,0x44,0x47,0x20,0x00,//距0
//  395 
//  396 0x00,0x00,0x08,0xF8,0x88,0x58,0x2A,0x2C,0x58,0x08,0xF8,0x08,0x04,0x00,
//  397 0x00,0x00,0x7E,0x03,0x1A,0x17,0x13,0x13,0x0B,0x33,0x42,0x7E,0x00,0x00,//离1
//  398 
//  399 0x00,0x40,0x44,0xF4,0x4C,0xC4,0x44,0xE4,0x14,0xEC,0x24,0xE4,0x02,0x00,
//  400 0x00,0x00,0x00,0x7F,0x00,0x80,0x80,0x4F,0x20,0x1F,0x10,0x1F,0x60,0x00,//预0
//  401 
//  402 0x00,0x40,0x42,0xCC,0x80,0x40,0xBC,0x84,0x84,0x84,0xBC,0xC0,0x20,0x00,
//  403 0x00,0x00,0x00,0xBF,0x98,0x48,0x41,0x26,0x18,0x3C,0x23,0x40,0x40,0x00,//设1
//  404 
//  405 0x00,0x00,0xA0,0xFE,0xA0,0x60,0xA0,0x98,0x86,0x88,0x50,0x20,0x40,0x00,
//  406 0x00,0x06,0x01,0x7F,0x40,0x40,0x5C,0x40,0x4E,0x60,0x5E,0x41,0x40,0x00,//检0
//  407 
//  408 0x00,0x20,0x04,0xC0,0xFC,0x04,0xF4,0x04,0xFC,0x00,0xF0,0xFC,0x00,0x00,
//  409 0x00,0x00,0x7F,0x40,0x27,0x18,0x07,0x10,0x67,0x00,0x0F,0x7F,0x00,0x00,//测1
//  410 
//  411 0x00,0xC0,0x00,0xFE,0x20,0x18,0x08,0x08,0x08,0xF8,0x08,0x08,0x04,0x00,
//  412 0x00,0x60,0x18,0x07,0x08,0x10,0x00,0x00,0x40,0x7F,0x00,0x00,0x00,0x00,//灯0
//  413 
//  414 0x00,0x00,0xFE,0x80,0x80,0x40,0x80,0xFE,0x80,0x40,0x20,0x10,0x00,0x00,
//  415 0x00,0x00,0x3F,0x20,0x20,0x10,0x10,0x3F,0x40,0x40,0x40,0x58,0x20,0x00,//比0
//  416 
//  417 0x00,0x80,0xF8,0x06,0x88,0x78,0x48,0xC8,0x44,0xE0,0x10,0xFC,0x00,0x00,
//  418 0x00,0x00,0x7F,0x40,0x21,0x11,0x0E,0x03,0x00,0x07,0x40,0x7F,0x00,0x00,//例1
//  419 
//  420 0x00,0x08,0xC4,0x24,0xB8,0xA8,0xBE,0xB8,0xC0,0xF8,0x26,0xE0,0x10,0x00,
//  421 0x00,0x01,0x7F,0x00,0x30,0x0E,0x82,0x5E,0x49,0x23,0x1C,0x27,0x40,0x00,//微2
//  422 
//  423 0x00,0x00,0xC0,0xA0,0x98,0x84,0x80,0x80,0x8E,0xB0,0x40,0x80,0x80,0x00,
//  424 0x00,0x81,0x40,0x20,0x10,0x0F,0x00,0x40,0x40,0x3F,0x01,0x00,0x00,0x00,//分3
//  425 
//  426 0x00,0x00,0x48,0xFC,0x44,0x20,0x40,0xF8,0x08,0x08,0x08,0xF8,0x00,0x00,
//  427 0x00,0x04,0x03,0x7F,0x01,0x43,0x20,0x11,0x0D,0x01,0x05,0x19,0x60,0x00,//积0
//  428 
//  429 0x00,0x00,0x00,0x52,0x4C,0xD0,0x70,0x50,0x48,0x56,0x50,0x08,0x00,0x00,
//  430 0x00,0x21,0x11,0x49,0x47,0x49,0x49,0x79,0x49,0x49,0x45,0x41,0x41,0x00,//差 0
//  431 
//  432 0x00,0x08,0xE8,0x08,0xDE,0x2A,0x88,0x68,0x5E,0xC8,0x48,0x28,0x00,0x00,
//  433 0x00,0x40,0x43,0x7C,0x47,0x7C,0x45,0x7C,0x44,0x44,0x7F,0x40,0x40,0x00,//蓝0
//  434 
//  435 0x00,0x00,0x44,0x7C,0x44,0x44,0x44,0xC4,0xFC,0x44,0x44,0x46,0x44,0x00,
//  436 0x00,0x20,0x20,0x10,0x08,0x04,0x43,0x40,0x3F,0x00,0x00,0x00,0x00,0x00,//牙1
//  437 
//  438 0x00,0x00,0x84,0x84,0x84,0x84,0xFC,0x84,0x84,0x84,0x84,0x44,0x40,0x00,
//  439 0x00,0x80,0x40,0x20,0x10,0x0E,0x01,0x3F,0x40,0x40,0x40,0x40,0x78,0x00,//无2
//  440 
//  441 0x00,0x60,0x58,0xC6,0x60,0x30,0x20,0x2C,0xF2,0x24,0x2C,0x90,0x80,0x00,
//  442 0x00,0x24,0x27,0x24,0x14,0x43,0x41,0x21,0x1F,0x19,0x25,0x42,0x70,0x00,//线3
//  443 
//  444 0x00,0x00,0x00,0xFC,0x94,0x94,0x94,0x94,0x94,0x94,0xFC,0x00,0x00,0x00,
//  445 0x00,0x00,0x24,0x38,0x20,0x3F,0x20,0x20,0x3F,0x30,0x2D,0x22,0x00,0x00,//显0
//  446 
//  447 0x00,0x40,0x40,0x44,0x44,0x44,0xC4,0x44,0x44,0x44,0x44,0x44,0x40,0x00,
//  448 0x00,0x10,0x08,0x06,0x03,0x40,0x7F,0x00,0x00,0x02,0x04,0x18,0x10,0x00,//示1
//  449 
//  450 0x00,0x08,0x48,0x88,0x88,0x78,0x08,0x38,0xC8,0x08,0x88,0x78,0x00,0x00,
//  451 0x00,0x10,0x08,0x04,0x03,0x06,0x58,0x20,0x11,0x0E,0x1B,0x20,0x20,0x00,//双0
//  452 };
//  453 
//  454 //======================================================
//  455 // 128X64I液晶底层驱动[8X16]字体库
//  456 // 设计者: powerint
//  457 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  458 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  459 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  460 const byte F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  461 {
//  462 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  463   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  464   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  465   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  466   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  467   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  468   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  469   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  470   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  471   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  472   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  473   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  474   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  475   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  476   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  477   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  478   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  479   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  480   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  481   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  482   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  483   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  484   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  485   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  486   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  487   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  488   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  489   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  490   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  491   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  492   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  493   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  494   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  495   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  496   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  497   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  498   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  499   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  500   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  501   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  502   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  503   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  504   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  505   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  506   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  507   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  508   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  509   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  510   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  511   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  512   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  513   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  514   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  515   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  516   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  517   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  518   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  519   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  520   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  521   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  522   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  523   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  524   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  525   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  526   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  527   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  528   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  529   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  530   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  531   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  532   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  533   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  534   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  535   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  536   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  537   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  538   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  539   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  540   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  541   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  542   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  543   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  544   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  545   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  546   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  547   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
//  548   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  549   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  550   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  551   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  552   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  553   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  554   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  555   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  556   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  557 
//  558 };
//  559 //数据水平，字节垂直

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  560 byte longqiu96x64[768] = {
longqiu96x64:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 192
        DC8 192, 192, 96, 96, 96, 48, 48, 48, 56, 24, 24, 24, 24, 12, 12, 12
        DC8 12, 12, 14, 14, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14, 14
        DC8 12, 12, 12, 12, 12, 28, 24, 24, 24, 24, 48, 48, 48, 112, 96, 96
        DC8 224, 192, 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224, 112, 48, 56, 28, 12
        DC8 6, 7, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 0, 0, 0, 0, 0, 128, 128, 240, 248, 248, 240, 128, 0
        DC8 0, 128, 224, 240, 248, 252, 60, 28, 12, 12, 28, 252, 248, 240, 224
        DC8 128, 0, 0, 0, 192, 192, 193, 1, 3, 3, 7, 6, 14, 12, 24, 56, 112, 96
        DC8 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 192, 240, 120, 30, 7, 51, 49
        DC8 56, 120, 252, 254, 246, 192, 128, 0, 0, 0, 0, 192, 192, 128, 0, 248
        DC8 252, 222, 14, 15, 30, 190, 252, 240, 6, 255, 255, 255, 255, 3, 7
        DC8 255, 255, 254, 128, 30, 63, 255, 255, 249, 249, 255, 255, 127, 31
        DC8 14, 127, 255, 255, 255, 193, 128, 206, 206, 198, 192, 255, 255, 255
        DC8 255, 63, 128, 252, 252, 253, 125, 1, 192, 248, 248, 240, 112, 0
        DC8 192, 128, 128, 128, 0, 0, 1, 7, 14, 60, 248, 224, 128, 0, 0, 254
        DC8 255, 3, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 127, 254, 252, 240, 240
        DC8 240, 127, 127, 62, 16, 3, 3, 15, 31, 31, 15, 15, 3, 4, 7, 7, 7, 7
        DC8 6, 0, 7, 7, 7, 15, 30, 63, 127, 127, 127, 121, 115, 63, 63, 31, 14
        DC8 0, 1, 3, 3, 7, 7, 6, 14, 15, 15, 31, 63, 61, 8, 12, 31, 31, 31, 25
        DC8 60, 127, 127, 127, 243, 240, 252, 254, 63, 31, 7, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 207, 255, 112, 0, 3, 31, 126, 240, 192, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 3, 1, 1, 0, 0, 0, 0, 192, 192, 64, 64, 64, 64, 248, 120
        DC8 64, 192, 64, 88, 88, 64, 64, 64, 0, 0, 0, 0, 0, 128, 128, 128, 0, 0
        DC8 0, 0, 0, 0, 96, 240, 224, 32, 32, 32, 32, 48, 48, 56, 24, 16, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 224, 248, 63, 15, 0, 0, 0, 0, 0, 0, 3, 7, 14, 28, 56, 48, 96
        DC8 224, 192, 128, 0, 0, 0, 0, 0, 0, 0, 64, 96, 96, 112, 48, 24, 12, 7
        DC8 17, 8, 63, 125, 102, 231, 227, 192, 192, 192, 224, 96, 0, 0, 0, 3
        DC8 3, 3, 0, 0, 96, 96, 96, 96, 96, 127, 127, 97, 97, 97, 97, 127, 127
        DC8 97, 97, 225, 224, 224, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 192, 192, 224, 112, 56, 24, 12, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 6, 6, 12, 12, 24, 24, 56
        DC8 48, 48, 112, 96, 96, 224, 192, 192, 192, 192, 192, 128, 128, 128
        DC8 129, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128
        DC8 128, 128, 128, 128, 128, 128, 128, 192, 192, 192, 192, 192, 96, 96
        DC8 96, 48, 48, 48, 24, 24, 28, 12, 14, 6, 7, 3, 3, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1
        DC8 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  561 /* 
//  562   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  563   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0XC0,0XC0,0XC0,
//  564   0XC0,0XC0,0X60,0X60,0X60,0X60,0X60,0X70,0X70,0X70,0X30,0X30,0X30,0X30,0X30,0X30,
//  565   0X30,0X30,0X30,0X30,0X30,0X30,0X30,0X70,0X70,0X60,0X60,0X60,0X60,0X60,0XE0,0XC0,
//  566   0XC0,0XC0,0XC0,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  567   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  568   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0XC0,0XE0,0X60,0X30,
//  569   0X38,0X18,0X1C,0X0C,0X0E,0X06,0X06,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X00,0X00,
//  570   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  571   0X80,0XC0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0XE0,0XE0,0X60,0X60,
//  572   0XE0,0XE0,0XC0,0X81,0X01,0X01,0X03,0X03,0X03,0X07,0X06,0X0E,0X0C,0X1C,0X18,0X38,
//  573   0X30,0X70,0X60,0XC0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  574   0X00,0X00,0X00,0X80,0XC0,0XF0,0X38,0X9C,0X8E,0XC7,0XC3,0XE1,0XF1,0XB0,0X00,0X00,
//  575   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XE0,0XF0,0X70,0X78,0XF0,0XF0,0XE0,
//  576   0X80,0X30,0XF8,0XF8,0XF8,0XF8,0X1C,0X3C,0XFC,0XF8,0XF0,0X00,0XF0,0XF8,0XFC,0XFC,
//  577   0XCF,0XCF,0XFF,0XFF,0XFC,0XF8,0X70,0XFC,0XFF,0XFF,0XFF,0X0F,0X01,0X70,0X70,0X30,
//  578   0X00,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0XE0,0XE0,0XEE,0XEE,0X0E,0X00,0XC0,0XC0,0X80,
//  579   0X80,0X00,0X00,0X00,0X01,0X03,0X03,0X06,0X0C,0X3C,0X70,0XE0,0XC0,0X00,0X00,0X00,
//  580   0X00,0XF0,0XFE,0X1F,0X03,0X00,0X00,0X01,0X01,0X01,0X03,0X0F,0X1F,0X7F,0XFE,0XFC,
//  581   0XF0,0XE0,0X80,0X80,0X86,0XFE,0XFC,0XF0,0X87,0X1F,0X1E,0X78,0XF8,0XF8,0X7D,0X7F,
//  582   0X1F,0X20,0X3F,0X3F,0X3F,0X3F,0X30,0X00,0X3F,0X3F,0X3F,0X7C,0XF0,0XF9,0XFF,0XFF,
//  583   0XFF,0XCF,0X9F,0XFF,0XFB,0XF8,0X70,0X03,0X0F,0X1F,0X1F,0X3E,0X3C,0X36,0X76,0X7E,
//  584   0X7E,0XFF,0XFF,0XEF,0X47,0X61,0XFC,0XFF,0XFF,0XCF,0XE3,0XF8,0XFE,0XFF,0X9F,0X87,
//  585   0XE3,0XF0,0XFE,0XFC,0X3C,0X0C,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X7F,0XFC,0X80,
//  586   0X00,0X1F,0XFF,0XF0,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,
//  587   0X1F,0X1F,0X0F,0X0F,0X07,0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XC0,
//  588   0X00,0X00,0X00,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X03,
//  589   0X03,0X03,0X03,0X01,0X01,0X00,0X00,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0XC0,
//  590   0XC0,0X80,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X03,0X03,0X07,0X0F,
//  591   0X0F,0X0F,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XFE,0X7F,0X03,
//  592   0X00,0X00,0X00,0X03,0X07,0X1E,0X38,0X70,0XE0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,
//  593   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X86,0X82,0XC2,0X62,0X3A,0X8F,0X43,
//  594   0XFA,0XEE,0X32,0X3A,0X1A,0X02,0X02,0X02,0X00,0X00,0X00,0X00,0X00,0X1C,0X1C,0X1C,
//  595   0X00,0X00,0X00,0X00,0X00,0X00,0X03,0XFF,0XFF,0X09,0X09,0X09,0X09,0XF9,0XF9,0X09,
//  596   0X08,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  597   0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XC0,0X60,0X38,0X1C,0X0F,0X07,0X01,0X00,0X00,
//  598   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,0X07,0X0E,0X0C,0X18,
//  599   0X18,0X30,0X30,0X60,0X60,0XC0,0XC2,0XC3,0X83,0X83,0X81,0X00,0X00,0X00,0X00,0X00,
//  600   0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X06,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,
//  601   0X00,0X00,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
//  602   0X03,0X07,0X07,0X07,0X06,0X06,0X80,0X80,0X80,0XC0,0XC0,0XE0,0X60,0X70,0X30,0X38,
//  603   0X18,0X1C,0X0E,0X06,0X07,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  604   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  605   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X01,0X03,0X03,0X03,0X07,0X06,0X06,
//  606   0X06,0X06,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X1C,0X1C,0X18,0X18,0X18,0X18,
//  607   0X18,0X18,0X18,0X18,0X1C,0X1C,0X1C,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X06,0X06,
//  608   0X06,0X06,0X06,0X03,0X03,0X03,0X01,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  609   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  610 */
//  611 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  612 0X00,0X00,0X80,0X80,0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X38,0X18,0X18,
//  613 0X18,0X18,0X0C,0X0C,0X0C,0X0C,0X0C,0X0E,0X0E,0X0E,0X06,0X06,0X06,0X06,0X06,0X06,
//  614 0X06,0X06,0X06,0X06,0X06,0X06,0X06,0X0E,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X18,
//  615 0X18,0X18,0X18,0X30,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,0X80,0X80,0X00,0X00,
//  616 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  617 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0X70,0X30,0X38,0X1C,0X0C,0X06,
//  618 0X07,0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  619 0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,
//  620 0XF0,0XF8,0XF8,0XF0,0X80,0X00,0X00,0X80,0XE0,0XF0,0XF8,0XFC,0X3C,0X1C,0X0C,0X0C,
//  621 0X1C,0XFC,0XF8,0XF0,0XE0,0X80,0X00,0X00,0X00,0XC0,0XC0,0XC1,0X01,0X03,0X03,0X07,
//  622 0X06,0X0E,0X0C,0X18,0X38,0X70,0X60,0XC0,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,
//  623 0X00,0X00,0XC0,0XF0,0X78,0X1E,0X07,0X33,0X31,0X38,0X78,0XFC,0XFE,0XF6,0XC0,0X80,
//  624 0X00,0X00,0X00,0X00,0XC0,0XC0,0X80,0X00,0XF8,0XFC,0XDE,0X0E,0X0F,0X1E,0XBE,0XFC,
//  625 0XF0,0X06,0XFF,0XFF,0XFF,0XFF,0X03,0X07,0XFF,0XFF,0XFE,0X80,0X1E,0X3F,0XFF,0XFF,
//  626 0XF9,0XF9,0XFF,0XFF,0X7F,0X1F,0X0E,0X7F,0XFF,0XFF,0XFF,0XC1,0X80,0XCE,0XCE,0XC6,
//  627 0XC0,0XFF,0XFF,0XFF,0XFF,0X3F,0X80,0XFC,0XFC,0XFD,0X7D,0X01,0XC0,0XF8,0XF8,0XF0,
//  628 0X70,0X00,0XC0,0X80,0X80,0X80,0X00,0X00,0X01,0X07,0X0E,0X3C,0XF8,0XE0,0X80,0X00,
//  629 0X00,0XFE,0XFF,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X7F,
//  630 0XFE,0XFC,0XF0,0XF0,0XF0,0X7F,0X7F,0X3E,0X10,0X03,0X03,0X0F,0X1F,0X1F,0X0F,0X0F,
//  631 0X03,0X04,0X07,0X07,0X07,0X07,0X06,0X00,0X07,0X07,0X07,0X0F,0X1E,0X3F,0X7F,0X7F,
//  632 0X7F,0X79,0X73,0X3F,0X3F,0X1F,0X0E,0X00,0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X0F,
//  633 0X0F,0X1F,0X3F,0X3D,0X08,0X0C,0X1F,0X1F,0X1F,0X19,0X3C,0X7F,0X7F,0X7F,0XF3,0XF0,
//  634 0XFC,0XFE,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XCF,0XFF,0X70,
//  635 0X00,0X03,0X1F,0X7E,0XF0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  636 0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0XC0,0XC0,0X40,0X40,0X40,0X40,0XF8,0X78,
//  637 0X40,0XC0,0X40,0X58,0X58,0X40,0X40,0X40,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,
//  638 0X00,0X00,0X00,0X00,0X00,0X00,0X60,0XF0,0XE0,0X20,0X20,0X20,0X20,0X30,0X30,0X38,
//  639 0X18,0X10,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
//  640 0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XE0,0XF8,0X3F,0X0F,0X00,
//  641 0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0E,0X1C,0X38,0X30,0X60,0XE0,0XC0,0X80,0X00,
//  642 0X00,0X00,0X00,0X00,0X00,0X00,0X40,0X60,0X60,0X70,0X30,0X18,0X0C,0X07,0X11,0X08,
//  643 0X3F,0X7D,0X66,0XE7,0XE3,0XC0,0XC0,0XC0,0XE0,0X60,0X00,0X00,0X00,0X03,0X03,0X03,
//  644 0X00,0X00,0X60,0X60,0X60,0X60,0X60,0X7F,0X7F,0X61,0X61,0X61,0X61,0X7F,0X7F,0X61,
//  645 0X61,0XE1,0XE0,0XE0,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  646 0X00,0X80,0XC0,0XC0,0XE0,0X70,0X38,0X18,0X0C,0X07,0X03,0X01,0X00,0X00,0X00,0X00,
//  647 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,
//  648 0X03,0X06,0X06,0X0C,0X0C,0X18,0X18,0X38,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,
//  649 0XC0,0XC0,0XC0,0X80,0X80,0X80,0X81,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,
//  650 0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0XC0,0XC0,
//  651 0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X18,0X18,0X1C,0X0C,0X0E,0X06,0X07,
//  652 0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  653 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  654 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  655 0X00,0X00,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
//  656 0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X00,0X00,
//  657 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  658 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  659 
//  660 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  661 byte LIBLOGO60x58[480] = { 
LIBLOGO60x58:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192
        DC8 224, 248, 252, 254, 127, 63, 15, 15, 7, 7, 7, 135, 199, 199, 199
        DC8 231, 239, 255, 255, 255, 239, 231, 231, 231, 231, 231, 239, 255
        DC8 255, 255, 239, 231, 231, 231, 231, 231, 247, 7, 15, 63, 127, 255
        DC8 254, 252, 240, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 220, 223
        DC8 223, 223, 223, 215, 1, 0, 0, 0, 0, 0, 0, 62, 127, 255, 255, 227
        DC8 225, 225, 255, 255, 255, 224, 224, 224, 224, 224, 224, 224, 255
        DC8 255, 255, 224, 224, 224, 224, 193, 131, 7, 0, 0, 0, 0, 1, 215, 223
        DC8 223, 223, 223, 220, 216, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 63, 255
        DC8 255, 254, 248, 240, 224, 192, 128, 0, 0, 248, 240, 224, 192, 192
        DC8 192, 255, 255, 255, 192, 192, 192, 192, 192, 192, 192, 255, 255
        DC8 255, 192, 224, 225, 243, 255, 127, 63, 0, 192, 224, 248, 254, 255
        DC8 255, 255, 63, 31, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 7, 15, 63, 127, 255, 254, 252, 249, 243, 193, 129, 1, 1, 255, 255
        DC8 255, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 3, 1, 129, 192, 240, 252
        DC8 254, 255, 255, 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 63, 127, 255
        DC8 255, 255, 251, 243, 227, 195, 3, 3, 3, 3, 3, 131, 195, 243, 243
        DC8 251, 255, 255, 255, 127, 63, 15, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 7, 7, 31, 63, 127, 255, 254, 252, 252, 254, 255, 255
        DC8 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 15, 7, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  662   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  663   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  664   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  665   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  666   0X00,0X00,0XC0,0XE0,0XF8,0XFC,0XFE,0X7F,0X3F,0X0F,0X0F,0X07,0X07,0X07,0X87,0XC7,
//  667   0XC7,0XC7,0XE7,0XEF,0XFF,0XFF,0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XEF,0XFF,0XFF,
//  668   0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XF7,0X07,0X0F,0X3F,0X7F,0XFF,0XFE,0XFC,0XF0,
//  669   0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XD8,0XDC,0XDF,0XDF,0XDF,
//  670   0XDF,0XD7,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X7F,0XFF,0XFF,0XE3,0XE1,0XE1,
//  671   0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,
//  672   0XE0,0XC1,0X83,0X07,0X00,0X00,0X00,0X00,0X01,0XD7,0XDF,0XDF,0XDF,0XDF,0XDC,0XD8,
//  673   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X3F,0XFF,0XFF,0XFE,0XF8,
//  674   0XF0,0XE0,0XC0,0X80,0X00,0X00,0XF8,0XF0,0XE0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,
//  675   0XC0,0XC0,0XC0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,0XE0,0XE1,0XF3,0XFF,0X7F,0X3F,
//  676   0X00,0XC0,0XE0,0XF8,0XFE,0XFF,0XFF,0XFF,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,
//  677   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X0F,0X3F,0X7F,0XFF,
//  678   0XFE,0XFC,0XF9,0XF3,0XC1,0X81,0X01,0X01,0XFF,0XFF,0XFF,0X01,0X01,0X01,0X01,0X01,
//  679   0X01,0X01,0XFF,0XFF,0XFF,0X03,0X01,0X81,0XC0,0XF0,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,
//  680   0X0F,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  681   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0F,0X3F,
//  682   0X7F,0XFF,0XFF,0XFF,0XFB,0XF3,0XE3,0XC3,0X03,0X03,0X03,0X03,0X03,0X83,0XC3,0XF3,
//  683   0XF3,0XFB,0XFF,0XFF,0XFF,0X7F,0X3F,0X0F,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,
//  684   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  685   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,
//  686   0X07,0X1F,0X3F,0X7F,0XFF,0XFE,0XFC,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,0X0F,0X07,0X03,
//  687   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  688   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  689   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  690   0X00,0X03,0X07,0X0F,0X0F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  691   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  692 }; 
//  693 
//  694 
//  695 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  696  unsigned char str1[6];
str1:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  697  unsigned char str2[6];
str2:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  698  unsigned char str3[8];
str3:
        DS8 8
//  699 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  700  unsigned char str4[6];
str4:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  701  unsigned char str5[6];
str5:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  702  unsigned char str6[8];
str6:
        DS8 8
//  703 
//  704 
//  705 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  706 void LCD_WrDat(byte data)    //数据逐位发送
//  707 {
//  708 	byte i=8;
LCD_WrDat:
        MOVS     R1,#+8
//  709 	//LCD_CS=0;;
//  710 	LCD_DC=1;    //DC为1，表示数据发送
        MOVS     R2,#+1
        LDR.W    R3,??DataTable13_2  ;; 0x43fe102c
        STR      R2,[R3, #+0]
//  711   LCD_SCL=0;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1040
        STR      R2,[R3, #+0]
        B.N      ??LCD_WrDat_0
//  712   //asm("nop");    
//  713   while(i--)
//  714   {
//  715     if(data&0x80){LCD_SDA=1;}
//  716     else{LCD_SDA=0;}
??LCD_WrDat_1:
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_4  ;; 0x43fe103c
        STR      R2,[R3, #+0]
//  717     LCD_SCL=1; 
??LCD_WrDat_2:
        MOVS     R2,#+1
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1040
        STR      R2,[R3, #+0]
//  718     asm("nop");
        nop
//  719 		//asm("nop");            
//  720     LCD_SCL=0;;    
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1040
        STR      R2,[R3, #+0]
//  721     data<<=1;    
        LSLS     R0,R0,#+1
??LCD_WrDat_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??LCD_WrDat_3
        LSLS     R2,R0,#+24
        BPL.N    ??LCD_WrDat_1
        MOVS     R2,#+1
        LDR.W    R3,??DataTable13_4  ;; 0x43fe103c
        STR      R2,[R3, #+0]
        B.N      ??LCD_WrDat_2
//  722   }
//  723 	//LCD_CS=1;
//  724 }
??LCD_WrDat_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  725 void LCD_WrCmd(byte cmd)   //命令逐位发送
//  726 {
//  727 	byte i=8;
LCD_WrCmd:
        MOVS     R1,#+8
//  728 	
//  729 	//LCD_CS=0;;
//  730 	LCD_DC=0;;    //DC为0表示命令发送
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_2  ;; 0x43fe102c
        STR      R2,[R3, #+0]
//  731   LCD_SCL=0;;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1040
        STR      R2,[R3, #+0]
        B.N      ??LCD_WrCmd_0
//  732   //asm("nop");   
//  733   while(i--)
//  734   {
//  735     if(cmd&0x80){LCD_SDA=1;}
//  736     else{LCD_SDA=0;;}
??LCD_WrCmd_1:
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_4  ;; 0x43fe103c
        STR      R2,[R3, #+0]
//  737     LCD_SCL=1;;
??LCD_WrCmd_2:
        MOVS     R2,#+1
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1040
        STR      R2,[R3, #+0]
//  738     asm("nop");;
        nop
//  739 		//asm("nop");             
//  740     LCD_SCL=0;;    
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1040
        STR      R2,[R3, #+0]
//  741     cmd<<=1;;   
        LSLS     R0,R0,#+1
??LCD_WrCmd_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??LCD_WrCmd_3
        LSLS     R2,R0,#+24
        BPL.N    ??LCD_WrCmd_1
        MOVS     R2,#+1
        LDR.W    R3,??DataTable13_4  ;; 0x43fe103c
        STR      R2,[R3, #+0]
        B.N      ??LCD_WrCmd_2
//  742   } 	
//  743 	//LCD_CS=1;
//  744 }
??LCD_WrCmd_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  745 void LCD_Set_Pos(byte x, byte y)    //设置位置
//  746 { 
LCD_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  747   LCD_WrCmd(0xb0+y);       //表示从第y页开始
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  748   LCD_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  749   LCD_WrCmd((x&0x0f)|0x01); 
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  750 }
        POP      {R4,PC}          ;; return
//  751 //************************************************

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  752 void LCD_Fill_Line(byte line,byte bmp_data)   //自加填充整行亮或暗
//  753 {
LCD_Fill_Line:
        PUSH     {R3-R5,LR}
        MOVS     R4,R1
//  754   LCD_WrCmd(0xb0+line);
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  755   LCD_WrCmd(0x01);
        MOVS     R0,#+1
        BL       LCD_WrCmd
//  756   LCD_WrCmd(0x10);
        MOVS     R0,#+16
        BL       LCD_WrCmd
//  757   for(byte x=0;x<X_WIDTH;x++)
        MOVS     R5,#+0
        B.N      ??LCD_Fill_Line_0
//  758     LCD_WrDat(bmp_data);
??LCD_Fill_Line_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R5,R5,#+1
??LCD_Fill_Line_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BLT.N    ??LCD_Fill_Line_1
//  759 }
        POP      {R0,R4,R5,PC}    ;; return
//  760 //************************************************

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  761 void LCD_Fill(byte bmp_data)     //填充整个屏幕白或黑
//  762 {
LCD_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  763 	byte y,x;
//  764 	
//  765 	for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??LCD_Fill_0
//  766 	{
//  767 		LCD_WrCmd(0xb0+y);
//  768 		LCD_WrCmd(0x01);
//  769 		LCD_WrCmd(0x10);
//  770 		for(x=0;x<X_WIDTH;x++)
//  771 			LCD_WrDat(bmp_data);
??LCD_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R6,R6,#+1
??LCD_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BLT.N    ??LCD_Fill_1
        ADDS     R5,R5,#+1
??LCD_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??LCD_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R6,#+0
        B.N      ??LCD_Fill_2
//  772 	}
//  773 }
??LCD_Fill_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  774 void LCD_CLS(void)     //清屏
//  775 {
LCD_CLS:
        PUSH     {R3-R5,LR}
//  776 	byte y,x;	
//  777 	for(y=0;y<8;y++)
        MOVS     R4,#+0
        B.N      ??LCD_CLS_0
//  778 	{
//  779 		LCD_WrCmd(0xb0+y);
//  780 		LCD_WrCmd(0x01);
//  781 		LCD_WrCmd(0x10); 
//  782 		for(x=0;x<X_WIDTH;x++)
//  783 			LCD_WrDat(0);
??LCD_CLS_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R5,R5,#+1
??LCD_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BLT.N    ??LCD_CLS_1
        ADDS     R4,R4,#+1
??LCD_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??LCD_CLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R5,#+0
        B.N      ??LCD_CLS_2
//  784 	}
//  785 }
??LCD_CLS_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  786 void LCD_DLY_ms(word ms)
//  787 {                         
LCD_DLY_ms:
        B.N      ??LCD_DLY_ms_0
//  788   word a;
//  789   while(ms)
//  790   {
//  791     a=1335;
??LCD_DLY_ms_1:
        MOVW     R1,#+1335
//  792     while(a--);
??LCD_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        CMP      R2,#+0
        BNE.N    ??LCD_DLY_ms_2
//  793     ms--;
        SUBS     R0,R0,#+1
//  794   }
??LCD_DLY_ms_0:
        CMP      R0,#+0
        BNE.N    ??LCD_DLY_ms_1
//  795   return;
        BX       LR               ;; return
//  796 }

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  797 void adjust(byte a)
//  798 {
adjust:
        PUSH     {R7,LR}
//  799   LCD_WrCmd(a);	//指令数据0x0000~0x003f  
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  800 }
        POP      {R0,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  801 void SetStartColumn(unsigned char d)
//  802 {
SetStartColumn:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  803 	LCD_WrCmd(0x00+d%16);		// Set Lower Column Start Address for Page Addressing Mode
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R1,#+16
        SDIV     R0,R4,R1
        MLS      R0,R0,R1,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  804 						//   Default => 0x00
//  805 	LCD_WrCmd(0x10+d/16);		// Set Higher Column Start Address for Page Addressing Mode
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+16
        SDIV     R0,R4,R0
        ADDS     R0,R0,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  806 						//   Default => 0x10
//  807 }
        POP      {R4,PC}          ;; return
//  808 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  809 void SetAddressingMode(unsigned char d)
//  810 {
SetAddressingMode:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  811 	LCD_WrCmd(0x20);			// Set Memory Addressing Mode
        MOVS     R0,#+32
        BL       LCD_WrCmd
//  812 	LCD_WrCmd(d);			//   Default => 0x02
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  813 						//     0x00 => Horizontal Addressing Mode
//  814 						//     0x01 => Vertical Addressing Mode
//  815 						//     0x02 => Page Addressing Mode
//  816 }
        POP      {R4,PC}          ;; return
//  817 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  818 void SetColumnAddress(unsigned char a, unsigned char b)
//  819 {
SetColumnAddress:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  820 	LCD_WrCmd(0x21);			// Set Column Address
        MOVS     R0,#+33
        BL       LCD_WrCmd
//  821 	LCD_WrCmd(a);			//   Default => 0x00 (Column Start Address)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  822 	LCD_WrCmd(b);			//   Default => 0x7F (Column End Address)
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  823 }
        POP      {R0,R4,R5,PC}    ;; return
//  824 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  825 void SetPageAddress(unsigned char a, unsigned char b)
//  826 {
SetPageAddress:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  827 	LCD_WrCmd(0x22);			// Set Page Address
        MOVS     R0,#+34
        BL       LCD_WrCmd
//  828 	LCD_WrCmd(a);			//   Default => 0x00 (Page Start Address)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  829 	LCD_WrCmd(b);			//   Default => 0x07 (Page End Address)
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  830 }
        POP      {R0,R4,R5,PC}    ;; return
//  831 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  832 void SetStartLine(unsigned char d)
//  833 {
SetStartLine:
        PUSH     {R7,LR}
//  834 	LCD_WrCmd(0x40|d);			// Set Display Start Line
        ORRS     R0,R0,#0x40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  835 						//   Default => 0x40 (0x00)
//  836 }
        POP      {R0,PC}          ;; return
//  837 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  838 void SetContrastControl(unsigned char d)
//  839 {
SetContrastControl:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  840 	LCD_WrCmd(0x81);			// Set Contrast Control
        MOVS     R0,#+129
        BL       LCD_WrCmd
//  841 	LCD_WrCmd(d);			//   Default => 0x7F
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  842 }
        POP      {R4,PC}          ;; return
//  843 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  844 void Set_Charge_Pump(unsigned char d)
//  845 {
Set_Charge_Pump:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  846 	LCD_WrCmd(0x8D);			// Set Charge Pump
        MOVS     R0,#+141
        BL       LCD_WrCmd
//  847 	LCD_WrCmd(0x10|d);			//   Default => 0x10
        ORRS     R0,R4,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  848 						//     0x10 (0x00) => Disable Charge Pump
//  849 						//     0x14 (0x04) => Enable Charge Pump
//  850 }
        POP      {R4,PC}          ;; return
//  851 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  852 void Set_Segment_Remap(unsigned char d)
//  853 {
Set_Segment_Remap:
        PUSH     {R7,LR}
//  854 	LCD_WrCmd(0xA0|d);			// Set Segment Re-Map
        ORRS     R0,R0,#0xA0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  855 						//   Default => 0xA0
//  856 						//     0xA0 (0x00) => Column Address 0 Mapped to SEG0
//  857 						//     0xA1 (0x01) => Column Address 0 Mapped to SEG127
//  858 }
        POP      {R0,PC}          ;; return
//  859 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  860 void Set_Entire_Display(unsigned char d)
//  861 {
Set_Entire_Display:
        PUSH     {R7,LR}
//  862 	LCD_WrCmd(0xA4|d);			// Set Entire Display On / Off
        ORRS     R0,R0,#0xA4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  863 						//   Default => 0xA4
//  864 						//     0xA4 (0x00) => Normal Display
//  865 						//     0xA5 (0x01) => Entire Display On
//  866 }
        POP      {R0,PC}          ;; return
//  867 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  868 void Set_Inverse_Display(unsigned char d)
//  869 {
Set_Inverse_Display:
        PUSH     {R7,LR}
//  870 	LCD_WrCmd(0xA6|d);			// Set Inverse Display On/Off
        ORRS     R0,R0,#0xA6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  871 						//   Default => 0xA6
//  872 						//     0xA6 (0x00) => Normal Display
//  873 						//     0xA7 (0x01) => Inverse Display On
//  874 }
        POP      {R0,PC}          ;; return
//  875 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  876 void Set_Multiplex_Ratio(unsigned char d)
//  877 {
Set_Multiplex_Ratio:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  878 	LCD_WrCmd(0xA8);			// Set Multiplex Ratio
        MOVS     R0,#+168
        BL       LCD_WrCmd
//  879 	LCD_WrCmd(d);			//   Default => 0x3F (1/64 Duty)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  880 }
        POP      {R4,PC}          ;; return
//  881 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  882 void Set_Display_On_Off(unsigned char d)
//  883 {
Set_Display_On_Off:
        PUSH     {R7,LR}
//  884 	LCD_WrCmd(0xAE|d);			// Set Display On/Off
        ORRS     R0,R0,#0xAE
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  885 						//   Default => 0xAE
//  886 						//     0xAE (0x00) => Display Off
//  887 						//     0xAF (0x01) => Display On
//  888 }
        POP      {R0,PC}          ;; return
//  889 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  890 void SetStartPage(unsigned char d)
//  891 {
SetStartPage:
        PUSH     {R7,LR}
//  892 	LCD_WrCmd(0xB0|d);			// Set Page Start Address for Page Addressing Mode
        ORRS     R0,R0,#0xB0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  893 						//   Default => 0xB0 (0x00)
//  894 }
        POP      {R0,PC}          ;; return
//  895 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  896 void Set_Common_Remap(unsigned char d)
//  897 {
Set_Common_Remap:
        PUSH     {R7,LR}
//  898 	LCD_WrCmd(0xC0|d);			// Set COM Output Scan Direction
        ORRS     R0,R0,#0xC0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  899 						//   Default => 0xC0
//  900 						//     0xC0 (0x00) => Scan from COM0 to 63
//  901 						//     0xC8 (0x08) => Scan from COM63 to 0
//  902 }
        POP      {R0,PC}          ;; return
//  903 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  904 void Set_Display_Offset(unsigned char d)
//  905 {
Set_Display_Offset:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  906 	LCD_WrCmd(0xD3);			// Set Display Offset
        MOVS     R0,#+211
        BL       LCD_WrCmd
//  907 	LCD_WrCmd(d);			//   Default => 0x00
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  908 }
        POP      {R4,PC}          ;; return
//  909 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  910 void Set_Display_Clock(unsigned char d)
//  911 {
Set_Display_Clock:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  912 	LCD_WrCmd(0xD5);			// Set Display Clock Divide Ratio / Oscillator Frequency
        MOVS     R0,#+213
        BL       LCD_WrCmd
//  913 	LCD_WrCmd(d);			//   Default => 0x80
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  914 						//     D[3:0] => Display Clock Divider
//  915 						//     D[7:4] => Oscillator Frequency
//  916 }
        POP      {R4,PC}          ;; return
//  917 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  918 void Set_Precharge_Period(unsigned char d)
//  919 {
Set_Precharge_Period:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  920 	LCD_WrCmd(0xD9);			// Set Pre-Charge Period
        MOVS     R0,#+217
        BL       LCD_WrCmd
//  921 	LCD_WrCmd(d);			//   Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  922 						//     D[3:0] => Phase 1 Period in 1~15 Display Clocks
//  923 						//     D[7:4] => Phase 2 Period in 1~15 Display Clocks
//  924 }
        POP      {R4,PC}          ;; return
//  925 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  926 void Set_Common_Config(unsigned char d)
//  927 {
Set_Common_Config:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  928 	LCD_WrCmd(0xDA);			// Set COM Pins Hardware Configuration
        MOVS     R0,#+218
        BL       LCD_WrCmd
//  929 	LCD_WrCmd(0x02|d);			//   Default => 0x12 (0x10)
        ORRS     R0,R4,#0x2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  930 						//     Alternative COM Pin Configuration
//  931 						//     Disable COM Left/Right Re-Map
//  932 }
        POP      {R4,PC}          ;; return
//  933 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  934 void Set_VCOMH(unsigned char d)
//  935 {
Set_VCOMH:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  936 	LCD_WrCmd(0xDB);			// Set VCOMH Deselect Level
        MOVS     R0,#+219
        BL       LCD_WrCmd
//  937 	LCD_WrCmd(d);			//   Default => 0x20 (0.77*VCC)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  938 }
        POP      {R4,PC}          ;; return
//  939 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  940 void Set_NOP(void)
//  941 {
Set_NOP:
        PUSH     {R7,LR}
//  942 	LCD_WrCmd(0xE3);			// Command for No Operation
        MOVS     R0,#+227
        BL       LCD_WrCmd
//  943 }
        POP      {R0,PC}          ;; return
//  944 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  945 void LCD_Init(void)        
//  946 {
LCD_Init:
        PUSH     {R7,LR}
//  947   init_gpio_OLED();
        BL       init_gpio_OLED
//  948 
//  949   LCD_SCL=1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable13_3  ;; 0x43fe1040
        STR      R0,[R1, #+0]
//  950   //LCD_CS=1;	//预制SLK和SS为高电平   	
//  951   LCD_RST=0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable19  ;; 0x43fe1034
        STR      R0,[R1, #+0]
//  952   LCD_DLY_ms(50);
        MOVS     R0,#+50
        BL       LCD_DLY_ms
//  953   LCD_RST=1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable19  ;; 0x43fe1034
        STR      R0,[R1, #+0]
//  954 	
//  955   //从上电到下面开始初始化要有足够的时间，即等待RC复位完毕
//  956   Set_Display_On_Off(0x00);		  // Display Off (0x00/0x01)
        MOVS     R0,#+0
        BL       Set_Display_On_Off
//  957   Set_Display_Clock(0x80);		  // Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       Set_Display_Clock
//  958   Set_Multiplex_Ratio(0x3F);		// 1/64 Duty (0x0F~0x3F)
        MOVS     R0,#+63
        BL       Set_Multiplex_Ratio
//  959   Set_Display_Offset(0x00);		  // Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+0
        BL       Set_Display_Offset
//  960   SetStartLine(0x00);			      // Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+0
        BL       SetStartLine
//  961   Set_Charge_Pump(0x04);		    // Enable Embedded DC/DC Converter (0x00/0x04)
        MOVS     R0,#+4
        BL       Set_Charge_Pump
//  962   SetAddressingMode(0x02);		  // Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+2
        BL       SetAddressingMode
//  963   Set_Segment_Remap(0x01);		  // Set SEG/Column Mapping     0x00左右反置 0x01正常
        MOVS     R0,#+1
        BL       Set_Segment_Remap
//  964   Set_Common_Remap(0x08);			  // Set COM/Row Scan Direction 0x00上下反置 0x08正常
        MOVS     R0,#+8
        BL       Set_Common_Remap
//  965   Set_Common_Config(0x10);		  // Set Sequential Configuration (0x00/0x10)
        MOVS     R0,#+16
        BL       Set_Common_Config
//  966   SetContrastControl(Brightness);	// Set SEG Output Current
        MOVS     R0,#+207
        BL       SetContrastControl
//  967   Set_Precharge_Period(0xF1);		// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       Set_Precharge_Period
//  968   Set_VCOMH(0x40);			        // Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       Set_VCOMH
//  969   Set_Entire_Display(0x00);		  // Disable Entire Display On (0x00/0x01)
        MOVS     R0,#+0
        BL       Set_Entire_Display
//  970   Set_Inverse_Display(0x00);		// Disable Inverse Display On (0x00/0x01)  
        MOVS     R0,#+0
        BL       Set_Inverse_Display
//  971   Set_Display_On_Off(0x01);		  // Display On (0x00/0x01)
        MOVS     R0,#+1
        BL       Set_Display_On_Off
//  972   LCD_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       LCD_Fill
//  973   LCD_Set_Pos(0,0);  
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       LCD_Set_Pos
//  974 	
//  975   /*
//  976   LCD_WrCmd(0xae);//--turn off oled panel
//  977   LCD_WrCmd(0x00);//---set low column address
//  978   LCD_WrCmd(0x10);//---set high column address
//  979   LCD_WrCmd(0x40);//--set start line address
//  980   LCD_WrCmd(0x81);//--set contrast control register
//  981   LCD_WrCmd(0xcf);
//  982   LCD_WrCmd(0xa1);//--set segment re-map 95 to 0
//  983   LCD_WrCmd(0xa6);//--set normal display
//  984   LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
//  985   LCD_WrCmd(0x3f);//--1/64 duty
//  986   LCD_WrCmd(0xd3);//-set display offset
//  987   LCD_WrCmd(0x00);//-not offset
//  988   LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
//  989   LCD_WrCmd(0x80);//--set divide ratio
//  990   LCD_WrCmd(0xd9);//--set pre-charge period
//  991   LCD_WrCmd(0xf1);
//  992   LCD_WrCmd(0xda);//--set com pins hardware configuration
//  993   LCD_WrCmd(0x12);
//  994   LCD_WrCmd(0xdb);//--set vcomh
//  995   LCD_WrCmd(0x40);
//  996   LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
//  997   LCD_WrCmd(0x14);//--set(0x10) disable
//  998   LCD_WrCmd(0xaf);//--turn on oled panel
//  999   */
// 1000 	
// 1001 } 
        POP      {R0,PC}          ;; return
// 1002 //==============================================================
// 1003 //函数名： void LCD_PutPixel(byte x,byte y)
// 1004 //功能描述：绘制一个点（x,y）
// 1005 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
// 1006 //返回：无
// 1007 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1008 void LCD_PutPixel(byte x,byte y)
// 1009 {
LCD_PutPixel:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
// 1010 	byte data1;  //data1当前点的数据 
// 1011 	 
// 1012   LCD_Set_Pos(x,y); 
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1013 	data1 = 0x01<<(y%8); 	
        MOVS     R0,#+1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R5,R1
        MLS      R2,R2,R1,R5
        LSLS     R6,R0,R2
// 1014 	LCD_WrCmd(0xb0+(y>>3));
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R0,R5,#+3
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
// 1015 	LCD_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
// 1016 	LCD_WrCmd((x&0x0f)|0x00);
        ANDS     R0,R4,#0xF
        BL       LCD_WrCmd
// 1017 	LCD_WrDat(data1); 	 	
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
// 1018 }
        POP      {R4-R6,PC}       ;; return
// 1019 //==============================================================
// 1020 //函数名： void LCD_Rectangle(byte x1,byte y1,
// 1021 //                   byte x2,byte y2,byte color,byte gif)
// 1022 //功能描述：绘制一个实心矩形
// 1023 //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
// 1024 //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
// 1025 //返回：无
// 1026 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1027 void LCD_Rectangle(byte x1,byte y1,byte x2,byte y2,byte gif)
// 1028 {
LCD_Rectangle:
        PUSH     {R3-R9,LR}
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
// 1029 	byte n; 
// 1030 		
// 1031 	LCD_Set_Pos(x1,y1>>3);
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSRS     R1,R6,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1032 	for(n=x1;n<=x2;n++)
        MOV      R9,R5
        LDR      R4,[SP, #+32]
        B.N      ??LCD_Rectangle_0
// 1033 	{
// 1034 		LCD_WrDat(0x01<<(y1%8)); 			
??LCD_Rectangle_1:
        MOVS     R0,#+1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R6,R1
        MLS      R2,R2,R1,R6
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
// 1035 		if(gif == 1) 	LCD_DLY_ms(50);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??LCD_Rectangle_2
        MOVS     R0,#+50
        BL       LCD_DLY_ms
// 1036 	}  
??LCD_Rectangle_2:
        ADDS     R9,R9,#+1
??LCD_Rectangle_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??LCD_Rectangle_1
// 1037 	LCD_Set_Pos(x1,y2>>3);
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSRS     R1,R8,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1038   for(n=x1;n<=x2;n++)
        MOV      R9,R5
        B.N      ??LCD_Rectangle_3
// 1039 	{
// 1040 		LCD_WrDat(0x01<<(y2%8)); 			
??LCD_Rectangle_4:
        MOVS     R0,#+1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R8,R1
        MLS      R2,R2,R1,R8
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
// 1041 		if(gif == 1) 	LCD_DLY_ms(5);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??LCD_Rectangle_5
        MOVS     R0,#+5
        BL       LCD_DLY_ms
// 1042 	}
??LCD_Rectangle_5:
        ADDS     R9,R9,#+1
??LCD_Rectangle_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??LCD_Rectangle_4
// 1043 	
// 1044 }  
        POP      {R0,R4-R9,PC}    ;; return
// 1045 //==============================================================
// 1046 //函数名：LCD_P6x8Str(byte x,byte y,byte *p)
// 1047 //功能描述：写入一组标准ASCII字符串
// 1048 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
// 1049 //返回：无
// 1050 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1051 void LCD_P6x8Str(byte x,byte y,byte ch[])
// 1052 {
LCD_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1053   byte c=0,i=0,j=0;      
        MOVS     R8,#+0
        MOVS     R9,#+0
        MOVS     R7,#+0
        B.N      ??LCD_P6x8Str_0
// 1054   while (ch[j]!='\0')
// 1055   {    
// 1056     c =ch[j]-32;
// 1057     if(x>126){x=0;y++;}
// 1058     LCD_Set_Pos(x,y);    
// 1059   	for(i=0;i<6;i++)     
// 1060   	  LCD_WrDat(F6x8[c][i]);  
??LCD_P6x8Str_1:
        LDR.W    R0,??DataTable20
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R8,R0
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P6x8Str_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+6
        BLT.N    ??LCD_P6x8Str_1
// 1061   	x+=6;
        ADDS     R4,R4,#+6
// 1062   	j++;
        ADDS     R7,R7,#+1
??LCD_P6x8Str_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P6x8Str_3
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        SUBS     R8,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??LCD_P6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P6x8Str_2
// 1063   }
// 1064 }
??LCD_P6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1065 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1066 void LCD_P6x8Str2(byte x,byte y,byte ch[])
// 1067 {
LCD_P6x8Str2:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1068   byte c=0,i=0,j=0;      
        MOVS     R8,#+0
        MOVS     R9,#+0
        MOVS     R7,#+0
        B.N      ??LCD_P6x8Str2_0
// 1069   while (ch[j]!='\0')
// 1070   {    
// 1071     c =ch[j]-32;
// 1072     if(x>126){x=0;y++;}
// 1073     LCD_Set_Pos(x,y);    
// 1074   	for(i=0;i<6;i++)     
// 1075   	  LCD_WrDat(~(F6x8[c][i]));  
??LCD_P6x8Str2_1:
        LDR.W    R0,??DataTable20
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R8,R0
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P6x8Str2_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+6
        BLT.N    ??LCD_P6x8Str2_1
// 1076   	x+=6;
        ADDS     R4,R4,#+6
// 1077   	j++;
        ADDS     R7,R7,#+1
??LCD_P6x8Str2_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P6x8Str2_3
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        SUBS     R8,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??LCD_P6x8Str2_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P6x8Str2_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P6x8Str2_2
// 1078   }
// 1079 }
??LCD_P6x8Str2_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1080 //==============================================================
// 1081 //函数名：LCD_P8x16Str(byte x,byte y,byte *p)
// 1082 //功能描述：写入一组标准ASCII字符串
// 1083 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
// 1084 //返回：无
// 1085 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1086 void LCD_P8x16Str(byte x,byte y,byte ch[])
// 1087 {
LCD_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1088   byte c=0,i=0,j=0;
        MOVS     R8,#+0
        MOVS     R9,#+0
        MOVS     R7,#+0
        B.N      ??LCD_P8x16Str_0
// 1089         
// 1090   while (ch[j]!='\0')
// 1091   {    
// 1092     c =ch[j]-32;
// 1093     if(x>120){x=0;y++;}
// 1094     LCD_Set_Pos(x,y);    
// 1095   	for(i=0;i<8;i++)     
// 1096   	  LCD_WrDat(F8X16[c*16+i]);
// 1097   	LCD_Set_Pos(x,y+1);    
// 1098   	for(i=0;i<8;i++)     
// 1099   	  LCD_WrDat(F8X16[c*16+i+8]);  
??LCD_P8x16Str_1:
        LDR.W    R0,??DataTable20_1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSLS     R1,R8,#+4
        UXTAB    R1,R1,R9
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P8x16Str_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+8
        BLT.N    ??LCD_P8x16Str_1
// 1100   	x+=8;
        ADDS     R4,R4,#+8
// 1101   	j++;
        ADDS     R7,R7,#+1
??LCD_P8x16Str_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P8x16Str_3
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        SUBS     R8,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??LCD_P8x16Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P8x16Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str_5
??LCD_P8x16Str_6:
        LDR.W    R0,??DataTable20_1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSLS     R1,R8,#+4
        UXTAB    R1,R1,R9
        LDRB     R0,[R1, R0]
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P8x16Str_5:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+8
        BLT.N    ??LCD_P8x16Str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str_2
// 1102   }
// 1103 }
??LCD_P8x16Str_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1104 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1105 void LCD_P8x16Str2(byte x,byte y,byte ch[])
// 1106 {
LCD_P8x16Str2:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1107   byte c=0,i=0,j=0;
        MOVS     R8,#+0
        MOVS     R9,#+0
        MOVS     R7,#+0
        B.N      ??LCD_P8x16Str2_0
// 1108         
// 1109   while (ch[j]!='\0')
// 1110   {    
// 1111     c =ch[j]-32;
// 1112     if(x>120){x=0;y++;}
// 1113     LCD_Set_Pos(x,y);    
// 1114   	for(i=0;i<8;i++)     
// 1115   	  LCD_WrDat(~F8X16[c*16+i]);
// 1116   	LCD_Set_Pos(x,y+1);    
// 1117   	for(i=0;i<8;i++)     
// 1118   	  LCD_WrDat(~F8X16[c*16+i+8]);  
??LCD_P8x16Str2_1:
        LDR.W    R0,??DataTable20_1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSLS     R1,R8,#+4
        UXTAB    R1,R1,R9
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P8x16Str2_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+8
        BLT.N    ??LCD_P8x16Str2_1
// 1119   	x+=8;
        ADDS     R4,R4,#+8
// 1120   	j++;
        ADDS     R7,R7,#+1
??LCD_P8x16Str2_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P8x16Str2_3
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        SUBS     R8,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??LCD_P8x16Str2_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P8x16Str2_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str2_5
??LCD_P8x16Str2_6:
        LDR.W    R0,??DataTable20_1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSLS     R1,R8,#+4
        UXTAB    R1,R1,R9
        LDRB     R0,[R1, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P8x16Str2_5:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+8
        BLT.N    ??LCD_P8x16Str2_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str2_2
// 1121   }
// 1122 }
??LCD_P8x16Str2_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1123 //输出汉字字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1124 void LCD_P14x16Str(byte x,byte y,byte ch[])
// 1125 {
LCD_P14x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R6,R0
        MOVS     R4,R1
        MOVS     R5,R2
// 1126 	byte wm=0,ii = 0;
        MOVS     R9,#+0
        MOVS     R7,#+0
// 1127 	word adder=1; 
        MOVS     R8,#+1
        B.N      ??LCD_P14x16Str_0
// 1128 	
// 1129 	while(ch[ii] != '\0')
// 1130 	{
// 1131   	wm = 0;
// 1132   	adder = 1;
// 1133   	while(F14x16_Idx[wm] > 127)
// 1134   	{
// 1135   		if(F14x16_Idx[wm] == ch[ii])
// 1136   		{
// 1137   			if(F14x16_Idx[wm + 1] == ch[ii + 1])
// 1138   			{
// 1139   				adder = wm * 14;
// 1140   				break;
// 1141   			}
// 1142   		}
// 1143   		wm += 2;			
// 1144   	}
// 1145   	if(x>118){x=0;y++;}
// 1146   	LCD_Set_Pos(x , y); 
// 1147   	if(adder != 1)// 显示汉字					
// 1148   	{
// 1149   		LCD_Set_Pos(x , y);
// 1150   		for(wm = 0;wm < 14;wm++)               
// 1151   		{
// 1152   			LCD_WrDat(F14x16[adder]);	
// 1153   			adder += 1;
// 1154   		}      
// 1155   		LCD_Set_Pos(x,y + 1); 
// 1156   		for(wm = 0;wm < 14;wm++)          
// 1157   		{
// 1158   			LCD_WrDat(F14x16[adder]);
// 1159   			adder += 1;
// 1160   		}   		
// 1161   	}
// 1162   	else			  //显示空白字符			
// 1163   	{
// 1164   		ii += 1;
// 1165       LCD_Set_Pos(x,y);
// 1166   		for(wm = 0;wm < 16;wm++)
// 1167   		{
// 1168   				LCD_WrDat(0);
// 1169   		}
// 1170   		LCD_Set_Pos(x,y + 1);
// 1171   		for(wm = 0;wm < 16;wm++)
// 1172   		{   		
// 1173   				LCD_WrDat(0);	
??LCD_P14x16Str_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
// 1174   		}
        ADDS     R9,R9,#+1
??LCD_P14x16Str_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??LCD_P14x16Str_1
// 1175   	}
// 1176   	x += 14;
??LCD_P14x16Str_3:
        ADDS     R6,R6,#+14
// 1177   	ii += 2;
        ADDS     R7,R7,#+2
??LCD_P14x16Str_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R5]
        CMP      R0,#+0
        BEQ.W    ??LCD_P14x16Str_4
        MOVS     R9,#+0
        MOVS     R8,#+1
        B.N      ??LCD_P14x16Str_5
??LCD_P14x16Str_6:
        ADDS     R9,R9,#+2
??LCD_P14x16Str_5:
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        CMP      R0,#+128
        BLT.N    ??LCD_P14x16Str_7
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R1,[R7, R5]
        CMP      R0,R1
        BNE.N    ??LCD_P14x16Str_6
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R9,R0
        LDRB     R0,[R0, #+1]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R1,R7,R5
        LDRB     R1,[R1, #+1]
        CMP      R0,R1
        BNE.N    ??LCD_P14x16Str_6
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MOVS     R0,#+14
        MUL      R8,R0,R9
??LCD_P14x16Str_7:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+119
        BLT.N    ??LCD_P14x16Str_8
        MOVS     R6,#+0
        ADDS     R4,R4,#+1
??LCD_P14x16Str_8:
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        CMP      R8,#+1
        BEQ.N    ??LCD_P14x16Str_9
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str_10
??LCD_P14x16Str_11:
        LDR.W    R0,??DataTable20_3
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
??LCD_P14x16Str_10:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+14
        BLT.N    ??LCD_P14x16Str_11
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
??LCD_P14x16Str_12:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+14
        BGE.N    ??LCD_P14x16Str_3
        LDR.W    R0,??DataTable20_3
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
        B.N      ??LCD_P14x16Str_12
??LCD_P14x16Str_9:
        ADDS     R7,R7,#+1
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str_13
??LCD_P14x16Str_14:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P14x16Str_13:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??LCD_P14x16Str_14
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str_2
// 1178 	}
// 1179 }
??LCD_P14x16Str_4:
        POP      {R0,R4-R9,PC}    ;; return
// 1180 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1181 void LCD_P14x16Str2(byte x,byte y,byte ch[])
// 1182 {
LCD_P14x16Str2:
        PUSH     {R3-R9,LR}
        MOVS     R6,R0
        MOVS     R4,R1
        MOVS     R5,R2
// 1183 	byte wm=0,ii = 0;
        MOVS     R9,#+0
        MOVS     R7,#+0
// 1184 	word adder=1; 
        MOVS     R8,#+1
        B.N      ??LCD_P14x16Str2_0
// 1185 	
// 1186 	while(ch[ii] != '\0')
// 1187 	{
// 1188   	wm = 0;
// 1189   	adder = 1;
// 1190   	while(F14x16_Idx[wm] > 127)
// 1191   	{
// 1192   		if(F14x16_Idx[wm] == ch[ii])
// 1193   		{
// 1194   			if(F14x16_Idx[wm + 1] == ch[ii + 1])
// 1195   			{
// 1196   				adder = wm * 14;
// 1197   				break;
// 1198   			}
// 1199   		}
// 1200   		wm += 2;			
// 1201   	}
// 1202   	if(x>118){x=0;y++;}
// 1203   	LCD_Set_Pos(x , y); 
// 1204   	if(adder != 1)// 显示汉字					
// 1205   	{
// 1206   		LCD_Set_Pos(x , y);
// 1207   		for(wm = 0;wm < 14;wm++)               
// 1208   		{
// 1209   			LCD_WrDat(~F14x16[adder]);	
// 1210   			adder += 1;
// 1211   		}      
// 1212   		LCD_Set_Pos(x,y + 1); 
// 1213   		for(wm = 0;wm < 14;wm++)          
// 1214   		{
// 1215   			LCD_WrDat(~F14x16[adder]);
// 1216   			adder += 1;
// 1217   		}   		
// 1218   	}
// 1219   	else			  //显示空白字符			
// 1220   	{
// 1221   		ii += 1;
// 1222       LCD_Set_Pos(x,y);
// 1223   		for(wm = 0;wm < 16;wm++)
// 1224   		{
// 1225   				LCD_WrDat(0);
// 1226   		}
// 1227   		LCD_Set_Pos(x,y + 1);
// 1228   		for(wm = 0;wm < 16;wm++)
// 1229   		{   		
// 1230   				LCD_WrDat(0);	
??LCD_P14x16Str2_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
// 1231   		}
        ADDS     R9,R9,#+1
??LCD_P14x16Str2_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??LCD_P14x16Str2_1
// 1232   	}
// 1233   	x += 14;
??LCD_P14x16Str2_3:
        ADDS     R6,R6,#+14
// 1234   	ii += 2;
        ADDS     R7,R7,#+2
??LCD_P14x16Str2_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R5]
        CMP      R0,#+0
        BEQ.W    ??LCD_P14x16Str2_4
        MOVS     R9,#+0
        MOVS     R8,#+1
        B.N      ??LCD_P14x16Str2_5
??LCD_P14x16Str2_6:
        ADDS     R9,R9,#+2
??LCD_P14x16Str2_5:
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        CMP      R0,#+128
        BLT.N    ??LCD_P14x16Str2_7
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R1,[R7, R5]
        CMP      R0,R1
        BNE.N    ??LCD_P14x16Str2_6
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R9,R0
        LDRB     R0,[R0, #+1]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R1,R7,R5
        LDRB     R1,[R1, #+1]
        CMP      R0,R1
        BNE.N    ??LCD_P14x16Str2_6
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MOVS     R0,#+14
        MUL      R8,R0,R9
??LCD_P14x16Str2_7:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+119
        BLT.N    ??LCD_P14x16Str2_8
        MOVS     R6,#+0
        ADDS     R4,R4,#+1
??LCD_P14x16Str2_8:
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        CMP      R8,#+1
        BEQ.N    ??LCD_P14x16Str2_9
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str2_10
??LCD_P14x16Str2_11:
        LDR.W    R0,??DataTable20_3
        LDRB     R0,[R8, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
??LCD_P14x16Str2_10:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+14
        BLT.N    ??LCD_P14x16Str2_11
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
??LCD_P14x16Str2_12:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+14
        BGE.N    ??LCD_P14x16Str2_3
        LDR.W    R0,??DataTable20_3
        LDRB     R0,[R8, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
        B.N      ??LCD_P14x16Str2_12
??LCD_P14x16Str2_9:
        ADDS     R7,R7,#+1
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str2_13
??LCD_P14x16Str2_14:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P14x16Str2_13:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??LCD_P14x16Str2_14
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str2_2
// 1235 	}
// 1236 }
??LCD_P14x16Str2_4:
        POP      {R0,R4-R9,PC}    ;; return
// 1237 
// 1238 //输出汉字和字符混合字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1239 void LCD_Print(byte x, byte y, byte ch[])
// 1240 {
LCD_Print:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1241 	byte ch2[3];
// 1242 	byte ii=0;        
        MOVS     R7,#+0
        B.N      ??LCD_Print_0
// 1243 	while(ch[ii] != '\0')
// 1244 	{
// 1245 		if(ch[ii] > 127)
// 1246 		{
// 1247 			ch2[0] = ch[ii];
??LCD_Print_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
// 1248 	 		ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
// 1249 			ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
// 1250 			LCD_P14x16Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P14x16Str
// 1251 			x += 14;
        ADDS     R4,R4,#+14
// 1252 			ii += 2;
        ADDS     R7,R7,#+2
// 1253 		}
??LCD_Print_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_Print_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BGE.N    ??LCD_Print_1
// 1254 		else
// 1255 		{
// 1256 			ch2[0] = ch[ii];	
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
// 1257 			ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
// 1258 			LCD_P8x16Str(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P8x16Str
// 1259 			x += 8;
        ADDS     R4,R4,#+8
// 1260 			ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??LCD_Print_0
// 1261 		}
// 1262 	}
// 1263 } 
??LCD_Print_2:
        POP      {R0,R4-R7,PC}    ;; return
// 1264 
// 1265 //==============================================================
// 1266 //函数名： void Draw_BMP(byte x,byte y)
// 1267 //功能描述：显示BMP图片128×64
// 1268 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
// 1269 //返回：无
// 1270 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1271 void Draw_BMP(byte x0,byte y0,byte x1,byte y1,byte bmp[])
// 1272 { 	
Draw_BMP:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
        MOVS     R6,R3
// 1273   word ii=0;
        MOVS     R7,#+0
// 1274   byte x,y;
// 1275   
// 1276   if(y1%8==0) y=y1/8;      
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R2,R6,R0
        MLS      R2,R2,R0,R6
        CMP      R2,#+0
        BNE.N    ??Draw_BMP_0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R10,R6,R0
        B.N      ??Draw_BMP_1
// 1277   else y=y1/8+1;
??Draw_BMP_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R6,R0
        ADDS     R10,R0,#+1
// 1278 	for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOV      R10,R1
        LDR      R8,[SP, #+32]
        B.N      ??Draw_BMP_2
// 1279 	{
// 1280 		LCD_Set_Pos(x0,y);				
// 1281     for(x=x0;x<x1;x++)
// 1282 	    {      
// 1283 	    	LCD_WrDat(bmp[ii++]);	    	
??Draw_BMP_3:
        LDRB     R0,[R7, R8]
        BL       LCD_WrDat
        ADDS     R7,R7,#+1
// 1284 	    }
        ADDS     R9,R9,#+1
??Draw_BMP_4:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R9,R5
        BCC.N    ??Draw_BMP_3
        ADDS     R10,R10,#+1
??Draw_BMP_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R6,R10
        BCC.N    ??Draw_BMP_5
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOV      R9,R4
        B.N      ??Draw_BMP_4
// 1285 	}
// 1286 }
??Draw_BMP_5:
        POP      {R4-R10,PC}      ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1287 void Draw_LQLogo(void)
// 1288 { 	
Draw_LQLogo:
        PUSH     {R4-R6,LR}
// 1289   word ii=0;
        MOVS     R4,#+0
// 1290   byte x,y;       
// 1291   
// 1292 	for(y=0;y<8;y++)
        MOVS     R6,#+0
        B.N      ??Draw_LQLogo_0
// 1293 	{
// 1294 		LCD_Set_Pos(16,y);				
// 1295     for(x=16;x<112;x++)
// 1296 	    {      
// 1297 	    	LCD_WrDat(longqiu96x64[ii++]);	    	
??Draw_LQLogo_1:
        LDR.W    R0,??DataTable20_4
        LDRB     R0,[R4, R0]
        BL       LCD_WrDat
        ADDS     R4,R4,#+1
// 1298 	    }
        ADDS     R5,R5,#+1
??Draw_LQLogo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+112
        BLT.N    ??Draw_LQLogo_1
        ADDS     R6,R6,#+1
??Draw_LQLogo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_LQLogo_3
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+16
        BL       LCD_Set_Pos
        MOVS     R5,#+16
        B.N      ??Draw_LQLogo_2
// 1299 	}
// 1300 }
??Draw_LQLogo_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1301 void Draw_LibLogo(void)
// 1302 { 	
Draw_LibLogo:
        PUSH     {R4-R6,LR}
// 1303   word ii=0;
        MOVS     R4,#+0
// 1304   byte x,y;       
// 1305   
// 1306 	for(y=0;y<8;y++)
        MOVS     R6,#+0
        B.N      ??Draw_LibLogo_0
// 1307 	{
// 1308 		LCD_Set_Pos(34,y);				
// 1309     for(x=34;x<94;x++)
// 1310 	    {      
// 1311 	    	LCD_WrDat(LIBLOGO60x58[ii++]);	    	
??Draw_LibLogo_1:
        LDR.W    R0,??DataTable20_5
        LDRB     R0,[R4, R0]
        BL       LCD_WrDat
        ADDS     R4,R4,#+1
// 1312 	    }
        ADDS     R5,R5,#+1
??Draw_LibLogo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+94
        BLT.N    ??Draw_LibLogo_1
        ADDS     R6,R6,#+1
??Draw_LibLogo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_LibLogo_3
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+34
        BL       LCD_Set_Pos
        MOVS     R5,#+34
        B.N      ??Draw_LibLogo_2
// 1313 	}
// 1314 }
??Draw_LibLogo_3:
        POP      {R4-R6,PC}       ;; return
// 1315 /*void floatToInt(float fl,byte n,unsigned char x,unsigned char y)
// 1316 {
// 1317    int tem1,tem2,k=1;
// 1318    unsigned char Temp_Buf[17];
// 1319    byte i;
// 1320    tem1=(int)fl;
// 1321    for(i=0;i<n;i++)
// 1322      k*=10;
// 1323    if(fl>0)
// 1324    tem2=(int)((fl-tem1)*k);
// 1325    else
// 1326    tem2=(int)((tem1-fl)*k);
// 1327    sprintf(Temp_Buf,"%d.%d\0",tem1,tem2);
// 1328    LCD_P6x8Str(x,y,Temp_Buf);
// 1329 }*/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1330 void floatToInt(float fl,byte n,byte s)
// 1331 {
floatToInt:
        PUSH     {R4-R8,LR}
        MOVS     R7,R0
        MOV      R8,R1
        MOVS     R4,R2
// 1332    int tem1,tem2,k=1;
        MOVS     R6,#+1
// 1333    byte i;
// 1334    tem1=(int)fl;
        MOVS     R0,R7
        BL       __aeabi_f2iz
        MOVS     R5,R0
// 1335    for(i=0;i<n;i++)
        MOVS     R0,#+0
        B.N      ??floatToInt_0
// 1336      k*=10;
??floatToInt_1:
        MOVS     R1,#+10
        MULS     R6,R1,R6
        ADDS     R0,R0,#+1
??floatToInt_0:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R0,R8
        BCC.N    ??floatToInt_1
// 1337    if(fl>0)
        MOVS     R0,R7
        MOVS     R1,#+0
        BL       __aeabi_cfrcmple
        BCS.N    ??floatToInt_2
// 1338    tem2=(int)((fl-tem1)*k);
        MOVS     R0,R5
        BL       __aeabi_i2f
        MOVS     R1,R0
        MOVS     R0,R7
        BL       __aeabi_fsub
        MOVS     R7,R0
        MOVS     R0,R6
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
        B.N      ??floatToInt_3
// 1339    else
// 1340   tem2=(int)((tem1-fl)*k);
??floatToInt_2:
        MOVS     R0,R5
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fsub
        MOVS     R7,R0
        MOVS     R0,R6
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
// 1341   switch(s)
??floatToInt_3:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BEQ.N    ??floatToInt_4
        BCC.N    ??floatToInt_5
        CMP      R4,#+3
        BEQ.N    ??floatToInt_6
        BCC.N    ??floatToInt_7
        B.N      ??floatToInt_5
// 1342   {
// 1343   case 1:sprintf((signed char *)str1,"%d.%d\0",tem1,tem2);break;
??floatToInt_4:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_7
        BL       sprintf
        B.N      ??floatToInt_5
// 1344   case 2:sprintf((signed char *)str2,"%d.%d\0",tem1,tem2);break;
??floatToInt_7:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_8
        BL       sprintf
        B.N      ??floatToInt_5
// 1345   case 3:sprintf((signed char *)str3,"%d.%d\0",tem1,tem2);break;
??floatToInt_6:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_9
        BL       sprintf
// 1346   }
// 1347 }
??floatToInt_5:
        POP      {R4-R8,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1348 void floatToInt2(float fl,byte n,byte s)
// 1349 {
floatToInt2:
        PUSH     {R4-R8,LR}
        MOVS     R7,R0
        MOV      R8,R1
        MOVS     R4,R2
// 1350    int tem1,tem2,k=1;
        MOVS     R6,#+1
// 1351    byte i;
// 1352    tem1=(int)fl;
        MOVS     R0,R7
        BL       __aeabi_f2iz
        MOVS     R5,R0
// 1353    for(i=0;i<n;i++)
        MOVS     R0,#+0
        B.N      ??floatToInt2_0
// 1354      k*=10;
??floatToInt2_1:
        MOVS     R1,#+10
        MULS     R6,R1,R6
        ADDS     R0,R0,#+1
??floatToInt2_0:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R0,R8
        BCC.N    ??floatToInt2_1
// 1355    if(fl>0)
        MOVS     R0,R7
        MOVS     R1,#+0
        BL       __aeabi_cfrcmple
        BCS.N    ??floatToInt2_2
// 1356    tem2=(int)((fl-tem1)*k);
        MOVS     R0,R5
        BL       __aeabi_i2f
        MOVS     R1,R0
        MOVS     R0,R7
        BL       __aeabi_fsub
        MOVS     R7,R0
        MOVS     R0,R6
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
        B.N      ??floatToInt2_3
// 1357    else
// 1358   tem2=(int)((tem1-fl)*k);
??floatToInt2_2:
        MOVS     R0,R5
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fsub
        MOVS     R7,R0
        MOVS     R0,R6
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
// 1359   switch(s)
??floatToInt2_3:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BEQ.N    ??floatToInt2_4
        BCC.N    ??floatToInt2_5
        CMP      R4,#+3
        BEQ.N    ??floatToInt2_6
        BCC.N    ??floatToInt2_7
        B.N      ??floatToInt2_5
// 1360   {
// 1361   case 1:sprintf((signed char *)str4,"%d.%d\0",tem1,tem2);break;
??floatToInt2_4:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_10
        BL       sprintf
        B.N      ??floatToInt2_5
// 1362   case 2:sprintf((signed char *)str5,"%d.%d\0",tem1,tem2);break;
??floatToInt2_7:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_11
        BL       sprintf
        B.N      ??floatToInt2_5
// 1363   case 3:sprintf((signed char *)str6,"%d.%d\0",tem1,tem2);break;
??floatToInt2_6:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_12
        BL       sprintf
// 1364   }
// 1365 }
??floatToInt2_5:
        POP      {R4-R8,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13:
        DC32     0x400ff080

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_1:
        DC32     gpio_init_struct_OLED

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_2:
        DC32     0x43fe102c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_3:
        DC32     0x43fe1040

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_4:
        DC32     0x43fe103c
// 1366 /*****************************************************************************
// 1367  函 数 名  : LED_PrintImage
// 1368  功能描述  : 将图像显示出来
// 1369  输入参数  : UCHAR8 *pucTable     二维图像数组的地址
// 1370              USHORT16 usRowNum    二维图像的行数1~64
// 1371              USHORT16 usColumnNum 二维图像的列数1~128
// 1372  输出参数  : none
// 1373  返 回 值  : none
// 1374 *****************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1375 void LED_PrintImage(unsigned char *pucTable,unsigned short usRowNum, unsigned short usColumnNum)
// 1376 {
LED_PrintImage:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
// 1377    unsigned char ucData;
// 1378    unsigned short i,j,k,m,n;
// 1379    unsigned short usRowTmp;
// 1380 
// 1381     m = usRowNum >> 3;   //计算图片行数以8位为一组完整的组数
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        LSRS     R9,R1,#+3
// 1382     n = usRowNum % 8;    //计算分完组后剩下的行数
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,#+8
        SDIV     R6,R1,R0
        MLS      R6,R6,R0,R1
// 1383     
// 1384     for(i = 2; i < m-1; i++) //完整组行扫描
        MOVS     R10,#+2
        B.N      ??LED_PrintImage_0
??LED_PrintImage_1:
        ADDS     R10,R10,#+1
??LED_PrintImage_0:
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        SUBS     R0,R9,#+1
        CMP      R10,R0
        BGE.N    ??LED_PrintImage_2
// 1385     {
// 1386         LCD_Set_Pos(0,(unsigned char)i);
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1387         usRowTmp = i << 3;    //计算当前所在行的下标                  
        LSLS     R7,R10,#+3
// 1388         for(j = 0; j < usColumnNum; j++) //列扫描        
        MOVS     R8,#+0
        B.N      ??LED_PrintImage_3
// 1389         {
// 1390             ucData = 0;
// 1391             for(k = 0; k < 8; k++) //在i组中对这8行扫描
// 1392             {
// 1393                 ucData = ucData >> 1;
??LED_PrintImage_4:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1394                     if((pucTable + (usRowTmp + k) * usColumnNum)[j] == 255)
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTAH    R2,R1,R7
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        MLA      R2,R5,R2,R4
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDRB     R2,[R8, R2]
        CMP      R2,#+255
        BNE.N    ??LED_PrintImage_5
// 1395                     {
// 1396                        ucData = ucData | 0x80;
        ORRS     R0,R0,#0x80
// 1397                     }
// 1398             }
??LED_PrintImage_5:
        ADDS     R1,R1,#+1
??LED_PrintImage_6:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        CMP      R1,#+8
        BLT.N    ??LED_PrintImage_4
// 1399             LCD_WrDat(ucData);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LED_PrintImage_3:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R8,R5
        BCS.N    ??LED_PrintImage_1
        MOVS     R0,#+0
        MOVS     R1,#+0
        B.N      ??LED_PrintImage_6
// 1400         }
// 1401     }
// 1402     
// 1403     LCD_Set_Pos(0,(unsigned char)i); //设置剩下的行显示的起始坐标
??LED_PrintImage_2:
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1404     usRowTmp = i << 3;       //计算当前所在行的下标                  
        LSLS     R7,R10,#+3
// 1405     for(j = 0; j < usColumnNum; j++) //列扫描  
        MOVS     R8,#+0
        B.N      ??LED_PrintImage_7
// 1406     {
// 1407         ucData = 0;
// 1408         for(k = 0; k < n; k++) //对剩下的行扫描
// 1409         {
// 1410             ucData = ucData >> 1;
??LED_PrintImage_8:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1411             
// 1412             if((pucTable + (usRowTmp + k) * usColumnNum)[j] == 255)
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTAH    R2,R1,R7
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        MLA      R2,R5,R2,R4
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDRB     R2,[R8, R2]
        CMP      R2,#+255
        BNE.N    ??LED_PrintImage_9
// 1413             {
// 1414                 ucData = ucData | 0x80;
        ORRS     R0,R0,#0x80
// 1415             }      
// 1416         }
??LED_PrintImage_9:
        ADDS     R1,R1,#+1
??LED_PrintImage_10:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R1,R6
        BCC.N    ??LED_PrintImage_8
// 1417         ucData = ucData >> (8 - n);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        RSBS     R2,R6,#+8
        MOVS     R1,R0
        MOVS     R0,R1
        ASRS     R0,R0,R2
// 1418         LCD_WrDat(ucData);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LED_PrintImage_7:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R8,R5
        BCS.N    ??LED_PrintImage_11
        MOVS     R0,#+0
        MOVS     R1,#+0
        B.N      ??LED_PrintImage_10
// 1419     }
// 1420 
// 1421     return;
??LED_PrintImage_11:
        POP      {R4-R10,PC}      ;; return
// 1422 }
// 1423 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1424 void LED_PrintImag2(unsigned char *pucTable,unsigned short usRowNum, unsigned short usColumnNum)
// 1425 {
LED_PrintImag2:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
// 1426     unsigned char ucData;
// 1427     unsigned short i,j,k,m,n;
// 1428    unsigned short usRowTmp;
// 1429     
// 1430     m = usRowNum >> 3;   //计算图片行数以8位为一组完整的组数
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        LSRS     R9,R1,#+3
// 1431     n = usRowNum % 8;    //计算分完组后剩下的行数
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,#+8
        SDIV     R6,R1,R0
        MLS      R6,R6,R0,R1
// 1432     
// 1433     for(i = 0; i < m; i++) //完整组行扫描
        MOVS     R10,#+0
        B.N      ??LED_PrintImag2_0
??LED_PrintImag2_1:
        ADDS     R10,R10,#+1
??LED_PrintImag2_0:
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        CMP      R10,R9
        BCS.N    ??LED_PrintImag2_2
// 1434     {
// 1435         LCD_Set_Pos(0,(unsigned char)i);
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1436         usRowTmp = i << 3;    //计算当前所在行的下标                  
        LSLS     R7,R10,#+3
// 1437         for(j = 0; j < usColumnNum; j+=2) //列扫描        
        MOVS     R8,#+0
        B.N      ??LED_PrintImag2_3
// 1438         {
// 1439             ucData = 0;
// 1440             for(k = 0; k < 8; k++) //在i组中对这8行扫描
// 1441             {
// 1442                 ucData = ucData >> 1;
??LED_PrintImag2_4:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1443                     if((pucTable + (usRowTmp + k) * usColumnNum)[j] == 255)
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTAH    R2,R1,R7
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        MLA      R2,R5,R2,R4
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDRB     R2,[R8, R2]
        CMP      R2,#+255
        BNE.N    ??LED_PrintImag2_5
// 1444                     {
// 1445                        ucData = ucData | 0x80;
        ORRS     R0,R0,#0x80
// 1446                     }
// 1447                 
// 1448             }
??LED_PrintImag2_5:
        ADDS     R1,R1,#+1
??LED_PrintImag2_6:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        CMP      R1,#+8
        BLT.N    ??LED_PrintImag2_4
// 1449             LCD_WrDat(ucData);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R8,R8,#+2
??LED_PrintImag2_3:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R8,R5
        BCS.N    ??LED_PrintImag2_1
        MOVS     R0,#+0
        MOVS     R1,#+0
        B.N      ??LED_PrintImag2_6
// 1450         }
// 1451     }
// 1452     
// 1453     LCD_Set_Pos(0,(unsigned char)i); //设置剩下的行显示的起始坐标
??LED_PrintImag2_2:
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1454     usRowTmp = i << 3;       //计算当前所在行的下标                  
        LSLS     R7,R10,#+3
// 1455     for(j = 0; j < usColumnNum; j+=2) //列扫描        
        MOVS     R8,#+0
        B.N      ??LED_PrintImag2_7
// 1456     {
// 1457         ucData = 0;
// 1458         for(k = 0; k < n; k++) //对剩下的行扫描
// 1459         {
// 1460             ucData = ucData >> 1;
??LED_PrintImag2_8:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1461                 ucData = ucData >> 1;
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1462                     if((pucTable + (usRowTmp + k) * usColumnNum)[j] == 255)
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTAH    R2,R1,R7
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        MLA      R2,R5,R2,R4
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDRB     R2,[R8, R2]
        CMP      R2,#+255
        BNE.N    ??LED_PrintImag2_9
// 1463                     {
// 1464                        ucData = ucData | 0x80;
        ORRS     R0,R0,#0x80
// 1465                     }
// 1466                 
// 1467         }
??LED_PrintImag2_9:
        ADDS     R1,R1,#+1
??LED_PrintImag2_10:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R1,R6
        BCC.N    ??LED_PrintImag2_8
// 1468         ucData = ucData >> (8 - n/2+1);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R1,#+2
        SDIV     R1,R6,R1
        RSBS     R2,R1,#+9
        MOVS     R1,R0
        ASRS     R1,R1,R2
        MOVS     R0,R1
// 1469         LCD_WrDat(ucData);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R8,R8,#+2
??LED_PrintImag2_7:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R8,R5
        BCS.N    ??LED_PrintImag2_11
        MOVS     R0,#+0
        MOVS     R1,#+0
        B.N      ??LED_PrintImag2_10
// 1470     }
// 1471 
// 1472     return;
??LED_PrintImag2_11:
        POP      {R4-R10,PC}      ;; return
// 1473 }
// 1474 
// 1475 /*---------------------*列表移动*---------------------*/      

        SECTION `.data`:DATA:REORDER:NOROOT(2)
// 1476 char Change_To_Bit[8]=
Change_To_Bit:
        DATA
        DC8 128, 64, 32, 16, 8, 4, 2, 1
// 1477 {
// 1478   0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01
// 1479 };

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
// 1480 signed char Temp_List[120];
Temp_List:
        DS8 120

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
// 1481 void OLED_Write_Data(unsigned char Data)
// 1482 {
// 1483 	unsigned char Temp_i=8;
OLED_Write_Data:
        MOVS     R1,#+8
// 1484 	LCD_DC=1;;
        MOVS     R2,#+1
        LDR.W    R3,??DataTable20_13  ;; 0x43fe102c
        STR      R2,[R3, #+0]
// 1485   LCD_SCL=0;;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable20_14  ;; 0x43fe1040
        STR      R2,[R3, #+0]
        B.N      ??OLED_Write_Data_0
// 1486   while(Temp_i--)
// 1487   {
// 1488     if(Data&0x80){LCD_SDA=1;}
// 1489     else{LCD_SDA=0;}
??OLED_Write_Data_1:
        MOVS     R2,#+0
        LDR.W    R3,??DataTable20_15  ;; 0x43fe103c
        STR      R2,[R3, #+0]
// 1490     LCD_SCL=1; 
??OLED_Write_Data_2:
        MOVS     R2,#+1
        LDR.W    R3,??DataTable20_14  ;; 0x43fe1040
        STR      R2,[R3, #+0]
// 1491     asm("nop");;
        nop
// 1492     LCD_SCL=0;;    
        MOVS     R2,#+0
        LDR.W    R3,??DataTable20_14  ;; 0x43fe1040
        STR      R2,[R3, #+0]
// 1493     Data<<=1;    
        LSLS     R0,R0,#+1
??OLED_Write_Data_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??OLED_Write_Data_3
        LSLS     R2,R0,#+24
        BPL.N    ??OLED_Write_Data_1
        MOVS     R2,#+1
        LDR.W    R3,??DataTable20_15  ;; 0x43fe103c
        STR      R2,[R3, #+0]
        B.N      ??OLED_Write_Data_2
// 1494   }
// 1495 }
??OLED_Write_Data_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1496 void List_Move(signed char New_Data)
// 1497 // 对数组进行移位
// 1498 {
// 1499   static signed int Temp_i;
// 1500   signed int Temp_j;
// 1501   if(Temp_i<120)
List_Move:
        LDR.W    R1,??DataTable20_16
        LDR      R1,[R1, #+0]
        CMP      R1,#+120
        BGE.N    ??List_Move_0
// 1502     Temp_List[Temp_i]=New_Data;
        LDR.W    R1,??DataTable20_17
        LDR.W    R2,??DataTable20_16
        LDR      R2,[R2, #+0]
        STRB     R0,[R2, R1]
        B.N      ??List_Move_1
// 1503   else
// 1504   {
// 1505     for(Temp_j=0;Temp_j<119;Temp_j++)
??List_Move_0:
        MOVS     R1,#+0
        B.N      ??List_Move_2
// 1506       Temp_List[Temp_j]=Temp_List[Temp_j+1];  
??List_Move_3:
        LDR.N    R2,??DataTable20_17
        ADDS     R2,R1,R2
        LDRB     R2,[R2, #+1]
        LDR.N    R3,??DataTable20_17
        STRB     R2,[R1, R3]
        ADDS     R1,R1,#+1
??List_Move_2:
        CMP      R1,#+119
        BLT.N    ??List_Move_3
// 1507     Temp_List[119]=New_Data;  
        LDR.N    R1,??DataTable20_17
        STRB     R0,[R1, #+119]
// 1508   }
// 1509 
// 1510   if(Temp_i>=120)
??List_Move_1:
        LDR.N    R0,??DataTable20_16
        LDR      R0,[R0, #+0]
        CMP      R0,#+120
        BLT.N    ??List_Move_4
// 1511     Temp_i=120;
        MOVS     R0,#+120
        LDR.N    R1,??DataTable20_16
        STR      R0,[R1, #+0]
        B.N      ??List_Move_5
// 1512   else
// 1513     Temp_i++; 
??List_Move_4:
        LDR.N    R0,??DataTable20_16
        LDR      R0,[R0, #+0]
        ADDS     R0,R0,#+1
        LDR.N    R1,??DataTable20_16
        STR      R0,[R1, #+0]
// 1514 }
??List_Move_5:
        BX       LR               ;; return

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
??Temp_i:
        DS8 4
// 1515 /*-------------------*显示列表图形*-------------------*/      

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1516 void Delay_temp(signed int x)
// 1517 {
// 1518   signed int Temp_i,Temp_j;
// 1519   for(Temp_i=0;Temp_i<1000;Temp_i++)
Delay_temp:
        MOVS     R1,#+0
        B.N      ??Delay_temp_0
// 1520     for(Temp_j=0;Temp_j<x;Temp_j++);
??Delay_temp_1:
        ADDS     R2,R2,#+1
??Delay_temp_2:
        CMP      R2,R0
        BLT.N    ??Delay_temp_1
        ADDS     R1,R1,#+1
??Delay_temp_0:
        CMP      R1,#+1000
        BGE.N    ??Delay_temp_3
        MOVS     R2,#+0
        B.N      ??Delay_temp_2
// 1521 }
??Delay_temp_3:
        BX       LR               ;; return
// 1522 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1523 void List_Paint(void)
// 1524 // 将Temp_List列表里面的数据用一整幅图画出来
// 1525 {
List_Paint:
        PUSH     {R3-R5,LR}
// 1526   unsigned char Temp_i;
// 1527   unsigned char Cross;  
// 1528 
// 1529   for(Cross=0;Cross<6;Cross++)
        MOVS     R4,#+0
        B.N      ??List_Paint_0
??List_Paint_1:
        ADDS     R4,R4,#+1
??List_Paint_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+6
        BGE.N    ??List_Paint_2
// 1530   {
// 1531     LCD_Set_Pos(4,7-Cross);         //这边应该是设置图像起始的行数
        RSBS     R1,R4,#+7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+4
        BL       LCD_Set_Pos
// 1532     for(Temp_i=0;Temp_i<120;Temp_i++) 
        MOVS     R5,#+0
        B.N      ??List_Paint_3
// 1533     {
// 1534       if(Temp_List[Temp_i]>>3==Cross)
// 1535       {
// 1536         OLED_Write_Data(Change_To_Bit[ Temp_List[Temp_i]&0x07 ]);   
// 1537       }
// 1538       else 
// 1539       {
// 1540         OLED_Write_Data(0x00);
??List_Paint_4:
        MOVS     R0,#+0
        BL       OLED_Write_Data
// 1541       }     
??List_Paint_5:
        ADDS     R5,R5,#+1
??List_Paint_3:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+120
        BGE.N    ??List_Paint_1
        LDR.N    R0,??DataTable20_17
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LDRSB    R0,[R5, R0]
        ASRS     R0,R0,#+3
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R0,R4
        BNE.N    ??List_Paint_4
        LDR.N    R0,??DataTable20_18
        LDR.N    R1,??DataTable20_17
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LDRB     R1,[R5, R1]
        ANDS     R1,R1,#0x7
        LDRB     R0,[R1, R0]
        BL       OLED_Write_Data
        B.N      ??List_Paint_5
// 1542     }    
// 1543   }
// 1544 }
??List_Paint_2:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1545 void Paint_List(float New_Data,float Paint_Ave,float Paint_Margin)
// 1546 // 将某个数据以列表刷新的形式显示出来
// 1547 {
Paint_List:
        PUSH     {R3-R7,LR}
        MOVS     R7,R0
        MOVS     R6,R1
        MOVS     R0,R2
// 1548   unsigned char Temp_Data;
// 1549   
// 1550   Temp_Data=(signed char)(22.0/Paint_Margin*(New_Data-Paint_Ave)+26);
        BL       __aeabi_f2d
        MOVS     R2,R0
        MOVS     R3,R1
        MOVS     R0,#+0
        LDR.N    R1,??DataTable20_19  ;; 0x40360000
        BL       __aeabi_ddiv
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R7
        MOVS     R1,R6
        BL       __aeabi_fsub
        BL       __aeabi_f2d
        MOVS     R2,R4
        MOVS     R3,R5
        BL       __aeabi_dmul
        MOVS     R2,#+0
        LDR.N    R3,??DataTable20_20  ;; 0x403a0000
        BL       __aeabi_dadd
        BL       __aeabi_d2iz
// 1551   List_Move(Temp_Data);
        SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
        BL       List_Move
// 1552   List_Paint();
        BL       List_Paint
// 1553 }
        POP      {R0,R4-R7,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1554 void Paint_Angle(float Angle)
// 1555 {
Paint_Angle:
        PUSH     {R3-R5,LR}
// 1556   static signed int Temp_Count;
// 1557   Temp_Count=(int)(Angle);
        BL       __aeabi_f2iz
        LDR.N    R1,??DataTable20_21
        STR      R0,[R1, #+0]
// 1558  // Temp_Count=(int)(Angle);
// 1559   Paint_List(Temp_Count,0,25);    //已更改为80，原为25   80为显示范围
        LDR.N    R2,??DataTable20_22  ;; 0x41c80000
        MOVS     R1,#+0
        MOVS     R4,R1
        MOVS     R5,R2
        LDR.N    R0,??DataTable20_21
        LDR      R0,[R0, #+0]
        BL       __aeabi_i2f
        MOVS     R2,R5
        MOVS     R1,R4
        BL       Paint_List
// 1560   Delay_temp(56);                 //原来是200
        MOVS     R0,#+56
        BL       Delay_temp
// 1561 }
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
??Temp_Count:
        DS8 4
// 1562 
// 1563 /************将浮点型数据转换为字符串************/
// 1564 //fNum待变换浮点数
// 1565 //str[]存储转换后数组
// 1566 //dotsize 保留几位小数

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1567 int Float_To_String(float fNum,uint8 str[],int dotsize)
// 1568 {
Float_To_String:
        PUSH     {R3-R11,LR}
        MOV      R11,R0
        MOVS     R4,R1
        MOVS     R5,R2
// 1569 	// 定义变量
// 1570 	int iSize = 0;//记录字符串长度的数
        MOVS     R6,#+0
// 1571 	int n = 0;//用作循环的临时变量
        MOVS     R7,#+0
// 1572 	uint8 *p = str;//做换向时用的指针
// 1573 	uint8 *s = str;//做换向时用的指针
        MOV      R8,R4
// 1574 	char isnegative = 0;//负数标志
        MOVS     R9,#+0
// 1575 	unsigned long int i_predot;//小数点前的数
// 1576 	unsigned long int i_afterdot;//小数点后的数
// 1577 	float f_afterdot;//实数型的小数部分
// 1578 
// 1579 	//判断是否为负数     
// 1580 	if(fNum < 0)
        MOV      R0,R11
        MOVS     R1,#+0
        BL       __aeabi_cfcmple
        BCS.N    ??Float_To_String_0
// 1581 	{
// 1582 		isnegative = 1;//设置负数标志
        MOVS     R9,#+1
// 1583 		fNum = 0 - fNum;//将负数变为正数
        EORS     R11,R11,#0x80000000
// 1584 	}
// 1585 
// 1586 	i_predot = (unsigned long int)fNum;//将小数点之前的数变为整数
??Float_To_String_0:
        MOV      R0,R11
        BL       __aeabi_f2uiz
        MOV      R10,R0
// 1587 	f_afterdot = fNum - i_predot;//单独取出小数点之后的数
        MOV      R0,R10
        BL       __aeabi_ui2f
        MOVS     R1,R0
        MOV      R0,R11
        BL       __aeabi_fsub
// 1588 	//根据设定的要保存的小数点后的位数，将小数点后相应的位数变到小数点之前
// 1589 	for(n = dotsize;n > 0;n--)
        MOVS     R7,R5
        B.N      ??Float_To_String_1
// 1590 	{
// 1591 	        f_afterdot = f_afterdot*10;
??Float_To_String_2:
        LDR.N    R1,??DataTable20_23  ;; 0x41200000
        BL       __aeabi_fmul
// 1592 	}
        SUBS     R7,R7,#+1
??Float_To_String_1:
        CMP      R7,#+1
        BGE.N    ??Float_To_String_2
// 1593 	i_afterdot = (unsigned long int)f_afterdot;//将小数点后相应位数的数字变为整数
        BL       __aeabi_f2uiz
// 1594 
// 1595 	//先将小数点后的数转换为字符串
// 1596 	n=dotsize;
        MOVS     R7,R5
        B.N      ??Float_To_String_3
// 1597 	while(i_afterdot > 0 |n > 0)
// 1598 	{
// 1599 		n--;
??Float_To_String_4:
        SUBS     R7,R7,#+1
// 1600 	 	str[iSize++] = i_afterdot % 10 + '0';//对10取余并变为ASCII码
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R1,R1,R2,R0
        ADDS     R1,R1,#+48
        STRB     R1,[R6, R4]
        ADDS     R6,R6,#+1
// 1601 	 	i_afterdot = i_afterdot / 10;//对10取商
        MOVS     R1,#+10
        UDIV     R0,R0,R1
// 1602 	}
??Float_To_String_3:
        CMP      R0,#+0
        BEQ.N    ??Float_To_String_5
        MOVS     R1,#+1
        B.N      ??Float_To_String_6
??Float_To_String_5:
        MOVS     R1,#+0
??Float_To_String_6:
        CMP      R7,#+1
        BLT.N    ??Float_To_String_7
        MOVS     R2,#+1
        B.N      ??Float_To_String_8
??Float_To_String_7:
        MOVS     R2,#+0
??Float_To_String_8:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        ORRS     R1,R2,R1
        CMP      R1,#+0
        BNE.N    ??Float_To_String_4
// 1603         if(dotsize==0)
        CMP      R5,#+0
        BNE.N    ??Float_To_String_9
// 1604         {
// 1605           str[iSize++] = ' ';//小数点是0的时候，用空格替代
        MOVS     R0,#+32
        STRB     R0,[R6, R4]
        ADDS     R6,R6,#+1
        B.N      ??Float_To_String_10
// 1606         }
// 1607         else
// 1608         {
// 1609 	str[iSize++] = '.';//加上小数点
??Float_To_String_9:
        MOVS     R0,#+46
        STRB     R0,[R6, R4]
        ADDS     R6,R6,#+1
// 1610         }
// 1611     //处理小数点前为0的情况。
// 1612 	if(i_predot == 0)
??Float_To_String_10:
        CMP      R10,#+0
        BNE.N    ??Float_To_String_11
// 1613 		str[iSize++] = '0';
        MOVS     R0,#+48
        STRB     R0,[R6, R4]
        ADDS     R6,R6,#+1
        B.N      ??Float_To_String_11
// 1614 	//再将小数点前的数转换为字符串
// 1615 	while(i_predot > 0)
// 1616 	{
// 1617 	 	str[iSize++] = i_predot%10 + '0';//对10取余并变为ASCII码
??Float_To_String_12:
        MOVS     R0,#+10
        UDIV     R1,R10,R0
        MLS      R0,R0,R1,R10
        ADDS     R0,R0,#+48
        STRB     R0,[R6, R4]
        ADDS     R6,R6,#+1
// 1618 	 	i_predot = i_predot / 10;//对10取商
        MOVS     R0,#+10
        UDIV     R10,R10,R0
// 1619 	}
??Float_To_String_11:
        CMP      R10,#+0
        BNE.N    ??Float_To_String_12
// 1620 
// 1621 	if(isnegative == 1)
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+1
        BNE.N    ??Float_To_String_13
// 1622 	str[iSize++] = '-';//如果是负数，则在最后加上负号
        MOVS     R0,#+45
        STRB     R0,[R6, R4]
        ADDS     R6,R6,#+1
// 1623 	str[iSize] = '\0';//加上字符串结束标志
??Float_To_String_13:
        MOVS     R0,#+0
        STRB     R0,[R6, R4]
// 1624 	
// 1625 	p = str + iSize - 1;//将P指针指向字符串结束标志之前
        ADDS     R0,R6,R4
        SUBS     R4,R0,#+1
        B.N      ??Float_To_String_14
// 1626 
// 1627 	for( ;p - s > 0;p--,s++)//将字符串中存储的数调头   
// 1628 	{   
// 1629 		*s^=*p;   
??Float_To_String_15:
        LDRB     R0,[R8, #+0]
        LDRB     R1,[R4, #+0]
        EORS     R0,R1,R0
        STRB     R0,[R8, #+0]
// 1630 		*p^=*s;   
        LDRB     R0,[R4, #+0]
        LDRB     R1,[R8, #+0]
        EORS     R0,R1,R0
        STRB     R0,[R4, #+0]
// 1631 		*s^=*p;   
        LDRB     R0,[R8, #+0]
        LDRB     R1,[R4, #+0]
        EORS     R0,R1,R0
        STRB     R0,[R8, #+0]
// 1632 	}   
        SUBS     R4,R4,#+1
        ADDS     R8,R8,#+1
??Float_To_String_14:
        SUBS     R0,R4,R8
        CMP      R0,#+1
        BGE.N    ??Float_To_String_15
// 1633 	// 返回指针字符串大小 
// 1634 	return iSize;
        MOVS     R0,R6
        POP      {R1,R4-R11,PC}   ;; return
// 1635 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable19:
        DC32     0x43fe1034
// 1636 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1637 void LCD_Write_Float(unsigned char x,unsigned char y,float Number)
// 1638 {
LCD_Write_Float:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
// 1639   signed char Temp_Buf[17];
// 1640   Float_To_String(Number,(uint8 *)Temp_Buf,3);
        MOVS     R2,#+3
        ADD      R1,SP,#+0
        BL       Float_To_String
// 1641   LCD_P6x8Str(x,y,(uint8 *)Temp_Buf);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P6x8Str
// 1642 }
        ADD      SP,SP,#+20
        POP      {R4,R5,PC}       ;; return
// 1643 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1644 void LCD_Write_Float_Dot(unsigned char x,unsigned char y,float Number,int dotNumber)
// 1645 {
LCD_Write_Float_Dot:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
        MOVS     R2,R3
// 1646   signed char Temp_Buf[17];
// 1647   Float_To_String(Number,(uint8 *)Temp_Buf,dotNumber);
        ADD      R1,SP,#+0
        BL       Float_To_String
// 1648   LCD_P6x8Str(x,y,(uint8 *)Temp_Buf);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P6x8Str
// 1649 }
        ADD      SP,SP,#+20
        POP      {R4,R5,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1650 void LCD_Write_Float_Dot_Chinese(unsigned char x,unsigned char y,float Number,int dotNumber)
// 1651 {
LCD_Write_Float_Dot_Chinese:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
        MOVS     R2,R3
// 1652   signed char Temp_Buf[17];
// 1653   Float_To_String(Number,(uint8 *)Temp_Buf,dotNumber);
        ADD      R1,SP,#+0
        BL       Float_To_String
// 1654   LCD_P8x16Str(x,y,(uint8 *)Temp_Buf);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P8x16Str
// 1655 }
        ADD      SP,SP,#+20
        POP      {R4,R5,PC}       ;; return
// 1656 //void Dis_String(unsigned char Position,signed char String[])
// 1657 //{
// 1658 //  switch(Position)
// 1659 //  {
// 1660 //    case 1:OLED_Write_String_7(2,8,String);break;	       
// 1661 //    case 2:OLED_Write_String_7(2,72,String);break;	       
// 1662 //    case 3:OLED_Write_String_7(4,8,String);break;	       
// 1663 //    case 4:OLED_Write_String_7(4,72,String);break;	       
// 1664 //    case 5:OLED_Write_String_7(6,8,String);break;	       
// 1665 //    case 6:OLED_Write_String_7(6,72,String);break;	 
// 1666 //    default:break;      
// 1667 //  }
// 1668 //}
// 1669 /*******************************************************************************
// 1670  函 数 名  : LCD_PaintTSL1401_Bulk
// 1671  功能描述  : 输出二值化图像
// 1672  输入参数  : BYTE y1  起始行
// 1673              BYTE y2  结束行
// 1674              BYTE data[]  二值化图像数组
// 1675  输出参数  : none
// 1676  返 回 值  : none
// 1677 *******************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1678 void LCD_PaintTSL1401_Bulk(byte y1,byte y2,byte data[])    //块状型
// 1679 {
LCD_PaintTSL1401_Bulk:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1680   byte y,x;
// 1681 	
// 1682 	for(y=y1;y<=y2;y++)
        B.N      ??LCD_PaintTSL1401_Bulk_0
??LCD_PaintTSL1401_Bulk_1:
        ADDS     R4,R4,#+1
??LCD_PaintTSL1401_Bulk_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R5,R4
        BCC.N    ??LCD_PaintTSL1401_Bulk_2
// 1683 	{
// 1684 		LCD_WrCmd(0xb0+y);
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
// 1685 		LCD_WrCmd(0x01);
        MOVS     R0,#+1
        BL       LCD_WrCmd
// 1686 		LCD_WrCmd(0x10);
        MOVS     R0,#+16
        BL       LCD_WrCmd
// 1687 		for(x=0;x<X_WIDTH;x++)
        MOVS     R7,#+0
        B.N      ??LCD_PaintTSL1401_Bulk_3
// 1688                   if(data[x]==0)
// 1689                     LCD_WrDat(0XFF);
// 1690                 else
// 1691                   LCD_WrDat(0X00);
??LCD_PaintTSL1401_Bulk_4:
        MOVS     R0,#+0
        BL       LCD_WrDat
??LCD_PaintTSL1401_Bulk_5:
        ADDS     R7,R7,#+1
??LCD_PaintTSL1401_Bulk_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+128
        BGE.N    ??LCD_PaintTSL1401_Bulk_1
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BNE.N    ??LCD_PaintTSL1401_Bulk_4
        MOVS     R0,#+255
        BL       LCD_WrDat
        B.N      ??LCD_PaintTSL1401_Bulk_5
// 1692 	}
// 1693 }
??LCD_PaintTSL1401_Bulk_2:
        POP      {R0,R4-R7,PC}    ;; return
// 1694 /*******************************************************************************
// 1695  函 数 名  : void LCD_PaintTSL1401_Line(byte data[],float avange);
// 1696  功能描述  : 输出全值图像
// 1697  输入参数  : BYTE data[]  原值图像数组
// 1698           : FLOAT avange 阈值
// 1699  输出参数  : none
// 1700  返 回 值  : none
// 1701 *******************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1702 void LCD_PaintTSL1401_Line(byte data[],float avange)    //函数型
// 1703 {
LCD_PaintTSL1401_Line:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
// 1704   LCD_CLS();
        BL       LCD_CLS
// 1705   byte temp;
// 1706 //  byte x,y;
// 1707 //  byte data1;
// 1708 //  for(x=0;x<X_WIDTH-1;x++)   //x轴
// 1709 //  {
// 1710 //    y=(64-(unsigned int)(data[x]*0.05));
// 1711 //    if(y>=64)
// 1712 //      y=64;
// 1713 //    if(y<=0)
// 1714 //      y=0;
// 1715 //    LCD_Set_Pos(x,y ); 
// 1716 //	data1 = 0x01<<(y%8); 	
// 1717 //	LCD_WrCmd(0xb0+(y>>3));
// 1718 //	LCD_WrCmd(((x&0xf0)>>4)|0x10);
// 1719 //	LCD_WrCmd((x&0x0f)|0x00);
// 1720 //	LCD_WrDat(data1);
// 1721 //  }
// 1722   for(int i=0;i<128;i++)
        MOVS     R5,#+0
        B.N      ??LCD_PaintTSL1401_Line_0
// 1723   {
// 1724     temp=data[i];
??LCD_PaintTSL1401_Line_1:
        LDRB     R0,[R5, R4]
// 1725     if(temp>=255)
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+255
        BNE.N    ??LCD_PaintTSL1401_Line_2
// 1726       temp=255ul;
        MOVS     R0,#+255
// 1727     if(data[i]<=0)
??LCD_PaintTSL1401_Line_2:
        LDRB     R1,[R5, R4]
        CMP      R1,#+0
        BNE.N    ??LCD_PaintTSL1401_Line_3
// 1728       temp=0;
        MOVS     R0,#+0
// 1729     temp=(int)(temp*0.165);
??LCD_PaintTSL1401_Line_3:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       __aeabi_ui2d
        LDR.N    R2,??DataTable20_24  ;; 0x51eb851f
        LDR.N    R3,??DataTable20_25  ;; 0x3fc51eb8
        BL       __aeabi_dmul
        BL       __aeabi_d2iz
// 1730     LCD_PutPixel(i,temp);
        MOVS     R1,R0
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_PutPixel
// 1731   }
        ADDS     R5,R5,#+1
??LCD_PaintTSL1401_Line_0:
        CMP      R5,#+128
        BLT.N    ??LCD_PaintTSL1401_Line_1
// 1732   Delay_temp(200);
        MOVS     R0,#+200
        BL       Delay_temp
// 1733 }
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_1:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_2:
        DC32     F14x16_Idx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_3:
        DC32     F14x16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_4:
        DC32     longqiu96x64

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_5:
        DC32     LIBLOGO60x58

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_6:
        DC32     ?_0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_7:
        DC32     str1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_8:
        DC32     str2

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_9:
        DC32     str3

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_10:
        DC32     str4

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_11:
        DC32     str5

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_12:
        DC32     str6

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_13:
        DC32     0x43fe102c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_14:
        DC32     0x43fe1040

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_15:
        DC32     0x43fe103c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_16:
        DC32     ??Temp_i

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_17:
        DC32     Temp_List

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_18:
        DC32     Change_To_Bit

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_19:
        DC32     0x40360000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_20:
        DC32     0x403a0000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_21:
        DC32     ??Temp_Count

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_22:
        DC32     0x41c80000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_23:
        DC32     0x41200000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_24:
        DC32     0x51eb851f

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_25:
        DC32     0x3fc51eb8

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 
//   196 bytes in section .bss
// 1 256 bytes in section .data
// 4 872 bytes in section .rodata
// 4 724 bytes in section .text
// 
// 4 724 bytes of CODE  memory
// 4 872 bytes of CONST memory
// 1 452 bytes of DATA  memory
//
//Errors: none
//Warnings: none
