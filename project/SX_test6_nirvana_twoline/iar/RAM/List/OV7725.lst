###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        22/Dec/2015  18:54:50
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\app\OV7725.c
#    Command line =  
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\app\OV7725.c
#        -D LPLD_K60 -D USE_K60D10 -lCN
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\RAM\List\
#        -lB
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\RAM\List\
#        -o
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\RAM\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\app\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\common\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\..\..\..\lib\USB\class\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\RAM\List\OV7725.lst
#    Object file  =  
#        C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\iar\RAM\Obj\OV7725.o
#
###############################################################################

C:\Users\a3910\Desktop\Freescale\K60_LPLD\LPLD_OSKinetis_V3\project\SX_test4\app\OV7725.c
      1          #include "include.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable9  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable9_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
      2          

   \                                 In section .data, align 1
      3          volatile IMG_STATUS_e      ov7725_eagle_img_flag = IMG_FINISH;   //图像状态
   \                     ov7725_eagle_img_flag:
   \   00000000   0x01               DC8 1
      4          

   \                                 In section .bss, align 4
      5          GPIO_InitTypeDef IO_init_struct;
   \                     IO_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      6          GPIO_InitTypeDef VSY_init_struct;
   \                     VSY_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      7          GPIO_InitTypeDef PCLK_init_struct;
   \                     PCLK_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      8          DMA_InitTypeDef DMA_init_struct;
   \                     DMA_init_struct:
   \   00000000                      DS8 44
      9          
     10          
     11          //场中断函数

   \                                 In section .text, align 2, keep-with-next
     12          void VSY_isr()
     13          { 
   \                     VSY_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     14            uint8  n = 0;    //引脚号
   \   00000004   0x2000             MOVS     R0,#+0
     15            uint32 flag = (PORTC->ISFR);
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable9_2  ;; 0x4004b0a0
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
     16            LPLD_GPIO_ClearIntFlag(PORTC);                  //清中断标志位
   \   0000000C   0xF05F 0x32FF      MOVS     R2,#-1
   \   00000010   0x.... 0x....      LDR.W    R3,??DataTable9_2  ;; 0x4004b0a0
   \   00000014   0x601A             STR      R2,[R3, #+0]
     17            n = 17;                                         //场中断
   \   00000016   0x2211             MOVS     R2,#+17
   \   00000018   0x0010             MOVS     R0,R2
     18            if(flag & (1 << n))  
   \   0000001A   0xFA31 0xF000      LSRS     R0,R1,R0
   \   0000001E   0x07C0             LSLS     R0,R0,#+31
   \   00000020   0xD52F             BPL.N    ??VSY_isr_0
     19            {
     20              
     21              //场中断需要判断是场结束还是场开始
     22              if(ov7725_eagle_img_flag == IMG_START)        //需要开始采集图像
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable9_3
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2804             CMP      R0,#+4
   \   0000002A   0xD123             BNE.N    ??VSY_isr_1
     23              {
     24                ov7725_eagle_img_flag = IMG_GATHER;         //标记图像采集中
   \   0000002C   0x2003             MOVS     R0,#+3
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable9_3
   \   00000032   0x7008             STRB     R0,[R1, #+0]
     25                disable_irq(PORTC_IRQn);
   \   00000034   0x2059             MOVS     R0,#+89
   \   00000036   0x.... 0x....      BL       NVIC_DisableIRQ
     26                
     27                PORTC->ISFR = 1 << 17;                      //清空PCLK标志位              
   \   0000003A   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable9_2  ;; 0x4004b0a0
   \   00000042   0x6008             STR      R0,[R1, #+0]
     28                LPLD_DMA_LoadDstAddr(DMA_CH0, Pix_Data);    //恢复地址
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable9_5  ;; 0x40009010
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     29                LPLD_DMA_EnableReq(DMA_CH0);                //使能通道CHn 硬件请求
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable9_6  ;; 0x4000800c
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable9_6  ;; 0x4000800c
   \   0000005C   0x6008             STR      R0,[R1, #+0]
     30                LPLD_DMA_EnableIrq(DMA_init_struct);        //开DMA结束中断
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable9_7
   \   00000062   0xB084             SUB      SP,SP,#+16
   \   00000064   0x4668             MOV      R0,SP
   \   00000066   0x222C             MOVS     R2,#+44
   \   00000068   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000006C   0xBC0F             POP      {R0-R3}
   \   0000006E   0x.... 0x....      BL       LPLD_DMA_EnableIrq
   \   00000072   0xE006             B.N      ??VSY_isr_0
     31              }
     32              else                                         //图像采集错误
     33              {
     34                disable_irq(PORTC_IRQn);                    //关闭PTA的中断
   \                     ??VSY_isr_1: (+1)
   \   00000074   0x2059             MOVS     R0,#+89
   \   00000076   0x.... 0x....      BL       NVIC_DisableIRQ
     35                ov7725_eagle_img_flag = IMG_FAIL;           //标记图像采集失败
   \   0000007A   0x2002             MOVS     R0,#+2
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable9_3
   \   00000080   0x7008             STRB     R0,[R1, #+0]
     36              }
     37            }
     38          }
   \                     ??VSY_isr_0: (+1)
   \   00000082   0xB007             ADD      SP,SP,#+28
   \   00000084   0xBD00             POP      {PC}             ;; return
     39          
     40          
     41          //DMA结束中断函数

   \                                 In section .text, align 2, keep-with-next
     42          void DMA_isr()
     43          {
   \                     DMA_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     44            ov7725_eagle_img_flag = IMG_FINISH ;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable9_3
   \   00000008   0x7008             STRB     R0,[R1, #+0]
     45            DMA0->INT |= 0x1u<<0;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable9_8  ;; 0x40008024
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable9_8  ;; 0x40008024
   \   00000018   0x6008             STR      R0,[R1, #+0]
     46            img_extract(*Img,(unsigned char*)Pix_Data,600);
   \   0000001A   0xF44F 0x7216      MOV      R2,#+600
   \   0000001E   0x....             LDR.N    R1,??DataTable9_4
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable9_9
   \   00000024   0x.... 0x....      BL       img_extract
     47            
     48            
     49            steering_control();
   \   00000028   0x.... 0x....      BL       steering_control
     50            
     51          }
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
     52          
     53          
     54          //采集函数

   \                                 In section .text, align 2, keep-with-next
     55          void get_img()
     56          {
   \                     get_img: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     57            ov7725_eagle_img_flag = IMG_START;               //开始采集图像
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x....             LDR.N    R1,??DataTable9_3
   \   00000006   0x7008             STRB     R0,[R1, #+0]
     58            LPLD_GPIO_ClearIntFlag(PORTC);                   //写1清中断标志位(必须的，不然回导致一开中断就马上触发中断)
   \   00000008   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000000C   0x....             LDR.N    R1,??DataTable9_2  ;; 0x4004b0a0
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     59            enable_irq(PORTC_IRQn);                          //允许PTC的中断
   \   00000010   0x2059             MOVS     R0,#+89
   \   00000012   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000016   0xE00D             B.N      ??get_img_0
     60            while(ov7725_eagle_img_flag != IMG_FINISH)      //等待图像采集完毕
     61            {
     62              if(ov7725_eagle_img_flag == IMG_FAIL)         //假如图像采集错误，则重新开始采集
   \                     ??get_img_1: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable9_3
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2802             CMP      R0,#+2
   \   0000001E   0xD109             BNE.N    ??get_img_0
     63              {
     64                ov7725_eagle_img_flag = IMG_START;          //开始采集图像
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x....             LDR.N    R1,??DataTable9_3
   \   00000024   0x7008             STRB     R0,[R1, #+0]
     65                LPLD_GPIO_ClearIntFlag(PORTC);              //写1清中断标志位(必须的，不然回导致一开中断就马上触发中断)
   \   00000026   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000002A   0x....             LDR.N    R1,??DataTable9_2  ;; 0x4004b0a0
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     66                enable_irq(PORTC_IRQn);                     //允许PTA的中断
   \   0000002E   0x2059             MOVS     R0,#+89
   \   00000030   0x.... 0x....      BL       NVIC_EnableIRQ
     67              }
     68            }
   \                     ??get_img_0: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable9_3
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD1ED             BNE.N    ??get_img_1
     69          }
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
     70          
     71          
     72          

   \                                 In section .text, align 2, keep-with-next
     73          void IO_init()
     74          {
   \                     IO_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     75            //OV数据口初始化：PTD0~PTD7
     76            IO_init_struct.GPIO_PTx = PTD;
   \   00000002   0x....             LDR.N    R0,??DataTable9_10  ;; 0x400ff0c0
   \   00000004   0x....             LDR.N    R1,??DataTable9_11
   \   00000006   0x6008             STR      R0,[R1, #+0]
     77            IO_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable9_11
   \   0000000C   0x7308             STRB     R0,[R1, #+12]
     78            IO_init_struct.GPIO_Pins = GPIO_Pin0_7;
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0x....             LDR.N    R1,??DataTable9_11
   \   00000012   0x6048             STR      R0,[R1, #+4]
     79            IO_init_struct.GPIO_PinControl = IRQC_DIS | INPUT_PULL_DIS;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable9_11
   \   00000018   0x6088             STR      R0,[R1, #+8]
     80            LPLD_GPIO_Init(IO_init_struct);
   \   0000001A   0x....             LDR.N    R1,??DataTable9_11
   \   0000001C   0xB084             SUB      SP,SP,#+16
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x2214             MOVS     R2,#+20
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000026   0xBC0F             POP      {R0-R3}
   \   00000028   0x.... 0x....      BL       LPLD_GPIO_Init
     81          }
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
     82          

   \                                 In section .text, align 2, keep-with-next
     83          void VSY_init()
     84          {
   \                     VSY_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     85            VSY_init_struct.GPIO_PTx = PTC;
   \   00000002   0x....             LDR.N    R0,??DataTable9_12  ;; 0x400ff080
   \   00000004   0x....             LDR.N    R1,??DataTable9_13
   \   00000006   0x6008             STR      R0,[R1, #+0]
     86            VSY_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable9_13
   \   0000000C   0x7308             STRB     R0,[R1, #+12]
     87            VSY_init_struct.GPIO_Pins = GPIO_Pin18;
   \   0000000E   0xF45F 0x2080      MOVS     R0,#+262144
   \   00000012   0x....             LDR.N    R1,??DataTable9_13
   \   00000014   0x6048             STR      R0,[R1, #+4]
     88            VSY_init_struct.GPIO_PinControl = IRQC_RI|INPUT_PULL_UP|INPUT_PF_EN;
   \   00000016   0x....             LDR.N    R0,??DataTable9_14  ;; 0x90013
   \   00000018   0x....             LDR.N    R1,??DataTable9_13
   \   0000001A   0x6088             STR      R0,[R1, #+8]
     89            VSY_init_struct.GPIO_Isr = VSY_isr;
   \   0000001C   0x....             LDR.N    R0,??DataTable9_15
   \   0000001E   0x....             LDR.N    R1,??DataTable9_13
   \   00000020   0x6108             STR      R0,[R1, #+16]
     90            LPLD_GPIO_Init(VSY_init_struct); 
   \   00000022   0x....             LDR.N    R1,??DataTable9_13
   \   00000024   0xB084             SUB      SP,SP,#+16
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x2214             MOVS     R2,#+20
   \   0000002A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002E   0xBC0F             POP      {R0-R3}
   \   00000030   0x.... 0x....      BL       LPLD_GPIO_Init
     91          }
   \   00000034   0xBD01             POP      {R0,PC}          ;; return
     92          

   \                                 In section .text, align 2, keep-with-next
     93          void PCLK_init()
     94          {
   \                     PCLK_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     95            PCLK_init_struct.GPIO_PTx = PTC;
   \   00000002   0x....             LDR.N    R0,??DataTable9_12  ;; 0x400ff080
   \   00000004   0x....             LDR.N    R1,??DataTable9_16
   \   00000006   0x6008             STR      R0,[R1, #+0]
     96            PCLK_init_struct.GPIO_Pins = GPIO_Pin17;
   \   00000008   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000000C   0x....             LDR.N    R1,??DataTable9_16
   \   0000000E   0x6048             STR      R0,[R1, #+4]
     97            PCLK_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable9_16
   \   00000014   0x7308             STRB     R0,[R1, #+12]
     98            PCLK_init_struct.GPIO_PinControl = IRQC_DMAFA | INPUT_PULL_UP;
   \   00000016   0x....             LDR.N    R0,??DataTable9_17  ;; 0x20003
   \   00000018   0x....             LDR.N    R1,??DataTable9_16
   \   0000001A   0x6088             STR      R0,[R1, #+8]
     99            LPLD_GPIO_Init(PCLK_init_struct); 
   \   0000001C   0x....             LDR.N    R1,??DataTable9_16
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_GPIO_Init
    100          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
    101          

   \                                 In section .text, align 2, keep-with-next
    102          void DMA_init()
    103          {
   \                     DMA_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    104            //DMA参数配置
    105            DMA_init_struct.DMA_CHx = DMA_CH0;        //CH0通道
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable9_7
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    106            DMA_init_struct.DMA_Req = PORTC_DMAREQ;   //PORTC为请求源
   \   0000000A   0x2033             MOVS     R0,#+51
   \   0000000C   0x....             LDR.N    R1,??DataTable9_7
   \   0000000E   0x7048             STRB     R0,[R1, #+1]
    107            DMA_init_struct.DMA_MajorLoopCnt = 600;   //主循环计数值：采集数
   \   00000010   0xF44F 0x7016      MOV      R0,#+600
   \   00000014   0x....             LDR.N    R1,??DataTable9_7
   \   00000016   0x8088             STRH     R0,[R1, #+4]
    108            DMA_init_struct.DMA_MinorByteCnt = 1;     //次循环字节计数：每次读入1字节
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR.N    R1,??DataTable9_7
   \   0000001C   0x6088             STR      R0,[R1, #+8]
    109            DMA_init_struct.DMA_SourceAddr = (uint32_t)&PTD->PDIR;//源地址：PTD0~7
   \   0000001E   0x....             LDR.N    R0,??DataTable9_18  ;; 0x400ff0d0
   \   00000020   0x....             LDR.N    R1,??DataTable9_7
   \   00000022   0x60C8             STR      R0,[R1, #+12]
    110            DMA_init_struct.DMA_DestAddr = (uint32)Pix_Data;      //目的地址：存放图像的数组
   \   00000024   0x....             LDR.N    R0,??DataTable9_4
   \   00000026   0x....             LDR.N    R1,??DataTable9_7
   \   00000028   0x6188             STR      R0,[R1, #+24]
    111            DMA_init_struct.DMA_DestAddrOffset = 1;   //目的地址偏移：每次读入增加1
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x....             LDR.N    R1,??DataTable9_7
   \   0000002E   0x83C8             STRH     R0,[R1, #+30]
    112            DMA_init_struct.DMA_MajorCompleteIntEnable = TRUE;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x....             LDR.N    R1,??DataTable9_7
   \   00000034   0xF881 0x0025      STRB     R0,[R1, #+37]
    113            DMA_init_struct.DMA_Isr = DMA_isr;
   \   00000038   0x....             LDR.N    R0,??DataTable9_19
   \   0000003A   0x....             LDR.N    R1,??DataTable9_7
   \   0000003C   0x6288             STR      R0,[R1, #+40]
    114            DMA_init_struct.DMA_AutoDisableReq = TRUE;//自动禁用请求
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x....             LDR.N    R1,??DataTable9_7
   \   00000042   0xF881 0x0024      STRB     R0,[R1, #+36]
    115            //初始化DMA
    116            LPLD_DMA_Init(DMA_init_struct);
   \   00000046   0x....             LDR.N    R1,??DataTable9_7
   \   00000048   0xB084             SUB      SP,SP,#+16
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x222C             MOVS     R2,#+44
   \   0000004E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000052   0xBC0F             POP      {R0-R3}
   \   00000054   0x.... 0x....      BL       LPLD_DMA_Init
    117          }
   \   00000058   0xB007             ADD      SP,SP,#+28
   \   0000005A   0xBD00             POP      {PC}             ;; return
    118          
    119          //ov7725初始化函数

   \                                 In section .text, align 2, keep-with-next
    120          void ov7725_init(void)
    121          {
   \                     ov7725_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    122            SCCB_GPIO_init();
   \   00000002   0x.... 0x....      BL       SCCB_GPIO_init
    123            delay();
   \   00000006   0x.... 0x....      BL       delay
    124            SCCB_WriteByte(OV7725_COM7,0x80);//复位
   \   0000000A   0x2180             MOVS     R1,#+128
   \   0000000C   0x2012             MOVS     R0,#+18
   \   0000000E   0x.... 0x....      BL       SCCB_WriteByte
    125            delay();
   \   00000012   0x.... 0x....      BL       delay
    126            SCCB_WriteByte(OV7725_COM4,0x81); //150帧:0xC1,112帧:0x81,75帧:0x41,50帧:0xC1
   \   00000016   0x2181             MOVS     R1,#+129
   \   00000018   0x200D             MOVS     R0,#+13
   \   0000001A   0x.... 0x....      BL       SCCB_WriteByte
    127            SCCB_WriteByte(OV7725_CLKRC,0x00);//150帧:0x00,112帧:0x00,75帧:0x00,50帧:0x02
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x2011             MOVS     R0,#+17
   \   00000022   0x.... 0x....      BL       SCCB_WriteByte
    128            SCCB_WriteByte(OV7725_COM2,0x03);
   \   00000026   0x2103             MOVS     R1,#+3
   \   00000028   0x2009             MOVS     R0,#+9
   \   0000002A   0x.... 0x....      BL       SCCB_WriteByte
    129            SCCB_WriteByte(OV7725_COM3,0xD0);//50
   \   0000002E   0x21D0             MOVS     R1,#+208
   \   00000030   0x200C             MOVS     R0,#+12
   \   00000032   0x.... 0x....      BL       SCCB_WriteByte
    130            SCCB_WriteByte(OV7725_COM7,0x40);
   \   00000036   0x2140             MOVS     R1,#+64
   \   00000038   0x2012             MOVS     R0,#+18
   \   0000003A   0x.... 0x....      BL       SCCB_WriteByte
    131            SCCB_WriteByte(OV7725_HSTART,0x3F);
   \   0000003E   0x213F             MOVS     R1,#+63
   \   00000040   0x2017             MOVS     R0,#+23
   \   00000042   0x.... 0x....      BL       SCCB_WriteByte
    132            SCCB_WriteByte(OV7725_HSIZE,0x50);
   \   00000046   0x2150             MOVS     R1,#+80
   \   00000048   0x2018             MOVS     R0,#+24
   \   0000004A   0x.... 0x....      BL       SCCB_WriteByte
    133            SCCB_WriteByte(OV7725_VSTRT,0x03);
   \   0000004E   0x2103             MOVS     R1,#+3
   \   00000050   0x2019             MOVS     R0,#+25
   \   00000052   0x.... 0x....      BL       SCCB_WriteByte
    134            SCCB_WriteByte(OV7725_VSIZE,0x78);
   \   00000056   0x2178             MOVS     R1,#+120
   \   00000058   0x201A             MOVS     R0,#+26
   \   0000005A   0x.... 0x....      BL       SCCB_WriteByte
    135            SCCB_WriteByte(OV7725_HREF,0x00);
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x2032             MOVS     R0,#+50
   \   00000062   0x.... 0x....      BL       SCCB_WriteByte
    136            SCCB_WriteByte(OV7725_SCAL0,0x0A);
   \   00000066   0x210A             MOVS     R1,#+10
   \   00000068   0x20A0             MOVS     R0,#+160
   \   0000006A   0x.... 0x....      BL       SCCB_WriteByte
    137            SCCB_WriteByte(OV7725_AWB_Ctrl0,0xE0);
   \   0000006E   0x21E0             MOVS     R1,#+224
   \   00000070   0x2063             MOVS     R0,#+99
   \   00000072   0x.... 0x....      BL       SCCB_WriteByte
    138            SCCB_WriteByte(OV7725_DSPAuto,0xff);
   \   00000076   0x21FF             MOVS     R1,#+255
   \   00000078   0x20AC             MOVS     R0,#+172
   \   0000007A   0x.... 0x....      BL       SCCB_WriteByte
    139            SCCB_WriteByte(OV7725_DSP_Ctrl2,0x0C);
   \   0000007E   0x210C             MOVS     R1,#+12
   \   00000080   0x2065             MOVS     R0,#+101
   \   00000082   0x.... 0x....      BL       SCCB_WriteByte
    140            SCCB_WriteByte(OV7725_DSP_Ctrl3,0x00);
   \   00000086   0x2100             MOVS     R1,#+0
   \   00000088   0x2066             MOVS     R0,#+102
   \   0000008A   0x.... 0x....      BL       SCCB_WriteByte
    141            SCCB_WriteByte(OV7725_DSP_Ctrl4,0x00);
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x2067             MOVS     R0,#+103
   \   00000092   0x.... 0x....      BL       SCCB_WriteByte
    142            SCCB_WriteByte(OV7725_HOutSize,0x14);//80
   \   00000096   0x2114             MOVS     R1,#+20
   \   00000098   0x2029             MOVS     R0,#+41
   \   0000009A   0x.... 0x....      BL       SCCB_WriteByte
    143            SCCB_WriteByte(OV7725_VOutSize,0x1E);//60 
   \   0000009E   0x211E             MOVS     R1,#+30
   \   000000A0   0x202C             MOVS     R0,#+44
   \   000000A2   0x.... 0x....      BL       SCCB_WriteByte
    144            SCCB_WriteByte(OV7725_EXHCH,0x00);
   \   000000A6   0x2100             MOVS     R1,#+0
   \   000000A8   0x202A             MOVS     R0,#+42
   \   000000AA   0x.... 0x....      BL       SCCB_WriteByte
    145            SCCB_WriteByte(OV7725_GAM1,0x0c);
   \   000000AE   0x210C             MOVS     R1,#+12
   \   000000B0   0x207E             MOVS     R0,#+126
   \   000000B2   0x.... 0x....      BL       SCCB_WriteByte
    146            SCCB_WriteByte(OV7725_GAM2,0x16);
   \   000000B6   0x2116             MOVS     R1,#+22
   \   000000B8   0x207F             MOVS     R0,#+127
   \   000000BA   0x.... 0x....      BL       SCCB_WriteByte
    147            SCCB_WriteByte(OV7725_GAM3,0x2a);
   \   000000BE   0x212A             MOVS     R1,#+42
   \   000000C0   0x2080             MOVS     R0,#+128
   \   000000C2   0x.... 0x....      BL       SCCB_WriteByte
    148            SCCB_WriteByte(OV7725_GAM4,0x4e);
   \   000000C6   0x214E             MOVS     R1,#+78
   \   000000C8   0x2081             MOVS     R0,#+129
   \   000000CA   0x.... 0x....      BL       SCCB_WriteByte
    149            SCCB_WriteByte(OV7725_GAM5,0x61);
   \   000000CE   0x2161             MOVS     R1,#+97
   \   000000D0   0x2082             MOVS     R0,#+130
   \   000000D2   0x.... 0x....      BL       SCCB_WriteByte
    150            SCCB_WriteByte(OV7725_GAM6,0x6f);
   \   000000D6   0x216F             MOVS     R1,#+111
   \   000000D8   0x2083             MOVS     R0,#+131
   \   000000DA   0x.... 0x....      BL       SCCB_WriteByte
    151            SCCB_WriteByte(OV7725_GAM7,0x7b);
   \   000000DE   0x217B             MOVS     R1,#+123
   \   000000E0   0x2084             MOVS     R0,#+132
   \   000000E2   0x.... 0x....      BL       SCCB_WriteByte
    152            SCCB_WriteByte(OV7725_GAM8,0x86);
   \   000000E6   0x2186             MOVS     R1,#+134
   \   000000E8   0x2085             MOVS     R0,#+133
   \   000000EA   0x.... 0x....      BL       SCCB_WriteByte
    153            SCCB_WriteByte(OV7725_GAM9,0x8e);
   \   000000EE   0x218E             MOVS     R1,#+142
   \   000000F0   0x2086             MOVS     R0,#+134
   \   000000F2   0x.... 0x....      BL       SCCB_WriteByte
    154            SCCB_WriteByte(OV7725_GAM10,0x97);
   \   000000F6   0x2197             MOVS     R1,#+151
   \   000000F8   0x2087             MOVS     R0,#+135
   \   000000FA   0x.... 0x....      BL       SCCB_WriteByte
    155            SCCB_WriteByte(OV7725_GAM11,0xa4);
   \   000000FE   0x21A4             MOVS     R1,#+164
   \   00000100   0x2088             MOVS     R0,#+136
   \   00000102   0x.... 0x....      BL       SCCB_WriteByte
    156            SCCB_WriteByte(OV7725_GAM12,0xaf);
   \   00000106   0x21AF             MOVS     R1,#+175
   \   00000108   0x2089             MOVS     R0,#+137
   \   0000010A   0x.... 0x....      BL       SCCB_WriteByte
    157            SCCB_WriteByte(OV7725_GAM13,0xc5);
   \   0000010E   0x21C5             MOVS     R1,#+197
   \   00000110   0x208A             MOVS     R0,#+138
   \   00000112   0x.... 0x....      BL       SCCB_WriteByte
    158            SCCB_WriteByte(OV7725_GAM14,0xd7);
   \   00000116   0x21D7             MOVS     R1,#+215
   \   00000118   0x208B             MOVS     R0,#+139
   \   0000011A   0x.... 0x....      BL       SCCB_WriteByte
    159            SCCB_WriteByte(OV7725_GAM15,0xe8);
   \   0000011E   0x21E8             MOVS     R1,#+232
   \   00000120   0x208C             MOVS     R0,#+140
   \   00000122   0x.... 0x....      BL       SCCB_WriteByte
    160            SCCB_WriteByte(OV7725_SLOP,0x20);
   \   00000126   0x2120             MOVS     R1,#+32
   \   00000128   0x208D             MOVS     R0,#+141
   \   0000012A   0x.... 0x....      BL       SCCB_WriteByte
    161            SCCB_WriteByte(OV7725_LC_RADI,0x00);
   \   0000012E   0x2100             MOVS     R1,#+0
   \   00000130   0x204A             MOVS     R0,#+74
   \   00000132   0x.... 0x....      BL       SCCB_WriteByte
    162            SCCB_WriteByte(OV7725_LC_COEF,0x13);
   \   00000136   0x2113             MOVS     R1,#+19
   \   00000138   0x2049             MOVS     R0,#+73
   \   0000013A   0x.... 0x....      BL       SCCB_WriteByte
    163            SCCB_WriteByte(OV7725_LC_XC,0x08);
   \   0000013E   0x2108             MOVS     R1,#+8
   \   00000140   0x2047             MOVS     R0,#+71
   \   00000142   0x.... 0x....      BL       SCCB_WriteByte
    164            SCCB_WriteByte(OV7725_LC_COEFB,0x14);
   \   00000146   0x2114             MOVS     R1,#+20
   \   00000148   0x204B             MOVS     R0,#+75
   \   0000014A   0x.... 0x....      BL       SCCB_WriteByte
    165            SCCB_WriteByte(OV7725_LC_COEFR,0x17);
   \   0000014E   0x2117             MOVS     R1,#+23
   \   00000150   0x204C             MOVS     R0,#+76
   \   00000152   0x.... 0x....      BL       SCCB_WriteByte
    166            SCCB_WriteByte(OV7725_LC_CTR,0x05);
   \   00000156   0x2105             MOVS     R1,#+5
   \   00000158   0x2046             MOVS     R0,#+70
   \   0000015A   0x.... 0x....      BL       SCCB_WriteByte
    167            SCCB_WriteByte(OV7725_BDBase,0x99);
   \   0000015E   0x2199             MOVS     R1,#+153
   \   00000160   0x2022             MOVS     R0,#+34
   \   00000162   0x.... 0x....      BL       SCCB_WriteByte
    168            SCCB_WriteByte(OV7725_BDMStep,0x03);
   \   00000166   0x2103             MOVS     R1,#+3
   \   00000168   0x2023             MOVS     R0,#+35
   \   0000016A   0x.... 0x....      BL       SCCB_WriteByte
    169            SCCB_WriteByte(OV7725_SDE,0x04);
   \   0000016E   0x2104             MOVS     R1,#+4
   \   00000170   0x20A6             MOVS     R0,#+166
   \   00000172   0x.... 0x....      BL       SCCB_WriteByte
    170            SCCB_WriteByte(OV7725_BRIGHT,0x8a); //亮度值补偿
   \   00000176   0x218A             MOVS     R1,#+138
   \   00000178   0x209B             MOVS     R0,#+155
   \   0000017A   0x.... 0x....      BL       SCCB_WriteByte
    171            SCCB_WriteByte(OV7725_CNST,0xA0);//阈值调整(0~255)//0xA0
   \   0000017E   0x21A0             MOVS     R1,#+160
   \   00000180   0x209C             MOVS     R0,#+156
   \   00000182   0x.... 0x....      BL       SCCB_WriteByte
    172            SCCB_WriteByte(OV7725_SIGN,0x0E);//0x06  BRIGHT为正       0x0E    BRIGHT为负
   \   00000186   0x210E             MOVS     R1,#+14
   \   00000188   0x20AB             MOVS     R0,#+171
   \   0000018A   0x.... 0x....      BL       SCCB_WriteByte
    173            SCCB_WriteByte(OV7725_UVADJ0,0x11);
   \   0000018E   0x2111             MOVS     R1,#+17
   \   00000190   0x209E             MOVS     R0,#+158
   \   00000192   0x.... 0x....      BL       SCCB_WriteByte
    174            SCCB_WriteByte(OV7725_UVADJ1,0x02);
   \   00000196   0x2102             MOVS     R1,#+2
   \   00000198   0x209F             MOVS     R0,#+159
   \   0000019A   0x.... 0x....      BL       SCCB_WriteByte
    175          }
   \   0000019E   0xBD01             POP      {R0,PC}          ;; return
    176          
    177          
    178          /*!
    179           *  @brief      二值化图像解压（空间 换 时间 解压）
    180           *  @param      dst             图像解压目的地址
    181           *  @param      src             图像解压源地址
    182           *  @param      srclen          二值化图像的占用空间大小
    183           *  @since      v5.0            img_extract(img, imgbuff,CAMERA_SIZE);
    184           *  Sample usage:
    185           */

   \                                 In section .text, align 2, keep-with-next
    186          void img_extract(uint8 *dst, uint8 *src, uint32 srclen)
    187          {
   \                     img_extract: (+1)
   \   00000000   0xB438             PUSH     {R3-R5}
    188              uint8 colour[2] = {255, 0}; //0 和 1 分别对应的颜色
   \   00000002   0x....             LDR.N    R3,??DataTable9_20
   \   00000004   0x881B             LDRH     R3,[R3, #+0]
   \   00000006   0xF8AD 0x3000      STRH     R3,[SP, #+0]
   \   0000000A   0xE038             B.N      ??img_extract_0
    189              //注： 0 表示 白色，1表示 黑色
    190              uint8 tmpsrc;
    191              while(srclen --)
    192              {
    193                  tmpsrc = *src++;
   \                     ??img_extract_1: (+1)
   \   0000000C   0x780B             LDRB     R3,[R1, #+0]
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
    194                  *dst++ = colour[ (tmpsrc >> 7 ) & 0x01 ];
   \   00000010   0xAC00             ADD      R4,SP,#+0
   \   00000012   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000014   0x11DD             ASRS     R5,R3,#+7
   \   00000016   0x5D2C             LDRB     R4,[R5, R4]
   \   00000018   0x7004             STRB     R4,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
    195                  *dst++ = colour[ (tmpsrc >> 6 ) & 0x01 ];
   \   0000001C   0xAC00             ADD      R4,SP,#+0
   \   0000001E   0xF3C3 0x1580      UBFX     R5,R3,#+6,#+1
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x5D2C             LDRB     R4,[R5, R4]
   \   00000026   0x7004             STRB     R4,[R0, #+0]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
    196                  *dst++ = colour[ (tmpsrc >> 5 ) & 0x01 ];
   \   0000002A   0xAC00             ADD      R4,SP,#+0
   \   0000002C   0xF3C3 0x1540      UBFX     R5,R3,#+5,#+1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x5D2C             LDRB     R4,[R5, R4]
   \   00000034   0x7004             STRB     R4,[R0, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
    197                  *dst++ = colour[ (tmpsrc >> 4 ) & 0x01 ];
   \   00000038   0xAC00             ADD      R4,SP,#+0
   \   0000003A   0xF3C3 0x1500      UBFX     R5,R3,#+4,#+1
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x5D2C             LDRB     R4,[R5, R4]
   \   00000042   0x7004             STRB     R4,[R0, #+0]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
    198                  *dst++ = colour[ (tmpsrc >> 3 ) & 0x01 ];
   \   00000046   0xAC00             ADD      R4,SP,#+0
   \   00000048   0xF3C3 0x05C0      UBFX     R5,R3,#+3,#+1
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x5D2C             LDRB     R4,[R5, R4]
   \   00000050   0x7004             STRB     R4,[R0, #+0]
   \   00000052   0x1C40             ADDS     R0,R0,#+1
    199                  *dst++ = colour[ (tmpsrc >> 2 ) & 0x01 ];
   \   00000054   0xAC00             ADD      R4,SP,#+0
   \   00000056   0xF3C3 0x0580      UBFX     R5,R3,#+2,#+1
   \   0000005A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005C   0x5D2C             LDRB     R4,[R5, R4]
   \   0000005E   0x7004             STRB     R4,[R0, #+0]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
    200                  *dst++ = colour[ (tmpsrc >> 1 ) & 0x01 ];
   \   00000062   0xAC00             ADD      R4,SP,#+0
   \   00000064   0xF3C3 0x0540      UBFX     R5,R3,#+1,#+1
   \   00000068   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006A   0x5D2C             LDRB     R4,[R5, R4]
   \   0000006C   0x7004             STRB     R4,[R0, #+0]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
    201                  *dst++ = colour[ (tmpsrc >> 0 ) & 0x01 ];
   \   00000070   0xAC00             ADD      R4,SP,#+0
   \   00000072   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000074   0xF013 0x0301      ANDS     R3,R3,#0x1
   \   00000078   0x5D1B             LDRB     R3,[R3, R4]
   \   0000007A   0x7003             STRB     R3,[R0, #+0]
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
    202              }
   \                     ??img_extract_0: (+1)
   \   0000007E   0x0013             MOVS     R3,R2
   \   00000080   0x1E5A             SUBS     R2,R3,#+1
   \   00000082   0x2B00             CMP      R3,#+0
   \   00000084   0xD1C2             BNE.N    ??img_extract_1
    203          }
   \   00000086   0xBC31             POP      {R0,R4,R5}
   \   00000088   0x4770             BX       LR               ;; return
    204          
    205          /*
    206           * 延时一段时间
    207           */

   \                                 In section .text, align 4, keep-with-next
    208          void delay()
    209          {
    210            uint16 i, n;
    211            for(i=0;i<20000;i++)
   \                     delay: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE005             B.N      ??delay_0
    212            {
    213              for(n=0;n<100;n++)
    214              {
    215                asm("nop");
   \                     ??delay_1: (+1)
   \   00000004   0xBF00             nop
    216              }
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??delay_2: (+1)
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x2964             CMP      R1,#+100
   \   0000000C   0xDBFA             BLT.N    ??delay_1
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??delay_0: (+1)
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xF644 0x6120      MOVW     R1,#+20000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xDA01             BGE.N    ??delay_3
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xE7F4             B.N      ??delay_2
    217            }
    218          }
   \                     ??delay_3: (+1)
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x4004B0A0         DC32     0x4004b0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     ov7725_eagle_img_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     Pix_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x40009010         DC32     0x40009010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     DMA_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x40008024         DC32     0x40008024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     Img

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     IO_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \   00000000   0x........         DC32     VSY_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \   00000000   0x00090013         DC32     0x90013

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_15:
   \   00000000   0x........         DC32     VSY_isr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_16:
   \   00000000   0x........         DC32     PCLK_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_17:
   \   00000000   0x00020003         DC32     0x20003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_18:
   \   00000000   0x400FF0D0         DC32     0x400ff0d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_19:
   \   00000000   0x........         DC32     DMA_isr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_20:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 2
   \                     ?_0:
   \   00000000   0xFF 0x00          DC8 255, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   DMA_init
        32   -> LPLD_DMA_Init
        48   -> __aeabi_memcpy4
       8   DMA_isr
         8   -> img_extract
         8   -> steering_control
      24   IO_init
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
      24   PCLK_init
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4
      24   VSY_init
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4
      48   VSY_isr
        32   -> LPLD_DMA_EnableIrq
        32   -> NVIC_DisableIRQ
        48   -> __aeabi_memcpy4
       0   delay
       8   get_img
         8   -> NVIC_EnableIRQ
      12   img_extract
       8   ov7725_init
         8   -> SCCB_GPIO_init
         8   -> SCCB_WriteByte
         8   -> delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_16
       4  ??DataTable9_17
       4  ??DataTable9_18
       4  ??DataTable9_19
       4  ??DataTable9_2
       4  ??DataTable9_20
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
       2  ?_0
      92  DMA_init
      44  DMA_init_struct
      46  DMA_isr
      46  IO_init
      20  IO_init_struct
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ
      48  PCLK_init
      20  PCLK_init_struct
      54  VSY_init
      20  VSY_init_struct
     134  VSY_isr
      32  delay
      62  get_img
     138  img_extract
       1  ov7725_eagle_img_flag
     416  ov7725_init

 
   104 bytes in section .bss
     1 byte  in section .data
     2 bytes in section .rodata
 1 196 bytes in section .text
 
 1 196 bytes of CODE  memory
     2 bytes of CONST memory
   105 bytes of DATA  memory

Errors: none
Warnings: none
