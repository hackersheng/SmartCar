###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        17/Jul/2016  20:40:42
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\whstarlit\Desktop\Smart_Car\lib\common\CameraScan.c
#    Command line =  
#        C:\Users\whstarlit\Desktop\Smart_Car\lib\common\CameraScan.c -D
#        LPLD_K60 -D USE_K60D10 -lCN
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\List\ -lB
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\List\ -o
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\app\ -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\common\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\..\..\..\lib\USB\class\
#        -I C:\Users\whstarlit\Desktop\Smart_Car\lib\ -Ol -I
#        D:\IAR\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\List\CameraScan.lst
#    Object file  =  
#        C:\Users\whstarlit\Desktop\Smart_Car\project\Test\iar\FLASH\Obj\CameraScan.o
#
###############################################################################

C:\Users\whstarlit\Desktop\Smart_Car\lib\common\CameraScan.c
      1          #include "CameraScan.h"
      2          #include "include.h"
      3          

   \                                 In section .text, align 2, keep-with-next
      4          void handleImg()
      5          {
   \                     handleImg: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      6            lostSide = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable9
   \   00000008   0x6008             STR      R0,[R1, #+0]
      7            runwayType = identifyRunway();
   \   0000000A   0x.... 0x....      BL       identifyRunway
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   00000012   0x6008             STR      R0,[R1, #+0]
      8            if (crossFlag == 1)
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable10
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xD107             BNE.N    ??handleImg_0
      9            {
     10              if (isOutCross() == 1)
   \   0000001E   0x.... 0x....      BL       isOutCross
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD103             BNE.N    ??handleImg_0
     11              {
     12                crossFlag = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable10
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     13              }
     14          //    else
     15          //    {
     16                //int t = absMid - midDot[Line2];
     17                //黑点数过多，或判断为直十字
     18          //      if (runwayType == 0 || countBlack[Line2] >= 60 || countBlack[Line3] >= 60)
     19          //      {
     20          //        angle = midAngle;
     21          //      }
     22          //      else
     23          //      {
     24          //        //预判行的偏差量
     25          //        angle = midAngle + t * 5;
     26          //      }
     27          //      if (leftDot[Line3] == 0 || rightDot[Line3] == MAX_COL-1)
     28          //      {
     29          //        angle = midAngle;
     30          //      }
     31                
     32          //      if (runwayType == 0)
     33          //      {
     34          //        straightRepair();
     35          //      }
     36          //      else if (runwayType == 1)
     37          //      {
     38          //        rightRepair();
     39          //      }
     40          //      else
     41          //      {
     42          //        leftRepair();
     43          //      }
     44          //    }
     45            }
     46            
     47            if (crossFlag == 0)
   \                     ??handleImg_0: (+1)
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable10
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD11E             BNE.N    ??handleImg_1
     48            {
     49              if (runwayType == 9)
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x2809             CMP      R0,#+9
   \   00000040   0xD115             BNE.N    ??handleImg_2
     50              {
     51                //哪一边丢线
     52                lostSide = isLost();
   \   00000042   0x.... 0x....      BL       isLost
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable9
   \   0000004A   0x6008             STR      R0,[R1, #+0]
     53                if (lostSide == -1)
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable9
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF110 0x0F01      CMN      R0,#+1
   \   00000056   0xD102             BNE.N    ??handleImg_3
     54                {
     55                  //左大弯补线
     56                  leftProcess();
   \   00000058   0x.... 0x....      BL       leftProcess
   \   0000005C   0xE00B             B.N      ??handleImg_1
     57                }
     58                else if (lostSide == 1)
   \                     ??handleImg_3: (+1)
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable9
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD106             BNE.N    ??handleImg_1
     59                {
     60                  //右大弯补线
     61                  rightProcess();
   \   00000068   0x.... 0x....      BL       rightProcess
   \   0000006C   0xE003             B.N      ??handleImg_1
     62                }
     63              }
     64              else
     65              {
     66                crossFlag = 1;
   \                     ??handleImg_2: (+1)
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable10
   \   00000074   0x6008             STR      R0,[R1, #+0]
     67              }
     68            }
     69          }
   \                     ??handleImg_1: (+1)
   \   00000076   0xBD01             POP      {R0,PC}          ;; return
     70          
     71          

   \                                 In section .text, align 2, keep-with-next
     72          void cameraScan()
     73          {
   \                     cameraScan: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
     74            int i, j;
     75            int t = absMid;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable9_2
   \   00000006   0x6800             LDR      R0,[R0, #+0]
     76            int left, right, temp;
     77          
     78            endLine = advanceLine; 
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable9_3
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable9_4
   \   00000012   0x6011             STR      R1,[R2, #+0]
     79            
     80            leftDot[startLine] = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x.... 0x....      LDR.W    R2,??DataTable9_5
   \   0000001A   0x.... 0x....      LDR.W    R3,??DataTable9_6
   \   0000001E   0x681B             LDR      R3,[R3, #+0]
   \   00000020   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
     81            rightDot[startLine] = MAX_COL-1;
   \   00000024   0x214F             MOVS     R1,#+79
   \   00000026   0x.... 0x....      LDR.W    R2,??DataTable9_7
   \   0000002A   0x.... 0x....      LDR.W    R3,??DataTable9_6
   \   0000002E   0x681B             LDR      R3,[R3, #+0]
   \   00000030   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
     82          
     83            //找边界点,并存入左右数组
     84            for (i = startLine; i >= endLine; i--)
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable9_6
   \   00000038   0x6809             LDR      R1,[R1, #+0]
   \   0000003A   0xE033             B.N      ??cameraScan_0
     85            {
     86              left = 0;
     87              right = MAX_COL-1;
     88              //从上一行中点向左遇到的第一个黑点
     89              if (0 == Img[i][t])
     90              {
     91                endLine = i;
     92                break;
     93              }
     94              for (j = t; j >= 2; j--)
     95              {
     96                if (255 == Img[i][j] && 0 == Img[i][j-1] && 0 == Img[i][j-2])
     97                {
     98                  left = j;
     99                  break;
    100                }
    101              }
    102              //从上一行中点向右遇到的第一个黑点
    103              for (j = t; j < MAX_COL-2; j++)
   \                     ??cameraScan_1: (+1)
   \   0000003C   0x1C64             ADDS     R4,R4,#+1
   \                     ??cameraScan_2: (+1)
   \   0000003E   0x2C4E             CMP      R4,#+78
   \   00000040   0xDA1A             BGE.N    ??cameraScan_3
    104              { 
    105                if (255 == Img[i][j] && 0 == Img[i][j+1] && 0 == Img[i][j+2])
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00000046   0x2550             MOVS     R5,#+80
   \   00000048   0xFB05 0x0001      MLA      R0,R5,R1,R0
   \   0000004C   0x5C20             LDRB     R0,[R4, R0]
   \   0000004E   0x28FF             CMP      R0,#+255
   \   00000050   0xD1F4             BNE.N    ??cameraScan_1
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00000056   0x2550             MOVS     R5,#+80
   \   00000058   0xFB05 0x0001      MLA      R0,R5,R1,R0
   \   0000005C   0x1820             ADDS     R0,R4,R0
   \   0000005E   0x7840             LDRB     R0,[R0, #+1]
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD1EB             BNE.N    ??cameraScan_1
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00000068   0x2550             MOVS     R5,#+80
   \   0000006A   0xFB05 0x0001      MLA      R0,R5,R1,R0
   \   0000006E   0x1820             ADDS     R0,R4,R0
   \   00000070   0x7880             LDRB     R0,[R0, #+2]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD1E2             BNE.N    ??cameraScan_1
    106                {
    107                  right = j;
   \   00000076   0x0023             MOVS     R3,R4
    108                  break;
    109                }
    110              }
    111              
    112              temp = (left + right)/2;
   \                     ??cameraScan_3: (+1)
   \   00000078   0x1898             ADDS     R0,R3,R2
   \   0000007A   0x2402             MOVS     R4,#+2
   \   0000007C   0xFB90 0xF0F4      SDIV     R0,R0,R4
    113              t = temp;
    114              //左边点坐标，右边点坐标，中点坐标
    115              leftDot[i] = left;
   \   00000080   0x.... 0x....      LDR.W    R4,??DataTable9_5
   \   00000084   0xF844 0x2021      STR      R2,[R4, R1, LSL #+2]
    116              rightDot[i] = right;
   \   00000088   0x.... 0x....      LDR.W    R4,??DataTable9_7
   \   0000008C   0xF844 0x3021      STR      R3,[R4, R1, LSL #+2]
    117              midDot[i] = temp;
   \   00000090   0x.... 0x....      LDR.W    R4,??DataTable9_8
   \   00000094   0xF844 0x0021      STR      R0,[R4, R1, LSL #+2]
    118              countBlack[i] = right - left;
   \   00000098   0x1A9A             SUBS     R2,R3,R2
   \   0000009A   0x.... 0x....      LDR.W    R3,??DataTable9_9
   \   0000009E   0xF843 0x2021      STR      R2,[R3, R1, LSL #+2]
   \   000000A2   0x1E49             SUBS     R1,R1,#+1
   \                     ??cameraScan_0: (+1)
   \   000000A4   0x.... 0x....      LDR.W    R2,??DataTable9_4
   \   000000A8   0x6812             LDR      R2,[R2, #+0]
   \   000000AA   0x4291             CMP      R1,R2
   \   000000AC   0xDB0C             BLT.N    ??cameraScan_4
   \   000000AE   0x2200             MOVS     R2,#+0
   \   000000B0   0x234F             MOVS     R3,#+79
   \   000000B2   0x.... 0x....      LDR.W    R4,??DataTable10_1
   \   000000B6   0x2550             MOVS     R5,#+80
   \   000000B8   0xFB05 0x4401      MLA      R4,R5,R1,R4
   \   000000BC   0x5D04             LDRB     R4,[R0, R4]
   \   000000BE   0x2C00             CMP      R4,#+0
   \   000000C0   0xD12A             BNE.N    ??cameraScan_5
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   000000C6   0x6001             STR      R1,[R0, #+0]
    119            }
    120            
    121            
    122            //图像左右边界
    123          	Left = leftDot[startLine];
   \                     ??cameraScan_4: (+1)
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable9_5
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable9_6
   \   000000D0   0x6809             LDR      R1,[R1, #+0]
   \   000000D2   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable9_10
   \   000000DA   0x6008             STR      R0,[R1, #+0]
    124          	Right = rightDot[startLine];
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable9_7
   \   000000E0   0x.... 0x....      LDR.W    R1,??DataTable9_6
   \   000000E4   0x6809             LDR      R1,[R1, #+0]
   \   000000E6   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable9_11
   \   000000EE   0x6008             STR      R0,[R1, #+0]
    125          	if (Left == 0)
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable9_10
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x2800             CMP      R0,#+0
   \   000000F8   0xD103             BNE.N    ??cameraScan_6
    126          	{
    127          		Left = 1;
   \   000000FA   0x2001             MOVS     R0,#+1
   \   000000FC   0x.... 0x....      LDR.W    R1,??DataTable9_10
   \   00000100   0x6008             STR      R0,[R1, #+0]
    128          	}
    129            if (Right == MAX_COL-1)
   \                     ??cameraScan_6: (+1)
   \   00000102   0x.... 0x....      LDR.W    R0,??DataTable9_11
   \   00000106   0x6800             LDR      R0,[R0, #+0]
   \   00000108   0x284F             CMP      R0,#+79
   \   0000010A   0xD103             BNE.N    ??cameraScan_7
    130            {
    131              Right = MAX_COL-2;
   \   0000010C   0x204E             MOVS     R0,#+78
   \   0000010E   0x.... 0x....      LDR.W    R1,??DataTable9_11
   \   00000112   0x6008             STR      R0,[R1, #+0]
    132            }
    133          }
   \                     ??cameraScan_7: (+1)
   \   00000114   0xBC70             POP      {R4-R6}
   \   00000116   0x4770             BX       LR               ;; return
   \                     ??cameraScan_5: (+1)
   \   00000118   0x0004             MOVS     R4,R0
   \   0000011A   0xE000             B.N      ??cameraScan_8
   \                     ??cameraScan_9: (+1)
   \   0000011C   0x1E64             SUBS     R4,R4,#+1
   \                     ??cameraScan_8: (+1)
   \   0000011E   0x2C02             CMP      R4,#+2
   \   00000120   0xDB1C             BLT.N    ??cameraScan_10
   \   00000122   0x.... 0x....      LDR.W    R5,??DataTable10_1
   \   00000126   0x2650             MOVS     R6,#+80
   \   00000128   0xFB06 0x5501      MLA      R5,R6,R1,R5
   \   0000012C   0x5D65             LDRB     R5,[R4, R5]
   \   0000012E   0x2DFF             CMP      R5,#+255
   \   00000130   0xD1F4             BNE.N    ??cameraScan_9
   \   00000132   0x.... 0x....      LDR.W    R5,??DataTable10_1
   \   00000136   0x2650             MOVS     R6,#+80
   \   00000138   0xFB06 0x5501      MLA      R5,R6,R1,R5
   \   0000013C   0x1965             ADDS     R5,R4,R5
   \   0000013E   0xF815 0x5C01      LDRB     R5,[R5, #-1]
   \   00000142   0x2D00             CMP      R5,#+0
   \   00000144   0xD1EA             BNE.N    ??cameraScan_9
   \   00000146   0x.... 0x....      LDR.W    R5,??DataTable10_1
   \   0000014A   0x2650             MOVS     R6,#+80
   \   0000014C   0xFB06 0x5501      MLA      R5,R6,R1,R5
   \   00000150   0x1965             ADDS     R5,R4,R5
   \   00000152   0xF815 0x5C02      LDRB     R5,[R5, #-2]
   \   00000156   0x2D00             CMP      R5,#+0
   \   00000158   0xD1E0             BNE.N    ??cameraScan_9
   \   0000015A   0x0022             MOVS     R2,R4
   \                     ??cameraScan_10: (+1)
   \   0000015C   0x0004             MOVS     R4,R0
   \   0000015E   0xE76E             B.N      ??cameraScan_2
    134          
    135          

   \                                 In section .text, align 2, keep-with-next
    136          int identifyRunway()
    137          {
   \                     identifyRunway: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    138            int lost;
    139            lost = isLost();
   \   00000002   0x.... 0x....      BL       isLost
    140          
    141            if (leftDot[Line3] == 0 && rightDot[Line3] == MAX_COL - 1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable9_5
   \   0000000A   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xD10A             BNE.N    ??identifyRunway_0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable9_7
   \   0000001C   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   00000020   0x6812             LDR      R2,[R2, #+0]
   \   00000022   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000026   0x294F             CMP      R1,#+79
   \   00000028   0xD101             BNE.N    ??identifyRunway_0
    142            {
    143              return 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE040             B.N      ??identifyRunway_1
    144            }
    145            //如果丢线，进一步判断是大弯还是十字
    146            if (lost != 9)
   \                     ??identifyRunway_0: (+1)
   \   0000002E   0x2809             CMP      R0,#+9
   \   00000030   0xD03D             BEQ.N    ??identifyRunway_2
    147            {
    148              int i, j;
    149              for (j = 0; j < MAX_COL; j++)
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0xE019             B.N      ??identifyRunway_3
    150              {
    151                for (i = startLine; i > 0; i--)
   \                     ??identifyRunway_4: (+1)
   \   00000036   0x1E49             SUBS     R1,R1,#+1
   \                     ??identifyRunway_5: (+1)
   \   00000038   0x2901             CMP      R1,#+1
   \   0000003A   0xDB11             BLT.N    ??identifyRunway_6
    152                {
    153                  if (Img[i][j] == 0 && Img[i-1][j] == 0)
   \   0000003C   0x.... 0x....      LDR.W    R3,??DataTable10_1
   \   00000040   0x2450             MOVS     R4,#+80
   \   00000042   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   00000046   0x5CD3             LDRB     R3,[R2, R3]
   \   00000048   0x2B00             CMP      R3,#+0
   \   0000004A   0xD1F4             BNE.N    ??identifyRunway_4
   \   0000004C   0x.... 0x....      LDR.W    R3,??DataTable10_1
   \   00000050   0x2450             MOVS     R4,#+80
   \   00000052   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   00000056   0x18D3             ADDS     R3,R2,R3
   \   00000058   0xF813 0x3C50      LDRB     R3,[R3, #-80]
   \   0000005C   0x2B00             CMP      R3,#+0
   \   0000005E   0xD1EA             BNE.N    ??identifyRunway_4
    154                  {  
    155                    break;
    156                  }
    157                }
    158                vertical[j] = i;
   \                     ??identifyRunway_6: (+1)
   \   00000060   0x.... 0x....      LDR.W    R3,??DataTable10_3
   \   00000064   0xF843 0x1022      STR      R1,[R3, R2, LSL #+2]
   \   00000068   0x1C52             ADDS     R2,R2,#+1
   \                     ??identifyRunway_3: (+1)
   \   0000006A   0x2A50             CMP      R2,#+80
   \   0000006C   0xDA03             BGE.N    ??identifyRunway_7
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable9_6
   \   00000072   0x6809             LDR      R1,[R1, #+0]
   \   00000074   0xE7E0             B.N      ??identifyRunway_5
    159              }
    160              
    161          
    162              if (lost == -1)
   \                     ??identifyRunway_7: (+1)
   \   00000076   0xF110 0x0F01      CMN      R0,#+1
   \   0000007A   0xD10B             BNE.N    ??identifyRunway_8
    163              {
    164                if (isFindAngle(-1) == -1)
   \   0000007C   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000080   0x.... 0x....      BL       isFindAngle
   \   00000084   0xF110 0x0F01      CMN      R0,#+1
   \   00000088   0xD102             BNE.N    ??identifyRunway_9
    165                {
    166                  return -1;
   \   0000008A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000008E   0xE00F             B.N      ??identifyRunway_1
    167                }
    168                else
    169                {
    170                  return 9;
   \                     ??identifyRunway_9: (+1)
   \   00000090   0x2009             MOVS     R0,#+9
   \   00000092   0xE00D             B.N      ??identifyRunway_1
    171                } 
    172              }
    173              else if (lost == 1)
   \                     ??identifyRunway_8: (+1)
   \   00000094   0x2801             CMP      R0,#+1
   \   00000096   0xD108             BNE.N    ??identifyRunway_10
    174              {
    175                if (isFindAngle(1) == 1)
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x.... 0x....      BL       isFindAngle
   \   0000009E   0x2801             CMP      R0,#+1
   \   000000A0   0xD101             BNE.N    ??identifyRunway_11
    176                  
    177                {
    178                  return 1;
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0xE004             B.N      ??identifyRunway_1
    179                } 
    180                else
    181                {
    182                  return 9;
   \                     ??identifyRunway_11: (+1)
   \   000000A6   0x2009             MOVS     R0,#+9
   \   000000A8   0xE002             B.N      ??identifyRunway_1
    183                }
    184              }
    185              else
    186              {
    187                return 0;
   \                     ??identifyRunway_10: (+1)
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0xE000             B.N      ??identifyRunway_1
    188              }
    189            }
    190            else
    191            {
    192              return 9;
   \                     ??identifyRunway_2: (+1)
   \   000000AE   0x2009             MOVS     R0,#+9
   \                     ??identifyRunway_1: (+1)
   \   000000B0   0xBD10             POP      {R4,PC}          ;; return
    193            }
    194          }
    195          
    196          
    197          //是否找到突变点

   \                                 In section .text, align 2, keep-with-next
    198          int isFindAngle(int flag)
    199          {
    200            int i, j, temp;
    201          
    202            index1 = -1;
   \                     isFindAngle: (+1)
   \   00000000   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable10_4
   \   00000008   0x6011             STR      R1,[R2, #+0]
    203            index2 = -1;
   \   0000000A   0xF05F 0x31FF      MOVS     R1,#-1
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable10_5
   \   00000012   0x6011             STR      R1,[R2, #+0]
    204          
    205            //右弯的图像
    206            if (flag == 1)
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD14F             BNE.N    ??isFindAngle_0
    207            {
    208              //index1-----找右边界
    209              for (i = startLine -2; i > endLine + 3; i--)
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable9_6
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x1E80             SUBS     R0,R0,#+2
   \   00000020   0xE000             B.N      ??isFindAngle_1
   \                     ??isFindAngle_2: (+1)
   \   00000022   0x1E40             SUBS     R0,R0,#+1
   \                     ??isFindAngle_1: (+1)
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable9_4
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0x1CC9             ADDS     R1,R1,#+3
   \   0000002C   0x4281             CMP      R1,R0
   \   0000002E   0xDA10             BGE.N    ??isFindAngle_3
    210              {
    211                //temp = leftDot[i] - leftDot[i - 1];
    212                temp = rightDot[i] - rightDot[i - 1];
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable9_7
   \   00000034   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000038   0x.... 0x....      LDR.W    R2,??DataTable9_7
   \   0000003C   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000040   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   00000044   0x1A89             SUBS     R1,R1,R2
    213                if (temp >= 7 || temp <= -7)
   \   00000046   0x1D89             ADDS     R1,R1,#+6
   \   00000048   0x290D             CMP      R1,#+13
   \   0000004A   0xD3EA             BCC.N    ??isFindAngle_2
    214                {
    215                  index1 = i;
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable10_4
   \   00000050   0x6008             STR      R0,[R1, #+0]
    216                  break;
    217                }
    218              }
    219          
    220              if (index1 == -1)
   \                     ??isFindAngle_3: (+1)
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF110 0x0F01      CMN      R0,#+1
   \   0000005C   0xD101             BNE.N    ??isFindAngle_4
    221              {
    222                return 9;
   \   0000005E   0x2009             MOVS     R0,#+9
   \   00000060   0xE079             B.N      ??isFindAngle_5
    223              }
    224          
    225          
    226              //index2-----找上边界
    227              //for (j = Right; j > midDot[endLine+1]; j--)
    228              for (j = Left + 1; j < midDot[Line3]; j++)
   \                     ??isFindAngle_4: (+1)
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable9_10
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0xE000             B.N      ??isFindAngle_6
   \                     ??isFindAngle_7: (+1)
   \   0000006C   0x1C40             ADDS     R0,R0,#+1
   \                     ??isFindAngle_6: (+1)
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable9_8
   \   00000072   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   00000076   0x6812             LDR      R2,[R2, #+0]
   \   00000078   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   0000007C   0x4288             CMP      R0,R1
   \   0000007E   0xDA11             BGE.N    ??isFindAngle_8
    229              {
    230                temp = vertical[j] - vertical[j - 1];
   \   00000080   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   00000084   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000088   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   0000008C   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000090   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   00000094   0x1A89             SUBS     R1,R1,R2
    231                if (temp >= 7 || temp <= -7)
   \   00000096   0x1D89             ADDS     R1,R1,#+6
   \   00000098   0x290D             CMP      R1,#+13
   \   0000009A   0xD3E7             BCC.N    ??isFindAngle_7
    232                {
    233                  //index2 = vertical[j-1];
    234                  index2 = j - 1;
   \   0000009C   0x1E40             SUBS     R0,R0,#+1
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable10_5
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    235                  break;
    236                }
    237              }
    238              
    239              if (-1 == index2)
   \                     ??isFindAngle_8: (+1)
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable10_5
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF110 0x0F01      CMN      R0,#+1
   \   000000AE   0xD101             BNE.N    ??isFindAngle_9
    240              {
    241                return 9;
   \   000000B0   0x2009             MOVS     R0,#+9
   \   000000B2   0xE050             B.N      ??isFindAngle_5
    242              }
    243              return 1;
   \                     ??isFindAngle_9: (+1)
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0xE04E             B.N      ??isFindAngle_5
    244            }
    245          
    246          
    247            //左弯的图像
    248            else
    249            {
    250              //index1-----找左边界
    251              for (i = startLine - 2; i > endLine + 3; i--)
   \                     ??isFindAngle_0: (+1)
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable9_6
   \   000000BC   0x6800             LDR      R0,[R0, #+0]
   \   000000BE   0x1E80             SUBS     R0,R0,#+2
   \   000000C0   0xE000             B.N      ??isFindAngle_10
   \                     ??isFindAngle_11: (+1)
   \   000000C2   0x1E40             SUBS     R0,R0,#+1
   \                     ??isFindAngle_10: (+1)
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable9_4
   \   000000C8   0x6809             LDR      R1,[R1, #+0]
   \   000000CA   0x1CC9             ADDS     R1,R1,#+3
   \   000000CC   0x4281             CMP      R1,R0
   \   000000CE   0xDA10             BGE.N    ??isFindAngle_12
    252              {
    253                //temp = rightDot[i] - rightDot[i - 1];
    254                temp = leftDot[i] - leftDot[i-1];
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable9_5
   \   000000D4   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   000000D8   0x.... 0x....      LDR.W    R2,??DataTable9_5
   \   000000DC   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   000000E0   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   000000E4   0x1A89             SUBS     R1,R1,R2
    255                if (temp >= 7 || temp <= -7)
   \   000000E6   0x1D89             ADDS     R1,R1,#+6
   \   000000E8   0x290D             CMP      R1,#+13
   \   000000EA   0xD3EA             BCC.N    ??isFindAngle_11
    256                {
    257                  index1 = i;
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable10_4
   \   000000F0   0x6008             STR      R0,[R1, #+0]
    258                  break;
    259                } 
    260              }
    261              if (-1 == index1)
   \                     ??isFindAngle_12: (+1)
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0xF110 0x0F01      CMN      R0,#+1
   \   000000FC   0xD101             BNE.N    ??isFindAngle_13
    262              {
    263                return 9;
   \   000000FE   0x2009             MOVS     R0,#+9
   \   00000100   0xE029             B.N      ??isFindAngle_5
    264              }
    265          
    266              //index2-----找右上边界
    267              //for (j = Left+1; j < midDot[endLine+1]; j++)
    268              for (j = Right - 1; j > midDot[Line3]; j--)
   \                     ??isFindAngle_13: (+1)
   \   00000102   0x.... 0x....      LDR.W    R0,??DataTable9_11
   \   00000106   0x6800             LDR      R0,[R0, #+0]
   \   00000108   0x1E40             SUBS     R0,R0,#+1
   \   0000010A   0xE000             B.N      ??isFindAngle_14
   \                     ??isFindAngle_15: (+1)
   \   0000010C   0x1E40             SUBS     R0,R0,#+1
   \                     ??isFindAngle_14: (+1)
   \   0000010E   0x.... 0x....      LDR.W    R1,??DataTable9_8
   \   00000112   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   00000116   0x6812             LDR      R2,[R2, #+0]
   \   00000118   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   0000011C   0x4281             CMP      R1,R0
   \   0000011E   0xDA10             BGE.N    ??isFindAngle_16
    269              {
    270                temp = vertical[j] - vertical[j - 1];
   \   00000120   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   00000124   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000128   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   0000012C   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000130   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   00000134   0x1A89             SUBS     R1,R1,R2
    271                if (temp >= 7 || temp <= -7)
   \   00000136   0x1D89             ADDS     R1,R1,#+6
   \   00000138   0x290D             CMP      R1,#+13
   \   0000013A   0xD3E7             BCC.N    ??isFindAngle_15
    272                {
    273                  //index2 = vertical[j];
    274                  index2 = j;
   \   0000013C   0x.... 0x....      LDR.W    R1,??DataTable10_5
   \   00000140   0x6008             STR      R0,[R1, #+0]
    275                  break;
    276                }
    277              }
    278              
    279              if (index2 == -1)
   \                     ??isFindAngle_16: (+1)
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable10_5
   \   00000146   0x6800             LDR      R0,[R0, #+0]
   \   00000148   0xF110 0x0F01      CMN      R0,#+1
   \   0000014C   0xD101             BNE.N    ??isFindAngle_17
    280              {
    281                return 9;
   \   0000014E   0x2009             MOVS     R0,#+9
   \   00000150   0xE001             B.N      ??isFindAngle_5
    282              }
    283              return -1;
   \                     ??isFindAngle_17: (+1)
   \   00000152   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??isFindAngle_5: (+1)
   \   00000156   0x4770             BX       LR               ;; return
    284            }
    285          }
    286          
    287          

   \                                 In section .text, align 2, keep-with-next
    288          int isOutCross()
    289          {
    290            //两边都找到边界，则出十字
    291            if (leftDot[Line2] != 0 && rightDot[Line2] != MAX_COL -1)
   \                     isOutCross: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable9_5
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable11
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD00A             BEQ.N    ??isOutCross_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable9_7
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable11
   \   0000001A   0x6809             LDR      R1,[R1, #+0]
   \   0000001C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000020   0x284F             CMP      R0,#+79
   \   00000022   0xD001             BEQ.N    ??isOutCross_0
    292            {
    293              return 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xE000             B.N      ??isOutCross_1
    294            }
    295            return 0;
   \                     ??isOutCross_0: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \                     ??isOutCross_1: (+1)
   \   0000002A   0x4770             BX       LR               ;; return
    296          }
    297          
    298          

   \                                 In section .text, align 2, keep-with-next
    299          void leftProcess()
    300          {
    301            int i, temp, rightGap;
    302            for (i = startLine; i > endLine; i--)
   \                     leftProcess: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable9_6
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xE000             B.N      ??leftProcess_0
   \                     ??leftProcess_1: (+1)
   \   00000008   0x1E40             SUBS     R0,R0,#+1
   \                     ??leftProcess_0: (+1)
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x4281             CMP      R1,R0
   \   00000012   0xDA13             BGE.N    ??leftProcess_2
    303            {
    304              temp = leftDot[i-1] - leftDot[i];
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable9_5
   \   00000018   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000001C   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   00000020   0x.... 0x....      LDR.W    R2,??DataTable9_5
   \   00000024   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000028   0x1A89             SUBS     R1,R1,R2
    305              if (leftDot[i] == 0 || (temp > 7 || temp < -7))
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable9_5
   \   0000002E   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000032   0x2A00             CMP      R2,#+0
   \   00000034   0xD002             BEQ.N    ??leftProcess_3
   \   00000036   0x1DC9             ADDS     R1,R1,#+7
   \   00000038   0x290F             CMP      R1,#+15
   \   0000003A   0xD3E5             BCC.N    ??leftProcess_1
    306              {
    307                break;
    308              }
    309            }
    310          
    311            temp = leftDot[i];
   \                     ??leftProcess_3: (+1)
   \                     ??leftProcess_2: (+1)
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable9_5
   \   00000040   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
    312            for (i = i-1; i > endLine; i--)
   \   00000044   0x1E40             SUBS     R0,R0,#+1
   \   00000046   0xE018             B.N      ??leftProcess_4
    313            {
    314              rightGap = rightDot[i-1] - rightDot[i];
   \                     ??leftProcess_5: (+1)
   \   00000048   0x.... 0x....      LDR.W    R2,??DataTable9_7
   \   0000004C   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000050   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   00000054   0x.... 0x....      LDR.W    R3,??DataTable9_7
   \   00000058   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   0000005C   0x1AD2             SUBS     R2,R2,R3
    315              temp = temp + rightGap;
   \   0000005E   0x1851             ADDS     R1,R2,R1
    316              midDot[i] = (temp + rightDot[i])/2;
   \   00000060   0x.... 0x....      LDR.W    R2,??DataTable9_7
   \   00000064   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000068   0x1852             ADDS     R2,R2,R1
   \   0000006A   0x2302             MOVS     R3,#+2
   \   0000006C   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   00000070   0x.... 0x....      LDR.W    R3,??DataTable9_8
   \   00000074   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
    317            }
   \   00000078   0x1E40             SUBS     R0,R0,#+1
   \                     ??leftProcess_4: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R2,??DataTable12
   \   0000007E   0x6812             LDR      R2,[R2, #+0]
   \   00000080   0x4282             CMP      R2,R0
   \   00000082   0xDBE1             BLT.N    ??leftProcess_5
    318          }
   \   00000084   0x4770             BX       LR               ;; return
    319          
    320          

   \                                 In section .text, align 2, keep-with-next
    321          void rightProcess()
    322          {
    323            int i, temp, leftGap;
    324            for (i = startLine; i > endLine; i--)
   \                     rightProcess: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable9_6
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xE000             B.N      ??rightProcess_0
   \                     ??rightProcess_1: (+1)
   \   00000008   0x1E40             SUBS     R0,R0,#+1
   \                     ??rightProcess_0: (+1)
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x4281             CMP      R1,R0
   \   00000012   0xDA13             BGE.N    ??rightProcess_2
    325            {
    326              temp = rightDot[i-1] - rightDot[i];
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable9_7
   \   00000018   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000001C   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   00000020   0x.... 0x....      LDR.W    R2,??DataTable9_7
   \   00000024   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000028   0x1A89             SUBS     R1,R1,R2
    327              if (rightDot[i] == MAX_COL-1 || (temp > 7 || temp < -7))
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable9_7
   \   0000002E   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000032   0x2A4F             CMP      R2,#+79
   \   00000034   0xD002             BEQ.N    ??rightProcess_3
   \   00000036   0x1DC9             ADDS     R1,R1,#+7
   \   00000038   0x290F             CMP      R1,#+15
   \   0000003A   0xD3E5             BCC.N    ??rightProcess_1
    328              {
    329                break;
    330              }
    331            }
    332          
    333            temp = rightDot[i];
   \                     ??rightProcess_3: (+1)
   \                     ??rightProcess_2: (+1)
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable9_7
   \   00000040   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
    334            for (i = i-1; i > endLine; i--)
   \   00000044   0x1E40             SUBS     R0,R0,#+1
   \   00000046   0xE018             B.N      ??rightProcess_4
    335            {
    336              leftGap = leftDot[i-1] - leftDot[i];
   \                     ??rightProcess_5: (+1)
   \   00000048   0x.... 0x....      LDR.W    R2,??DataTable9_5
   \   0000004C   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000050   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   00000054   0x.... 0x....      LDR.W    R3,??DataTable9_5
   \   00000058   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   0000005C   0x1AD2             SUBS     R2,R2,R3
    337              temp = temp + leftGap;
   \   0000005E   0x1851             ADDS     R1,R2,R1
    338              midDot[i] = (temp + leftDot[i])/2;
   \   00000060   0x.... 0x....      LDR.W    R2,??DataTable9_5
   \   00000064   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000068   0x1852             ADDS     R2,R2,R1
   \   0000006A   0x2302             MOVS     R3,#+2
   \   0000006C   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   00000070   0x.... 0x....      LDR.W    R3,??DataTable9_8
   \   00000074   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
    339            }
   \   00000078   0x1E40             SUBS     R0,R0,#+1
   \                     ??rightProcess_4: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R2,??DataTable12
   \   0000007E   0x6812             LDR      R2,[R2, #+0]
   \   00000080   0x4282             CMP      R2,R0
   \   00000082   0xDBE1             BLT.N    ??rightProcess_5
    340          }
   \   00000084   0x4770             BX       LR               ;; return
    341          
    342          

   \                                 In section .text, align 2, keep-with-next
    343          int isLost()
    344          {
   \                     isLost: (+1)
   \   00000000   0xB410             PUSH     {R4}
    345            /* 预判行附近是否丢线
    346             * -1---左边丢线
    347             * 0 ---不丢线
    348             * 1 ---右边丢线
    349             */
    350            
    351            int i;
    352            int leftLost = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    353            int rightLost = 0;
   \   00000004   0x2100             MOVS     R1,#+0
    354            int bothLost = 0;
   \   00000006   0x2200             MOVS     R2,#+0
    355            
    356            //计算丢线行数
    357            for (i = Line2; i > endLine; i--)
   \   00000008   0x.... 0x....      LDR.W    R3,??DataTable11
   \   0000000C   0x681B             LDR      R3,[R3, #+0]
   \   0000000E   0xE00D             B.N      ??isLost_0
    358            {
    359               if (leftDot[i] == 0 && rightDot[i] != MAX_COL-1)
    360               {
    361                 leftLost++;
    362               }
    363               else if (rightDot[i] == MAX_COL-1 && leftDot[i] != 0)
    364               {
    365                 rightLost++;
    366               }
    367               else if(leftDot[i] == 0 && rightDot[i] == MAX_COL-1)
   \                     ??isLost_1: (+1)
   \   00000010   0x.... 0x....      LDR.W    R4,??DataTable9_5
   \   00000014   0xF854 0x4023      LDR      R4,[R4, R3, LSL #+2]
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD106             BNE.N    ??isLost_2
   \   0000001C   0x.... 0x....      LDR.W    R4,??DataTable9_7
   \   00000020   0xF854 0x4023      LDR      R4,[R4, R3, LSL #+2]
   \   00000024   0x2C4F             CMP      R4,#+79
   \   00000026   0xD100             BNE.N    ??isLost_2
    368               {
    369                 bothLost++;
   \   00000028   0x1C52             ADDS     R2,R2,#+1
    370               }
   \                     ??isLost_2: (+1)
   \   0000002A   0x1E5B             SUBS     R3,R3,#+1
   \                     ??isLost_0: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R4,??DataTable9_4
   \   00000030   0x6824             LDR      R4,[R4, #+0]
   \   00000032   0x429C             CMP      R4,R3
   \   00000034   0xDA1B             BGE.N    ??isLost_3
   \   00000036   0x.... 0x....      LDR.W    R4,??DataTable9_5
   \   0000003A   0xF854 0x4023      LDR      R4,[R4, R3, LSL #+2]
   \   0000003E   0x2C00             CMP      R4,#+0
   \   00000040   0xD107             BNE.N    ??isLost_4
   \   00000042   0x.... 0x....      LDR.W    R4,??DataTable9_7
   \   00000046   0xF854 0x4023      LDR      R4,[R4, R3, LSL #+2]
   \   0000004A   0x2C4F             CMP      R4,#+79
   \   0000004C   0xD001             BEQ.N    ??isLost_4
   \   0000004E   0x1C40             ADDS     R0,R0,#+1
   \   00000050   0xE7EB             B.N      ??isLost_2
   \                     ??isLost_4: (+1)
   \   00000052   0x.... 0x....      LDR.W    R4,??DataTable9_7
   \   00000056   0xF854 0x4023      LDR      R4,[R4, R3, LSL #+2]
   \   0000005A   0x2C4F             CMP      R4,#+79
   \   0000005C   0xD1D8             BNE.N    ??isLost_1
   \   0000005E   0x.... 0x....      LDR.W    R4,??DataTable9_5
   \   00000062   0xF854 0x4023      LDR      R4,[R4, R3, LSL #+2]
   \   00000066   0x2C00             CMP      R4,#+0
   \   00000068   0xD0D2             BEQ.N    ??isLost_1
   \   0000006A   0x1C49             ADDS     R1,R1,#+1
   \   0000006C   0xE7DD             B.N      ??isLost_2
    371            }
    372            
    373            if (bothLost >= 2)
   \                     ??isLost_3: (+1)
   \   0000006E   0x2A02             CMP      R2,#+2
   \   00000070   0xDB01             BLT.N    ??isLost_5
    374            {
    375              return 0;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xE00B             B.N      ??isLost_6
    376            }
    377            
    378            else if (leftLost <= 1 && rightLost <= 1)
   \                     ??isLost_5: (+1)
   \   00000076   0x2802             CMP      R0,#+2
   \   00000078   0xDA03             BGE.N    ??isLost_7
   \   0000007A   0x2902             CMP      R1,#+2
   \   0000007C   0xDA01             BGE.N    ??isLost_7
    379            {
    380              return 9;
   \   0000007E   0x2009             MOVS     R0,#+9
   \   00000080   0xE005             B.N      ??isLost_6
    381            }
    382            
    383            //左边丢线数大于右边
    384            else if (leftLost > rightLost)
   \                     ??isLost_7: (+1)
   \   00000082   0x4281             CMP      R1,R0
   \   00000084   0xDA02             BGE.N    ??isLost_8
    385            {
    386              return -1;
   \   00000086   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000008A   0xE000             B.N      ??isLost_6
    387            }
    388            else
    389            {
    390              return 1;
   \                     ??isLost_8: (+1)
   \   0000008C   0x2001             MOVS     R0,#+1
   \                     ??isLost_6: (+1)
   \   0000008E   0xBC10             POP      {R4}
   \   00000090   0x4770             BX       LR               ;; return
    391            }
    392          }
    393          
    394          

   \                                 In section .text, align 2, keep-with-next
    395          void paint()
    396          { 
   \                     paint: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    397            int i, j, l, m, r;
    398            for (i = startLine; i >= endLine; i--)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable9_6
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xE024             B.N      ??paint_0
    399            {
    400              l = leftDot[i];
   \                     ??paint_1: (+1)
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable9_5
   \   0000000E   0xF851 0x2020      LDR      R2,[R1, R0, LSL #+2]
    401              m = midDot[i];
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable9_8
   \   00000016   0xF851 0x3020      LDR      R3,[R1, R0, LSL #+2]
    402              r = rightDot[i];
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable9_7
   \   0000001E   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
    403              Img[i][l+1] = 0;
   \   00000022   0x.... 0x....      LDR.W    R4,??DataTable10_1
   \   00000026   0x2550             MOVS     R5,#+80
   \   00000028   0xFB05 0x4400      MLA      R4,R5,R0,R4
   \   0000002C   0x1912             ADDS     R2,R2,R4
   \   0000002E   0x2400             MOVS     R4,#+0
   \   00000030   0x7054             STRB     R4,[R2, #+1]
    404              Img[i][m] = 0;
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x.... 0x....      LDR.W    R4,??DataTable10_1
   \   00000038   0x2550             MOVS     R5,#+80
   \   0000003A   0xFB05 0x4400      MLA      R4,R5,R0,R4
   \   0000003E   0x551A             STRB     R2,[R3, R4]
    405              Img[i][r-1] = 0;
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable10_1
   \   00000044   0x2350             MOVS     R3,#+80
   \   00000046   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000004A   0x1889             ADDS     R1,R1,R2
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0xF801 0x2C01      STRB     R2,[R1, #-1]
    406            }
   \   00000052   0x1E40             SUBS     R0,R0,#+1
   \                     ??paint_0: (+1)
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0x4288             CMP      R0,R1
   \   0000005C   0xDAD5             BGE.N    ??paint_1
    407            
    408            for (j = 0; j < MAX_COL; j++)
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xE00A             B.N      ??paint_2
    409            {
    410              Img[endLine][j] = 255;
   \                     ??paint_3: (+1)
   \   00000062   0x21FF             MOVS     R1,#+255
   \   00000064   0x.... 0x....      LDR.W    R2,??DataTable10_1
   \   00000068   0x.... 0x....      LDR.W    R3,??DataTable12
   \   0000006C   0x681B             LDR      R3,[R3, #+0]
   \   0000006E   0x2450             MOVS     R4,#+80
   \   00000070   0xFB04 0x2203      MLA      R2,R4,R3,R2
   \   00000074   0x5481             STRB     R1,[R0, R2]
    411            }
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \                     ??paint_2: (+1)
   \   00000078   0x2850             CMP      R0,#+80
   \   0000007A   0xDBF2             BLT.N    ??paint_3
    412          }
   \   0000007C   0xBC30             POP      {R4,R5}
   \   0000007E   0x4770             BX       LR               ;; return
    413          
    414          

   \                                 In section .text, align 2, keep-with-next
    415          void straightRepair()
    416          {
   \                     straightRepair: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    417            int i = 0, j = 0;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
    418            int temp, k1, k2;
    419            
    420            //初始行丢线
    421            if (leftDot[Line3] == 0 || rightDot[Line3] == MAX_COL-1)
   \   00000006   0x....             LDR.N    R0,??DataTable9_5
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xF000 0x8199      BEQ.W    ??straightRepair_0
   \   00000018   0x....             LDR.N    R0,??DataTable9_7
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000024   0x284F             CMP      R0,#+79
   \   00000026   0xF000 0x8190      BEQ.W    ??straightRepair_0
    422            {
    423          
    424            }
    425            else
    426            {
    427              //找突变点：index1, index4
    428              for (i = Left; i <= midDot[Line3]; i++)
   \   0000002A   0x....             LDR.N    R0,??DataTable9_10
   \   0000002C   0x6801             LDR      R1,[R0, #+0]
   \   0000002E   0xE000             B.N      ??straightRepair_1
   \                     ??straightRepair_2: (+1)
   \   00000030   0x1C49             ADDS     R1,R1,#+1
   \                     ??straightRepair_1: (+1)
   \   00000032   0x....             LDR.N    R0,??DataTable9_8
   \   00000034   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   00000038   0x6812             LDR      R2,[R2, #+0]
   \   0000003A   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xDB2B             BLT.N    ??straightRepair_3
    429              {
    430                temp = vertical[i] - vertical[i-1];
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   00000046   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000004A   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   0000004E   0xEB12 0x0281      ADDS     R2,R2,R1, LSL #+2
   \   00000052   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   00000056   0x1A82             SUBS     R2,R0,R2
    431                if (temp >= 7 || temp <= -7)
   \   00000058   0x1D90             ADDS     R0,R2,#+6
   \   0000005A   0x280D             CMP      R0,#+13
   \   0000005C   0xD3E8             BCC.N    ??straightRepair_2
    432                { 
    433                  index1 = vertical[i-1];
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   00000062   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   00000066   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   0000006A   0x.... 0x....      LDR.W    R2,??DataTable10_4
   \   0000006E   0x6010             STR      R0,[R2, #+0]
    434                  col1 = i - 1;
   \   00000070   0x1E48             SUBS     R0,R1,#+1
   \   00000072   0x.... 0x....      LDR.W    R2,??DataTable12_1
   \   00000076   0x6010             STR      R0,[R2, #+0]
    435                  
    436                  index4 = vertical[i+1];
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000007C   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   00000080   0x6840             LDR      R0,[R0, #+4]
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   00000086   0x6008             STR      R0,[R1, #+0]
    437                  col4 = leftDot[index4];
   \   00000088   0x....             LDR.N    R0,??DataTable9_5
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   0000008E   0x6809             LDR      R1,[R1, #+0]
   \   00000090   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   00000098   0x6008             STR      R0,[R1, #+0]
    438                  break;
    439                }
    440              }
    441          
    442          
    443              //验证index4
    444              index4 -= 3;
   \                     ??straightRepair_3: (+1)
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x1EC0             SUBS     R0,R0,#+3
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    445              for (j = col1; j < Right; j++)
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0xE000             B.N      ??straightRepair_4
   \                     ??straightRepair_5: (+1)
   \   000000B0   0x1C40             ADDS     R0,R0,#+1
   \                     ??straightRepair_4: (+1)
   \   000000B2   0x....             LDR.N    R1,??DataTable9_11
   \   000000B4   0x6809             LDR      R1,[R1, #+0]
   \   000000B6   0x4288             CMP      R0,R1
   \   000000B8   0xDA1A             BGE.N    ??straightRepair_6
    446              {
    447                if (255 == Img[index4][j] && 0 == Img[index4][j-1])
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   000000BE   0x.... 0x....      LDR.W    R2,??DataTable12_2
   \   000000C2   0x6812             LDR      R2,[R2, #+0]
   \   000000C4   0x2350             MOVS     R3,#+80
   \   000000C6   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   000000CA   0x5C41             LDRB     R1,[R0, R1]
   \   000000CC   0x29FF             CMP      R1,#+255
   \   000000CE   0xD1EF             BNE.N    ??straightRepair_5
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   000000D4   0x.... 0x....      LDR.W    R2,??DataTable12_2
   \   000000D8   0x6812             LDR      R2,[R2, #+0]
   \   000000DA   0x2350             MOVS     R3,#+80
   \   000000DC   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   000000E0   0x1841             ADDS     R1,R0,R1
   \   000000E2   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000000E6   0x2900             CMP      R1,#+0
   \   000000E8   0xD1E2             BNE.N    ??straightRepair_5
    448                {
    449                  col4 = j;
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   000000EE   0x6008             STR      R0,[R1, #+0]
    450                  break;
    451                }
    452              }
    453          
    454              
    455              //找突变点：index2, index3
    456              for (i = Right; i >= midDot[Line3]; i--)
   \                     ??straightRepair_6: (+1)
   \   000000F0   0x....             LDR.N    R0,??DataTable9_11
   \   000000F2   0x6801             LDR      R1,[R0, #+0]
   \   000000F4   0xE000             B.N      ??straightRepair_7
   \                     ??straightRepair_8: (+1)
   \   000000F6   0x1E49             SUBS     R1,R1,#+1
   \                     ??straightRepair_7: (+1)
   \   000000F8   0x....             LDR.N    R0,??DataTable9_8
   \   000000FA   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   000000FE   0x6812             LDR      R2,[R2, #+0]
   \   00000100   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   00000104   0x4281             CMP      R1,R0
   \   00000106   0xDB2A             BLT.N    ??straightRepair_9
    457              {
    458                temp = vertical[i] - vertical[i+1];
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000010C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000110   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   00000114   0xEB12 0x0281      ADDS     R2,R2,R1, LSL #+2
   \   00000118   0x6852             LDR      R2,[R2, #+4]
   \   0000011A   0x1A82             SUBS     R2,R0,R2
    459                if (temp >= 7 || temp <= -7)
   \   0000011C   0x1D90             ADDS     R0,R2,#+6
   \   0000011E   0x280D             CMP      R0,#+13
   \   00000120   0xD3E9             BCC.N    ??straightRepair_8
    460                {
    461                  index2 = vertical[i+1];
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   00000126   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   0000012A   0x6840             LDR      R0,[R0, #+4]
   \   0000012C   0x.... 0x....      LDR.W    R2,??DataTable10_5
   \   00000130   0x6010             STR      R0,[R2, #+0]
    462                  col2 = i + 1;
   \   00000132   0x1C48             ADDS     R0,R1,#+1
   \   00000134   0x.... 0x....      LDR.W    R2,??DataTable12_4
   \   00000138   0x6010             STR      R0,[R2, #+0]
    463          
    464                  index3 = vertical[i-1];
   \   0000013A   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000013E   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   00000142   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable12_5
   \   0000014A   0x6008             STR      R0,[R1, #+0]
    465                  col3 = rightDot[index3];
   \   0000014C   0x....             LDR.N    R0,??DataTable9_7
   \   0000014E   0x.... 0x....      LDR.W    R1,??DataTable12_5
   \   00000152   0x6809             LDR      R1,[R1, #+0]
   \   00000154   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000158   0x.... 0x....      LDR.W    R1,??DataTable12_6
   \   0000015C   0x6008             STR      R0,[R1, #+0]
    466                  break;
    467                }
    468              }
    469          
    470              //  验证index3
    471              index3 -= 3;
   \                     ??straightRepair_9: (+1)
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   00000162   0x6800             LDR      R0,[R0, #+0]
   \   00000164   0x1EC0             SUBS     R0,R0,#+3
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable12_5
   \   0000016A   0x6008             STR      R0,[R1, #+0]
    472              for (j = col2; j > Left; j--)
   \   0000016C   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000170   0x6800             LDR      R0,[R0, #+0]
   \   00000172   0xE000             B.N      ??straightRepair_10
   \                     ??straightRepair_11: (+1)
   \   00000174   0x1E40             SUBS     R0,R0,#+1
   \                     ??straightRepair_10: (+1)
   \   00000176   0x....             LDR.N    R1,??DataTable9_10
   \   00000178   0x6809             LDR      R1,[R1, #+0]
   \   0000017A   0x4281             CMP      R1,R0
   \   0000017C   0xDA19             BGE.N    ??straightRepair_12
    473              {
    474                if (255 == Img[index3][j] && 0 == Img[index3][j+1])
   \   0000017E   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000182   0x.... 0x....      LDR.W    R2,??DataTable12_5
   \   00000186   0x6812             LDR      R2,[R2, #+0]
   \   00000188   0x2350             MOVS     R3,#+80
   \   0000018A   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   0000018E   0x5C41             LDRB     R1,[R0, R1]
   \   00000190   0x29FF             CMP      R1,#+255
   \   00000192   0xD1EF             BNE.N    ??straightRepair_11
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000198   0x.... 0x....      LDR.W    R2,??DataTable12_5
   \   0000019C   0x6812             LDR      R2,[R2, #+0]
   \   0000019E   0x2350             MOVS     R3,#+80
   \   000001A0   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   000001A4   0x1841             ADDS     R1,R0,R1
   \   000001A6   0x7849             LDRB     R1,[R1, #+1]
   \   000001A8   0x2900             CMP      R1,#+0
   \   000001AA   0xD1E3             BNE.N    ??straightRepair_11
    475                {
    476                  col3 = j;
   \   000001AC   0x.... 0x....      LDR.W    R1,??DataTable12_6
   \   000001B0   0x6008             STR      R0,[R1, #+0]
    477                  break;
    478                }
    479              }
    480          
    481              
    482              //近处的点找到
    483              if (-1 != index3 && -1 != index4)
   \                     ??straightRepair_12: (+1)
   \   000001B2   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   000001B6   0x6800             LDR      R0,[R0, #+0]
   \   000001B8   0xF110 0x0F01      CMN      R0,#+1
   \   000001BC   0xF000 0x80C5      BEQ.W    ??straightRepair_0
   \   000001C0   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000001C4   0x6800             LDR      R0,[R0, #+0]
   \   000001C6   0xF110 0x0F01      CMN      R0,#+1
   \   000001CA   0xF000 0x80BE      BEQ.W    ??straightRepair_0
    484              { 
    485                  //isRepaired = 1; 
    486                if (col4 == col1)
   \   000001CE   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000001D2   0x6800             LDR      R0,[R0, #+0]
   \   000001D4   0x.... 0x....      LDR.W    R1,??DataTable12_1
   \   000001D8   0x6809             LDR      R1,[R1, #+0]
   \   000001DA   0x4288             CMP      R0,R1
   \   000001DC   0xD113             BNE.N    ??straightRepair_13
    487                {
    488                  for (i = index4; i <= index1; i++)
   \   000001DE   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000001E2   0x6801             LDR      R1,[R0, #+0]
   \                     ??straightRepair_14: (+1)
   \   000001E4   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   000001E8   0x6800             LDR      R0,[R0, #+0]
   \   000001EA   0x4288             CMP      R0,R1
   \   000001EC   0xDB4E             BLT.N    ??straightRepair_15
    489                  {
    490                    temp = col4;
   \   000001EE   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000001F2   0x6802             LDR      R2,[R0, #+0]
    491                    Img[i][temp] = 0;
   \   000001F4   0x2000             MOVS     R0,#+0
   \   000001F6   0x.... 0x....      LDR.W    R3,??DataTable10_1
   \   000001FA   0x2450             MOVS     R4,#+80
   \   000001FC   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   00000200   0x54D0             STRB     R0,[R2, R3]
    492                  }
   \   00000202   0x1C49             ADDS     R1,R1,#+1
   \   00000204   0xE7EE             B.N      ??straightRepair_14
    493                }
    494                else
    495                {
    496                  k1 = (index1 - index4)/((col4 - col1) * 1.0);
   \                     ??straightRepair_13: (+1)
   \   00000206   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   0000020A   0x6800             LDR      R0,[R0, #+0]
   \   0000020C   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   00000210   0x6809             LDR      R1,[R1, #+0]
   \   00000212   0x1A40             SUBS     R0,R0,R1
   \   00000214   0x.... 0x....      BL       __aeabi_i2d
   \   00000218   0x0004             MOVS     R4,R0
   \   0000021A   0x000D             MOVS     R5,R1
   \   0000021C   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000220   0x6800             LDR      R0,[R0, #+0]
   \   00000222   0x.... 0x....      LDR.W    R1,??DataTable12_1
   \   00000226   0x6809             LDR      R1,[R1, #+0]
   \   00000228   0x1A40             SUBS     R0,R0,R1
   \   0000022A   0x.... 0x....      BL       __aeabi_i2d
   \   0000022E   0x2200             MOVS     R2,#+0
   \   00000230   0x.... 0x....      LDR.W    R3,??DataTable12_7  ;; 0x3ff00000
   \   00000234   0x.... 0x....      BL       __aeabi_dmul
   \   00000238   0x0002             MOVS     R2,R0
   \   0000023A   0x000B             MOVS     R3,R1
   \   0000023C   0x0020             MOVS     R0,R4
   \   0000023E   0x0029             MOVS     R1,R5
   \   00000240   0x.... 0x....      BL       __aeabi_ddiv
   \   00000244   0x.... 0x....      BL       __aeabi_d2iz
    497                  for (i = index4; i <= index1; i++)
   \   00000248   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   0000024C   0x6809             LDR      R1,[R1, #+0]
   \   0000024E   0xE00A             B.N      ??straightRepair_16
    498                  {
    499                    temp = (index4 - i)/k1 + col4;
    500                    if (temp >= MAX_COL)
    501                    {
    502                      temp = MAX_COL-1;
    503                    }
    504                    else if(temp < 0)
   \                     ??straightRepair_17: (+1)
   \   00000250   0x2A00             CMP      R2,#+0
   \   00000252   0xD500             BPL.N    ??straightRepair_18
    505                    {
    506                      temp = 0;
   \   00000254   0x2200             MOVS     R2,#+0
    507                    }
    508                    Img[i][temp] = 128;
   \                     ??straightRepair_18: (+1)
   \   00000256   0x2380             MOVS     R3,#+128
   \   00000258   0x.... 0x....      LDR.W    R4,??DataTable10_1
   \   0000025C   0x2550             MOVS     R5,#+80
   \   0000025E   0xFB05 0x4401      MLA      R4,R5,R1,R4
   \   00000262   0x5513             STRB     R3,[R2, R4]
   \   00000264   0x1C49             ADDS     R1,R1,#+1
   \                     ??straightRepair_16: (+1)
   \   00000266   0x.... 0x....      LDR.W    R2,??DataTable10_4
   \   0000026A   0x6812             LDR      R2,[R2, #+0]
   \   0000026C   0x428A             CMP      R2,R1
   \   0000026E   0xDB0D             BLT.N    ??straightRepair_15
   \   00000270   0x.... 0x....      LDR.W    R2,??DataTable12_2
   \   00000274   0x6812             LDR      R2,[R2, #+0]
   \   00000276   0x1A52             SUBS     R2,R2,R1
   \   00000278   0xFB92 0xF2F0      SDIV     R2,R2,R0
   \   0000027C   0x.... 0x....      LDR.W    R3,??DataTable12_3
   \   00000280   0x681B             LDR      R3,[R3, #+0]
   \   00000282   0x189A             ADDS     R2,R3,R2
   \   00000284   0x2A50             CMP      R2,#+80
   \   00000286   0xDBE3             BLT.N    ??straightRepair_17
   \   00000288   0x224F             MOVS     R2,#+79
   \   0000028A   0xE7E4             B.N      ??straightRepair_18
    509                  }
    510                }
    511          
    512          
    513                if (col3 == col2)
   \                     ??straightRepair_15: (+1)
   \   0000028C   0x.... 0x....      LDR.W    R0,??DataTable12_6
   \   00000290   0x6800             LDR      R0,[R0, #+0]
   \   00000292   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   00000296   0x6809             LDR      R1,[R1, #+0]
   \   00000298   0x4288             CMP      R0,R1
   \   0000029A   0xD113             BNE.N    ??straightRepair_19
    514                {
    515                  for (i = index3; i <= index2; i++)
   \   0000029C   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   000002A0   0x6801             LDR      R1,[R0, #+0]
   \                     ??straightRepair_20: (+1)
   \   000002A2   0x.... 0x....      LDR.W    R0,??DataTable10_5
   \   000002A6   0x6800             LDR      R0,[R0, #+0]
   \   000002A8   0x4288             CMP      R0,R1
   \   000002AA   0xDB4E             BLT.N    ??straightRepair_0
    516                  {
    517                    temp = col3;
   \   000002AC   0x.... 0x....      LDR.W    R0,??DataTable12_6
   \   000002B0   0x6802             LDR      R2,[R0, #+0]
    518                    Img[i][temp] = 0;
   \   000002B2   0x2000             MOVS     R0,#+0
   \   000002B4   0x.... 0x....      LDR.W    R3,??DataTable10_1
   \   000002B8   0x2450             MOVS     R4,#+80
   \   000002BA   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   000002BE   0x54D0             STRB     R0,[R2, R3]
    519                  }
   \   000002C0   0x1C49             ADDS     R1,R1,#+1
   \   000002C2   0xE7EE             B.N      ??straightRepair_20
    520                }
    521                else
    522                {
    523                  k2 = (index2 - index3)/((col3 - col2) * 1.0);
   \                     ??straightRepair_19: (+1)
   \   000002C4   0x.... 0x....      LDR.W    R0,??DataTable10_5
   \   000002C8   0x6800             LDR      R0,[R0, #+0]
   \   000002CA   0x.... 0x....      LDR.W    R1,??DataTable12_5
   \   000002CE   0x6809             LDR      R1,[R1, #+0]
   \   000002D0   0x1A40             SUBS     R0,R0,R1
   \   000002D2   0x.... 0x....      BL       __aeabi_i2d
   \   000002D6   0x0004             MOVS     R4,R0
   \   000002D8   0x000D             MOVS     R5,R1
   \   000002DA   0x.... 0x....      LDR.W    R0,??DataTable12_6
   \   000002DE   0x6800             LDR      R0,[R0, #+0]
   \   000002E0   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   000002E4   0x6809             LDR      R1,[R1, #+0]
   \   000002E6   0x1A40             SUBS     R0,R0,R1
   \   000002E8   0x.... 0x....      BL       __aeabi_i2d
   \   000002EC   0x2200             MOVS     R2,#+0
   \   000002EE   0x.... 0x....      LDR.W    R3,??DataTable12_7  ;; 0x3ff00000
   \   000002F2   0x.... 0x....      BL       __aeabi_dmul
   \   000002F6   0x0002             MOVS     R2,R0
   \   000002F8   0x000B             MOVS     R3,R1
   \   000002FA   0x0020             MOVS     R0,R4
   \   000002FC   0x0029             MOVS     R1,R5
   \   000002FE   0x.... 0x....      BL       __aeabi_ddiv
   \   00000302   0x.... 0x....      BL       __aeabi_d2iz
    524                  for (i = index3; i <= index2; i++)
   \   00000306   0x.... 0x....      LDR.W    R1,??DataTable12_5
   \   0000030A   0x6809             LDR      R1,[R1, #+0]
   \   0000030C   0xE00A             B.N      ??straightRepair_21
    525                  {
    526                    temp = (index3 - i)/k2 + col3;
    527                    
    528                    if (temp >= MAX_COL)
    529                    {
    530                      temp = MAX_COL-1;
    531                    }
    532                    else if(temp < 0)
   \                     ??straightRepair_22: (+1)
   \   0000030E   0x2A00             CMP      R2,#+0
   \   00000310   0xD500             BPL.N    ??straightRepair_23
    533                    {
    534                      temp = 0;
   \   00000312   0x2200             MOVS     R2,#+0
    535                    }
    536                    Img[i][temp] = 254;
   \                     ??straightRepair_23: (+1)
   \   00000314   0x23FE             MOVS     R3,#+254
   \   00000316   0x.... 0x....      LDR.W    R4,??DataTable10_1
   \   0000031A   0x2550             MOVS     R5,#+80
   \   0000031C   0xFB05 0x4401      MLA      R4,R5,R1,R4
   \   00000320   0x5513             STRB     R3,[R2, R4]
   \   00000322   0x1C49             ADDS     R1,R1,#+1
   \                     ??straightRepair_21: (+1)
   \   00000324   0x.... 0x....      LDR.W    R2,??DataTable10_5
   \   00000328   0x6812             LDR      R2,[R2, #+0]
   \   0000032A   0x428A             CMP      R2,R1
   \   0000032C   0xDB0D             BLT.N    ??straightRepair_0
   \   0000032E   0x.... 0x....      LDR.W    R2,??DataTable12_5
   \   00000332   0x6812             LDR      R2,[R2, #+0]
   \   00000334   0x1A52             SUBS     R2,R2,R1
   \   00000336   0xFB92 0xF2F0      SDIV     R2,R2,R0
   \   0000033A   0x.... 0x....      LDR.W    R3,??DataTable12_6
   \   0000033E   0x681B             LDR      R3,[R3, #+0]
   \   00000340   0x189A             ADDS     R2,R3,R2
   \   00000342   0x2A50             CMP      R2,#+80
   \   00000344   0xDBE3             BLT.N    ??straightRepair_22
   \   00000346   0x224F             MOVS     R2,#+79
   \   00000348   0xE7E4             B.N      ??straightRepair_23
    537                  } 
    538                }
    539              } 
    540            }
    541          }
   \                     ??straightRepair_0: (+1)
   \   0000034A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    542          
    543          

   \                                 In section .text, align 2, keep-with-next
    544          void leftRepair()
    545          {
   \                     leftRepair: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0BD             SUB      SP,SP,#+244
    546            int i, j, k1, k2, temp;
    547            //第一行左端丢线(无index1
    548            if (vertical[0] <= 50 || leftDot[55] == 0)
   \   00000004   0x....             LDR.N    R0,??DataTable10_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x2833             CMP      R0,#+51
   \   0000000A   0xF2C0 0x819A      BLT.W    ??leftRepair_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable12_8
   \   00000012   0xF8D0 0x00DC      LDR      R0,[R0, #+220]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xF000 0x8193      BEQ.W    ??leftRepair_0
    549            {
    550          
    551            }
    552          
    553            //第一行不丢线
    554            else
    555            {
    556              //index1-----找左边界
    557              for (i = startLine; i >= endLine; i--)
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xE000             B.N      ??leftRepair_1
   \                     ??leftRepair_2: (+1)
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \                     ??leftRepair_1: (+1)
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xDB16             BLT.N    ??leftRepair_3
    558              {
    559                temp = leftDot[i] - leftDot[i - 1];
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable12_8
   \   00000034   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000038   0x.... 0x....      LDR.W    R2,??DataTable12_8
   \   0000003C   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000040   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   00000044   0x1A89             SUBS     R1,R1,R2
    560                if (temp >= 7 || temp <= -7)
   \   00000046   0x1D89             ADDS     R1,R1,#+6
   \   00000048   0x290D             CMP      R1,#+13
   \   0000004A   0xD3EB             BCC.N    ??leftRepair_2
    561                {
    562          //        temp = leftDot[i-1] - leftDot[i-2];
    563          //        if (temp < 0)
    564          //        {
    565          //          temp = temp * -1;
    566          //        }
    567          //        if (temp < 7)
    568          //        {
    569          //          //找到左边的点并记录
    570          //          index1 = i;
    571          //          col1 = leftDot[i];
    572          //          break;
    573          //        }
    574                  index1 = i;
   \   0000004C   0x....             LDR.N    R1,??DataTable10_4
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    575                  col1 = leftDot[i];
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable12_8
   \   00000054   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable12_1
   \   0000005C   0x6008             STR      R0,[R1, #+0]
    576                  break;
    577                }
    578              }
    579          
    580          
    581              //index2-----找上边界
    582              for (i = Right; i > Left; i--)
   \                     ??leftRepair_3: (+1)
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xE000             B.N      ??leftRepair_4
   \                     ??leftRepair_5: (+1)
   \   00000066   0x1E40             SUBS     R0,R0,#+1
   \                     ??leftRepair_4: (+1)
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable12_11
   \   0000006C   0x6809             LDR      R1,[R1, #+0]
   \   0000006E   0x4281             CMP      R1,R0
   \   00000070   0xDA19             BGE.N    ??leftRepair_6
    583              {
    584                temp = vertical[i] - vertical[i+1];
   \   00000072   0x....             LDR.N    R1,??DataTable10_3
   \   00000074   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000078   0x....             LDR.N    R2,??DataTable10_3
   \   0000007A   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   0000007E   0x6852             LDR      R2,[R2, #+4]
   \   00000080   0x1A89             SUBS     R1,R1,R2
    585                if (temp < 0)
   \   00000082   0x2900             CMP      R1,#+0
   \   00000084   0xD502             BPL.N    ??leftRepair_7
    586                {
    587                  temp = temp * -1;
   \   00000086   0xF05F 0x32FF      MOVS     R2,#-1
   \   0000008A   0x4351             MULS     R1,R2,R1
    588                }
    589                if (temp >= 10)
   \                     ??leftRepair_7: (+1)
   \   0000008C   0x290A             CMP      R1,#+10
   \   0000008E   0xDBEA             BLT.N    ??leftRepair_5
    590                {
    591          //        temp = vertical[i-1] - vertical[i];
    592          //        if (temp < 0)
    593          //        {
    594          //          temp = temp * -1;
    595          //        }
    596          //        if (temp <= 5)
    597          //        {
    598          //          index2 = vertical[i+1];
    599          //          col2 = i + 1;
    600          //          break;
    601          //        }
    602                  index2 = vertical[i+1];
   \   00000090   0x....             LDR.N    R1,??DataTable10_3
   \   00000092   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000096   0x6849             LDR      R1,[R1, #+4]
   \   00000098   0x.... 0x....      LDR.W    R2,??DataTable12_12
   \   0000009C   0x6011             STR      R1,[R2, #+0]
    603                  col2 = i+1;
   \   0000009E   0x1C40             ADDS     R0,R0,#+1
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   000000A4   0x6008             STR      R0,[R1, #+0]
    604                  break;
    605                }
    606              }
    607              
    608              //index3-----找左边黑点
    609              if (-1 != index2)
   \                     ??leftRepair_6: (+1)
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xF110 0x0F01      CMN      R0,#+1
   \   000000B0   0xF000 0x808A      BEQ.W    ??leftRepair_8
    610              {
    611                int leftBlack[60];
    612                for (i = index2; i > endLine; i--)
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0xE00D             B.N      ??leftRepair_9
    613                {
    614                  for (j = col2 - 3; j >= 0; j--)
   \                     ??leftRepair_10: (+1)
   \   000000BC   0x1E49             SUBS     R1,R1,#+1
   \                     ??leftRepair_11: (+1)
   \   000000BE   0x2900             CMP      R1,#+0
   \   000000C0   0xD406             BMI.N    ??leftRepair_12
    615                  {
    616                    if (0 == Img[i][j])
   \   000000C2   0x....             LDR.N    R2,??DataTable10_1
   \   000000C4   0x2350             MOVS     R3,#+80
   \   000000C6   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   000000CA   0x5C8A             LDRB     R2,[R1, R2]
   \   000000CC   0x2A00             CMP      R2,#+0
   \   000000CE   0xD1F5             BNE.N    ??leftRepair_10
    617                    {
    618                      break;
    619                    }  
    620                  }
    621                  leftBlack[i] = j;
   \                     ??leftRepair_12: (+1)
   \   000000D0   0xAA00             ADD      R2,SP,#+0
   \   000000D2   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   000000D6   0x1E40             SUBS     R0,R0,#+1
   \                     ??leftRepair_9: (+1)
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000000DC   0x6809             LDR      R1,[R1, #+0]
   \   000000DE   0x4281             CMP      R1,R0
   \   000000E0   0xDA04             BGE.N    ??leftRepair_13
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   000000E6   0x6809             LDR      R1,[R1, #+0]
   \   000000E8   0x1EC9             SUBS     R1,R1,#+3
   \   000000EA   0xE7E8             B.N      ??leftRepair_11
    622                }
    623          
    624                for (i = index2; i > endLine; i--)
   \                     ??leftRepair_13: (+1)
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0xE019             B.N      ??leftRepair_14
    625                {
    626                  temp = leftBlack[i-1] - leftBlack[i];
   \                     ??leftRepair_15: (+1)
   \   000000F4   0xA900             ADD      R1,SP,#+0
   \   000000F6   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   000000FA   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   000000FE   0xAA00             ADD      R2,SP,#+0
   \   00000100   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000104   0x1A89             SUBS     R1,R1,R2
    627                  if (temp >= 7 || temp <= -7)
   \   00000106   0x1D89             ADDS     R1,R1,#+6
   \   00000108   0x290D             CMP      R1,#+13
   \   0000010A   0xD30C             BCC.N    ??leftRepair_16
    628                  {
    629          //          temp = leftBlack[i-1] - col2;
    630          //          if (temp > -15 && temp < 15)
    631          //          {
    632          //            index3 = i-1;
    633          //            col3 = leftBlack[index3];
    634          //            break;
    635          //          }
    636                    index3 = i - 1;
   \   0000010C   0x1E41             SUBS     R1,R0,#+1
   \   0000010E   0x.... 0x....      LDR.W    R2,??DataTable12_5
   \   00000112   0x6011             STR      R1,[R2, #+0]
    637                    col3 = leftBlack[index3];
   \   00000114   0xA900             ADD      R1,SP,#+0
   \   00000116   0x.... 0x....      LDR.W    R2,??DataTable12_5
   \   0000011A   0x6812             LDR      R2,[R2, #+0]
   \   0000011C   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000120   0x.... 0x....      LDR.W    R2,??DataTable12_6
   \   00000124   0x6011             STR      R1,[R2, #+0]
    638                  }
    639                }
   \                     ??leftRepair_16: (+1)
   \   00000126   0x1E40             SUBS     R0,R0,#+1
   \                     ??leftRepair_14: (+1)
   \   00000128   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000012C   0x6809             LDR      R1,[R1, #+0]
   \   0000012E   0x4281             CMP      R1,R0
   \   00000130   0xDBE0             BLT.N    ??leftRepair_15
    640                
    641                //确认index3位置
    642                for (j = col3; j > 0; j--)
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable12_6
   \   00000136   0x6801             LDR      R1,[R0, #+0]
   \   00000138   0xE000             B.N      ??leftRepair_17
   \                     ??leftRepair_18: (+1)
   \   0000013A   0x1E49             SUBS     R1,R1,#+1
   \                     ??leftRepair_17: (+1)
   \   0000013C   0x2901             CMP      R1,#+1
   \   0000013E   0xDB17             BLT.N    ??leftRepair_19
    643                {
    644                  if (255 == Img[index3][j] && 0 == Img[index3][j+1])
   \   00000140   0x....             LDR.N    R0,??DataTable10_1
   \   00000142   0x.... 0x....      LDR.W    R2,??DataTable12_5
   \   00000146   0x6812             LDR      R2,[R2, #+0]
   \   00000148   0x2350             MOVS     R3,#+80
   \   0000014A   0xFB03 0x0002      MLA      R0,R3,R2,R0
   \   0000014E   0x5C08             LDRB     R0,[R1, R0]
   \   00000150   0x28FF             CMP      R0,#+255
   \   00000152   0xD1F2             BNE.N    ??leftRepair_18
   \   00000154   0x....             LDR.N    R0,??DataTable10_1
   \   00000156   0x.... 0x....      LDR.W    R2,??DataTable12_5
   \   0000015A   0x6812             LDR      R2,[R2, #+0]
   \   0000015C   0x2350             MOVS     R3,#+80
   \   0000015E   0xFB03 0x0002      MLA      R0,R3,R2,R0
   \   00000162   0x1808             ADDS     R0,R1,R0
   \   00000164   0x7840             LDRB     R0,[R0, #+1]
   \   00000166   0x2800             CMP      R0,#+0
   \   00000168   0xD1E7             BNE.N    ??leftRepair_18
    645                  {
    646                    col3 = j;
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable12_6
   \   0000016E   0x6001             STR      R1,[R0, #+0]
    647                    break;
    648                  }
    649                }
    650                
    651                //index4
    652                if (-1 != index3)
   \                     ??leftRepair_19: (+1)
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   00000174   0x6800             LDR      R0,[R0, #+0]
   \   00000176   0xF110 0x0F01      CMN      R0,#+1
   \   0000017A   0xD025             BEQ.N    ??leftRepair_8
    653                {
    654                  index4 = index3;
   \   0000017C   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   00000180   0x6800             LDR      R0,[R0, #+0]
   \   00000182   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   00000186   0x6008             STR      R0,[R1, #+0]
    655                  for (j = col3; j > 0; j--)
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable12_6
   \   0000018C   0x6801             LDR      R1,[R0, #+0]
   \   0000018E   0xE000             B.N      ??leftRepair_20
   \                     ??leftRepair_21: (+1)
   \   00000190   0x1E49             SUBS     R1,R1,#+1
   \                     ??leftRepair_20: (+1)
   \   00000192   0x2901             CMP      R1,#+1
   \   00000194   0xDB18             BLT.N    ??leftRepair_8
    656                  {
    657                    if (255 == Img[index3][j] && 0 == Img[index3][j-1])
   \   00000196   0x....             LDR.N    R0,??DataTable10_1
   \   00000198   0x.... 0x....      LDR.W    R2,??DataTable12_5
   \   0000019C   0x6812             LDR      R2,[R2, #+0]
   \   0000019E   0x2350             MOVS     R3,#+80
   \   000001A0   0xFB03 0x0002      MLA      R0,R3,R2,R0
   \   000001A4   0x5C08             LDRB     R0,[R1, R0]
   \   000001A6   0x28FF             CMP      R0,#+255
   \   000001A8   0xD1F2             BNE.N    ??leftRepair_21
   \   000001AA   0x....             LDR.N    R0,??DataTable10_1
   \   000001AC   0x.... 0x....      LDR.W    R2,??DataTable12_5
   \   000001B0   0x6812             LDR      R2,[R2, #+0]
   \   000001B2   0x2350             MOVS     R3,#+80
   \   000001B4   0xFB03 0x0002      MLA      R0,R3,R2,R0
   \   000001B8   0x1808             ADDS     R0,R1,R0
   \   000001BA   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   000001BE   0x2800             CMP      R0,#+0
   \   000001C0   0xD1E6             BNE.N    ??leftRepair_21
    658                    {
    659                      col4 = j;
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000001C6   0x6001             STR      R1,[R0, #+0]
    660                      break;
    661                    }
    662                  }
    663                  //col4 = leftBlack[index3+1];
    664                }
    665              }
    666              
    667              
    668          
    669              //四个点都找到
    670              if (-1 != index3 && -1 != index4)
   \                     ??leftRepair_8: (+1)
   \   000001C8   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   000001CC   0x6800             LDR      R0,[R0, #+0]
   \   000001CE   0xF110 0x0F01      CMN      R0,#+1
   \   000001D2   0xF000 0x80B6      BEQ.W    ??leftRepair_0
   \   000001D6   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000001DA   0x6800             LDR      R0,[R0, #+0]
   \   000001DC   0xF110 0x0F01      CMN      R0,#+1
   \   000001E0   0xF000 0x80AF      BEQ.W    ??leftRepair_0
    671              {
    672                if (col4 == col1)
   \   000001E4   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000001E8   0x6800             LDR      R0,[R0, #+0]
   \   000001EA   0x.... 0x....      LDR.W    R1,??DataTable12_1
   \   000001EE   0x6809             LDR      R1,[R1, #+0]
   \   000001F0   0x4288             CMP      R0,R1
   \   000001F2   0xD111             BNE.N    ??leftRepair_22
    673                {
    674                  for (int i = index4; i <= index1; i++)
   \   000001F4   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000001F8   0x6800             LDR      R0,[R0, #+0]
   \                     ??leftRepair_23: (+1)
   \   000001FA   0x....             LDR.N    R1,??DataTable10_4
   \   000001FC   0x6809             LDR      R1,[R1, #+0]
   \   000001FE   0x4281             CMP      R1,R0
   \   00000200   0xDB46             BLT.N    ??leftRepair_24
    675                  {
    676                    temp = col4;
   \   00000202   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   00000206   0x6809             LDR      R1,[R1, #+0]
    677                    Img[i][temp] = 0;
   \   00000208   0x2200             MOVS     R2,#+0
   \   0000020A   0x....             LDR.N    R3,??DataTable10_1
   \   0000020C   0x2450             MOVS     R4,#+80
   \   0000020E   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   00000212   0x54CA             STRB     R2,[R1, R3]
    678                  }
   \   00000214   0x1C40             ADDS     R0,R0,#+1
   \   00000216   0xE7F0             B.N      ??leftRepair_23
    679                }
    680                else
    681                {
    682                  k1 = (index1 - index4)/((col4 - col1) * 1.0);
   \                     ??leftRepair_22: (+1)
   \   00000218   0x....             LDR.N    R0,??DataTable10_4
   \   0000021A   0x6800             LDR      R0,[R0, #+0]
   \   0000021C   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   00000220   0x6809             LDR      R1,[R1, #+0]
   \   00000222   0x1A40             SUBS     R0,R0,R1
   \   00000224   0x.... 0x....      BL       __aeabi_i2d
   \   00000228   0x0004             MOVS     R4,R0
   \   0000022A   0x000D             MOVS     R5,R1
   \   0000022C   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000230   0x6800             LDR      R0,[R0, #+0]
   \   00000232   0x.... 0x....      LDR.W    R1,??DataTable12_1
   \   00000236   0x6809             LDR      R1,[R1, #+0]
   \   00000238   0x1A40             SUBS     R0,R0,R1
   \   0000023A   0x.... 0x....      BL       __aeabi_i2d
   \   0000023E   0x2200             MOVS     R2,#+0
   \   00000240   0x.... 0x....      LDR.W    R3,??DataTable12_7  ;; 0x3ff00000
   \   00000244   0x.... 0x....      BL       __aeabi_dmul
   \   00000248   0x0002             MOVS     R2,R0
   \   0000024A   0x000B             MOVS     R3,R1
   \   0000024C   0x0020             MOVS     R0,R4
   \   0000024E   0x0029             MOVS     R1,R5
   \   00000250   0x.... 0x....      BL       __aeabi_ddiv
   \   00000254   0x.... 0x....      BL       __aeabi_d2iz
    683                  
    684                  for (int i = index4; i <= index1; i++)
   \   00000258   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   0000025C   0x680A             LDR      R2,[R1, #+0]
   \   0000025E   0xE013             B.N      ??leftRepair_25
    685                  {
    686                    temp = (index4 - i)/k1 + col4;
   \                     ??leftRepair_26: (+1)
   \   00000260   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   00000264   0x6809             LDR      R1,[R1, #+0]
   \   00000266   0x1A89             SUBS     R1,R1,R2
   \   00000268   0xFB91 0xF1F0      SDIV     R1,R1,R0
   \   0000026C   0x.... 0x....      LDR.W    R3,??DataTable12_3
   \   00000270   0x681B             LDR      R3,[R3, #+0]
   \   00000272   0x1859             ADDS     R1,R3,R1
    687                    if (temp >= 80)
   \   00000274   0x2950             CMP      R1,#+80
   \   00000276   0xDB00             BLT.N    ??leftRepair_27
    688                    {
    689                      temp = 79;
   \   00000278   0x214F             MOVS     R1,#+79
    690                    }
    691                    Img[i][temp] = 0;
   \                     ??leftRepair_27: (+1)
   \   0000027A   0x2300             MOVS     R3,#+0
   \   0000027C   0x....             LDR.N    R4,??DataTable10_1
   \   0000027E   0x2550             MOVS     R5,#+80
   \   00000280   0xFB05 0x4402      MLA      R4,R5,R2,R4
   \   00000284   0x550B             STRB     R3,[R1, R4]
    692                  }
   \   00000286   0x1C52             ADDS     R2,R2,#+1
   \                     ??leftRepair_25: (+1)
   \   00000288   0x....             LDR.N    R1,??DataTable10_4
   \   0000028A   0x6809             LDR      R1,[R1, #+0]
   \   0000028C   0x4291             CMP      R1,R2
   \   0000028E   0xDAE7             BGE.N    ??leftRepair_26
    693                }
    694          
    695          
    696                if (col3 == col2)
   \                     ??leftRepair_24: (+1)
   \   00000290   0x.... 0x....      LDR.W    R0,??DataTable12_6
   \   00000294   0x6800             LDR      R0,[R0, #+0]
   \   00000296   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   0000029A   0x6809             LDR      R1,[R1, #+0]
   \   0000029C   0x4288             CMP      R0,R1
   \   0000029E   0xD112             BNE.N    ??leftRepair_28
    697                {
    698                  for (int i = index3; i <= index2; i++)
   \   000002A0   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   000002A4   0x6800             LDR      R0,[R0, #+0]
   \                     ??leftRepair_29: (+1)
   \   000002A6   0x.... 0x....      LDR.W    R1,??DataTable12_12
   \   000002AA   0x6809             LDR      R1,[R1, #+0]
   \   000002AC   0x4281             CMP      R1,R0
   \   000002AE   0xDB48             BLT.N    ??leftRepair_0
    699                  {
    700                    temp = col3;
   \   000002B0   0x.... 0x....      LDR.W    R1,??DataTable12_6
   \   000002B4   0x6809             LDR      R1,[R1, #+0]
    701                    Img[i][temp] = 0;
   \   000002B6   0x2200             MOVS     R2,#+0
   \   000002B8   0x....             LDR.N    R3,??DataTable10_1
   \   000002BA   0x2450             MOVS     R4,#+80
   \   000002BC   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   000002C0   0x54CA             STRB     R2,[R1, R3]
    702                  }
   \   000002C2   0x1C40             ADDS     R0,R0,#+1
   \   000002C4   0xE7EF             B.N      ??leftRepair_29
    703                }
    704                else
    705                {
    706                  k2 = (index2 - index3)/((col3 - col2) * 1.0);
   \                     ??leftRepair_28: (+1)
   \   000002C6   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   000002CA   0x6800             LDR      R0,[R0, #+0]
   \   000002CC   0x.... 0x....      LDR.W    R1,??DataTable12_5
   \   000002D0   0x6809             LDR      R1,[R1, #+0]
   \   000002D2   0x1A40             SUBS     R0,R0,R1
   \   000002D4   0x.... 0x....      BL       __aeabi_i2d
   \   000002D8   0x0004             MOVS     R4,R0
   \   000002DA   0x000D             MOVS     R5,R1
   \   000002DC   0x.... 0x....      LDR.W    R0,??DataTable12_6
   \   000002E0   0x6800             LDR      R0,[R0, #+0]
   \   000002E2   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   000002E6   0x6809             LDR      R1,[R1, #+0]
   \   000002E8   0x1A40             SUBS     R0,R0,R1
   \   000002EA   0x.... 0x....      BL       __aeabi_i2d
   \   000002EE   0x2200             MOVS     R2,#+0
   \   000002F0   0x.... 0x....      LDR.W    R3,??DataTable12_7  ;; 0x3ff00000
   \   000002F4   0x.... 0x....      BL       __aeabi_dmul
   \   000002F8   0x0002             MOVS     R2,R0
   \   000002FA   0x000B             MOVS     R3,R1
   \   000002FC   0x0020             MOVS     R0,R4
   \   000002FE   0x0029             MOVS     R1,R5
   \   00000300   0x.... 0x....      BL       __aeabi_ddiv
   \   00000304   0x.... 0x....      BL       __aeabi_d2iz
    707                  for (int i = index3; i <= index2; i++)
   \   00000308   0x.... 0x....      LDR.W    R1,??DataTable12_5
   \   0000030C   0x680A             LDR      R2,[R1, #+0]
   \   0000030E   0xE013             B.N      ??leftRepair_30
    708                  {
    709                    temp = (index3 - i)/k2 + col3;
   \                     ??leftRepair_31: (+1)
   \   00000310   0x.... 0x....      LDR.W    R1,??DataTable12_5
   \   00000314   0x6809             LDR      R1,[R1, #+0]
   \   00000316   0x1A89             SUBS     R1,R1,R2
   \   00000318   0xFB91 0xF1F0      SDIV     R1,R1,R0
   \   0000031C   0x.... 0x....      LDR.W    R3,??DataTable12_6
   \   00000320   0x681B             LDR      R3,[R3, #+0]
   \   00000322   0x1859             ADDS     R1,R3,R1
    710                    if (temp >= 80)
   \   00000324   0x2950             CMP      R1,#+80
   \   00000326   0xDB00             BLT.N    ??leftRepair_32
    711                    {
    712                      temp = 79;
   \   00000328   0x214F             MOVS     R1,#+79
    713                    }
    714                    Img[i][temp] = 0;
   \                     ??leftRepair_32: (+1)
   \   0000032A   0x2300             MOVS     R3,#+0
   \   0000032C   0x....             LDR.N    R4,??DataTable10_1
   \   0000032E   0x2550             MOVS     R5,#+80
   \   00000330   0xFB05 0x4402      MLA      R4,R5,R2,R4
   \   00000334   0x550B             STRB     R3,[R1, R4]
    715                  }
   \   00000336   0x1C52             ADDS     R2,R2,#+1
   \                     ??leftRepair_30: (+1)
   \   00000338   0x.... 0x....      LDR.W    R1,??DataTable12_12
   \   0000033C   0x6809             LDR      R1,[R1, #+0]
   \   0000033E   0x4291             CMP      R1,R2
   \   00000340   0xDAE6             BGE.N    ??leftRepair_31
    716                }
    717              }
    718            }
    719          }
   \                     ??leftRepair_0: (+1)
   \   00000342   0xB03D             ADD      SP,SP,#+244
   \   00000344   0xBD30             POP      {R4,R5,PC}       ;; return
    720          
    721          

   \                                 In section .text, align 2, keep-with-next
    722          void rightRepair()
    723          {
   \                     rightRepair: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0BD             SUB      SP,SP,#+244
    724            int k1, k2, temp;
    725            //第一行右端丢线(即找不到index1
    726            if (vertical[79] <= 50 || rightDot[55] == 79)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable12_13
   \   00000008   0xF8D0 0x013C      LDR      R0,[R0, #+316]
   \   0000000C   0x2833             CMP      R0,#+51
   \   0000000E   0xF2C0 0x8179      BLT.W    ??rightRepair_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable12_14
   \   00000016   0xF8D0 0x00DC      LDR      R0,[R0, #+220]
   \   0000001A   0x284F             CMP      R0,#+79
   \   0000001C   0xF000 0x8172      BEQ.W    ??rightRepair_0
    727            {
    728              //isRepaired = 0;
    729              //crossRightError();
    730            }
    731          
    732            //第一行不丢线
    733            else
    734            {
    735              int i , j;
    736              //index1-----找右边界
    737              for (i = 59; i >= endLine; i--)
   \   00000020   0x213B             MOVS     R1,#+59
   \   00000022   0xE000             B.N      ??rightRepair_1
   \                     ??rightRepair_2: (+1)
   \   00000024   0x1E49             SUBS     R1,R1,#+1
   \                     ??rightRepair_1: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable12
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x4281             CMP      R1,R0
   \   0000002E   0xDB1B             BLT.N    ??rightRepair_3
    738              {
    739                temp = rightDot[i] - rightDot[i - 1];
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable12_14
   \   00000034   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000038   0x.... 0x....      LDR.W    R2,??DataTable12_14
   \   0000003C   0xEB12 0x0281      ADDS     R2,R2,R1, LSL #+2
   \   00000040   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   00000044   0x1A82             SUBS     R2,R0,R2
    740                if (temp < 0)
   \   00000046   0x2A00             CMP      R2,#+0
   \   00000048   0xD502             BPL.N    ??rightRepair_4
    741                {
    742                  temp = temp * -1;
   \   0000004A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000004E   0x4342             MULS     R2,R0,R2
    743                }
    744                if (temp >= 7)
   \                     ??rightRepair_4: (+1)
   \   00000050   0x2A07             CMP      R2,#+7
   \   00000052   0xDBE7             BLT.N    ??rightRepair_2
    745                {
    746          //        temp = rightDot[i-1] - rightDot[i-2];
    747          //        if (temp < 0)
    748          //        {
    749          //          temp = temp * -1;
    750          //        }
    751          //        if (temp < 7)
    752          //        {
    753          //          //找到右边的点并记录
    754          //          index1 = i;
    755          //          col1 = rightDot[i];
    756          //          break;
    757          //        }
    758                  index1 = i;
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable12_15
   \   00000058   0x6001             STR      R1,[R0, #+0]
    759                  col1 = rightDot[i];
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable12_14
   \   0000005E   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable12_1
   \   00000066   0x6008             STR      R0,[R1, #+0]
    760                  break;
    761                }
    762              }
    763          
    764          
    765              //index2-----找上边界
    766              for (i = Left; i < Right; i++)
   \                     ??rightRepair_3: (+1)
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   0000006C   0x6801             LDR      R1,[R0, #+0]
   \   0000006E   0xE000             B.N      ??rightRepair_5
   \                     ??rightRepair_6: (+1)
   \   00000070   0x1C49             ADDS     R1,R1,#+1
   \                     ??rightRepair_5: (+1)
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x4281             CMP      R1,R0
   \   0000007A   0xDA1A             BGE.N    ??rightRepair_7
    767              {
    768                temp = vertical[i] - vertical[i+1];
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable12_13
   \   00000080   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000084   0x.... 0x....      LDR.W    R2,??DataTable12_13
   \   00000088   0xEB12 0x0281      ADDS     R2,R2,R1, LSL #+2
   \   0000008C   0x6852             LDR      R2,[R2, #+4]
   \   0000008E   0x1A82             SUBS     R2,R0,R2
    769                if (temp < 0)
   \   00000090   0x2A00             CMP      R2,#+0
   \   00000092   0xD502             BPL.N    ??rightRepair_8
    770                {
    771                  temp = temp * -1;
   \   00000094   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000098   0x4342             MULS     R2,R0,R2
    772                }
    773                if (temp >= 10)
   \                     ??rightRepair_8: (+1)
   \   0000009A   0x2A0A             CMP      R2,#+10
   \   0000009C   0xDBE8             BLT.N    ??rightRepair_6
    774                {
    775          //        temp = vertical[i-1] - vertical[i];
    776          //        if (temp < 0)
    777          //        {
    778          //          temp = temp * -1;
    779          //        }
    780          //        if (temp <= 5)
    781          //        {
    782          //          index2 = vertical[i];
    783          //          col2 = i;
    784          //          break;
    785          //        }
    786                  index2 = vertical[i];
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable12_13
   \   000000A2   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   000000A6   0x.... 0x....      LDR.W    R2,??DataTable12_12
   \   000000AA   0x6010             STR      R0,[R2, #+0]
    787                  col2 = i;
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   000000B0   0x6001             STR      R1,[R0, #+0]
    788                  break;
    789                }
    790              }
    791          
    792            
    793              if (-1 != index2)
   \                     ??rightRepair_7: (+1)
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   000000B6   0x6800             LDR      R0,[R0, #+0]
   \   000000B8   0xF110 0x0F01      CMN      R0,#+1
   \   000000BC   0xD078             BEQ.N    ??rightRepair_9
    794              {
    795                //index3-----找右黑点
    796                int rightBlack[60];
    797                for (i = index2; i >= endLine; i--)
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   000000C2   0x6801             LDR      R1,[R0, #+0]
   \   000000C4   0xE00E             B.N      ??rightRepair_10
    798                {
    799                  for (j = col2 + 3; j < 80; j++)
   \                     ??rightRepair_11: (+1)
   \   000000C6   0x1C40             ADDS     R0,R0,#+1
   \                     ??rightRepair_12: (+1)
   \   000000C8   0x2850             CMP      R0,#+80
   \   000000CA   0xDA07             BGE.N    ??rightRepair_13
    800                  {
    801                    if (0 == Img[i][j])
   \   000000CC   0x.... 0x....      LDR.W    R2,??DataTable12_16
   \   000000D0   0x2350             MOVS     R3,#+80
   \   000000D2   0xFB03 0x2201      MLA      R2,R3,R1,R2
   \   000000D6   0x5C82             LDRB     R2,[R0, R2]
   \   000000D8   0x2A00             CMP      R2,#+0
   \   000000DA   0xD1F4             BNE.N    ??rightRepair_11
    802                    {
    803                      break;
    804                    }  
    805                  }
    806                  rightBlack[i] = j;
   \                     ??rightRepair_13: (+1)
   \   000000DC   0xAA00             ADD      R2,SP,#+0
   \   000000DE   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   000000E2   0x1E49             SUBS     R1,R1,#+1
   \                     ??rightRepair_10: (+1)
   \   000000E4   0x....             LDR.N    R0,??DataTable12
   \   000000E6   0x6800             LDR      R0,[R0, #+0]
   \   000000E8   0x4281             CMP      R1,R0
   \   000000EA   0xDB03             BLT.N    ??rightRepair_14
   \   000000EC   0x....             LDR.N    R0,??DataTable12_4
   \   000000EE   0x6800             LDR      R0,[R0, #+0]
   \   000000F0   0x1CC0             ADDS     R0,R0,#+3
   \   000000F2   0xE7E9             B.N      ??rightRepair_12
    807                }
    808                for (i = index2; i >= endLine; i--)
   \                     ??rightRepair_14: (+1)
   \   000000F4   0x....             LDR.N    R0,??DataTable12_12
   \   000000F6   0x6801             LDR      R1,[R0, #+0]
   \   000000F8   0xE000             B.N      ??rightRepair_15
   \                     ??rightRepair_16: (+1)
   \   000000FA   0x1E49             SUBS     R1,R1,#+1
   \                     ??rightRepair_15: (+1)
   \   000000FC   0x....             LDR.N    R0,??DataTable12
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0x4281             CMP      R1,R0
   \   00000102   0xDB15             BLT.N    ??rightRepair_17
    809                {
    810                  temp = rightBlack[i-1] - rightBlack[i];
   \   00000104   0xA800             ADD      R0,SP,#+0
   \   00000106   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   0000010A   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   0000010E   0xAA00             ADD      R2,SP,#+0
   \   00000110   0xF852 0x2021      LDR      R2,[R2, R1, LSL #+2]
   \   00000114   0x1A82             SUBS     R2,R0,R2
    811                  if (temp >= 7 || temp <= -7)
   \   00000116   0x1D90             ADDS     R0,R2,#+6
   \   00000118   0x280D             CMP      R0,#+13
   \   0000011A   0xD3EE             BCC.N    ??rightRepair_16
    812                  {
    813          //          temp = rightBlack[i-1] - col2;
    814          //          if (temp > -15 && temp < 15)
    815          //          {
    816          //            index3 = i - 1;
    817          //            col3 = rightBlack[index3];
    818          //            break;
    819          //          }
    820                    index3 = i - 1;
   \   0000011C   0x1E48             SUBS     R0,R1,#+1
   \   0000011E   0x....             LDR.N    R1,??DataTable12_5
   \   00000120   0x6008             STR      R0,[R1, #+0]
    821                    col3 = rightBlack[index3];
   \   00000122   0xA800             ADD      R0,SP,#+0
   \   00000124   0x....             LDR.N    R1,??DataTable12_5
   \   00000126   0x6809             LDR      R1,[R1, #+0]
   \   00000128   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000012C   0x....             LDR.N    R1,??DataTable12_6
   \   0000012E   0x6008             STR      R0,[R1, #+0]
    822                    break;
    823                  }
    824                }
    825                
    826                for (j = col3; j < 80; j++)
   \                     ??rightRepair_17: (+1)
   \   00000130   0x....             LDR.N    R0,??DataTable12_6
   \   00000132   0x6800             LDR      R0,[R0, #+0]
   \   00000134   0xE000             B.N      ??rightRepair_18
   \                     ??rightRepair_19: (+1)
   \   00000136   0x1C40             ADDS     R0,R0,#+1
   \                     ??rightRepair_18: (+1)
   \   00000138   0x2850             CMP      R0,#+80
   \   0000013A   0xDA15             BGE.N    ??rightRepair_20
    827                {
    828                  if (255 == Img[index3][j] && 0 == Img[index3][j-1])
   \   0000013C   0x....             LDR.N    R1,??DataTable12_16
   \   0000013E   0x....             LDR.N    R2,??DataTable12_5
   \   00000140   0x6812             LDR      R2,[R2, #+0]
   \   00000142   0x2350             MOVS     R3,#+80
   \   00000144   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000148   0x5C41             LDRB     R1,[R0, R1]
   \   0000014A   0x29FF             CMP      R1,#+255
   \   0000014C   0xD1F3             BNE.N    ??rightRepair_19
   \   0000014E   0x....             LDR.N    R1,??DataTable12_16
   \   00000150   0x....             LDR.N    R2,??DataTable12_5
   \   00000152   0x6812             LDR      R2,[R2, #+0]
   \   00000154   0x2350             MOVS     R3,#+80
   \   00000156   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   0000015A   0x1841             ADDS     R1,R0,R1
   \   0000015C   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000160   0x2900             CMP      R1,#+0
   \   00000162   0xD1E8             BNE.N    ??rightRepair_19
    829                  {
    830                    col3 = j;
   \   00000164   0x....             LDR.N    R1,??DataTable12_6
   \   00000166   0x6008             STR      R0,[R1, #+0]
    831                    break;
    832                  }
    833                }
    834          
    835                //index4
    836                if (-1 != index3)
   \                     ??rightRepair_20: (+1)
   \   00000168   0x....             LDR.N    R0,??DataTable12_5
   \   0000016A   0x6800             LDR      R0,[R0, #+0]
   \   0000016C   0xF110 0x0F01      CMN      R0,#+1
   \   00000170   0xD01E             BEQ.N    ??rightRepair_9
    837                {
    838                  index4 = index3;
   \   00000172   0x....             LDR.N    R0,??DataTable12_5
   \   00000174   0x6800             LDR      R0,[R0, #+0]
   \   00000176   0x....             LDR.N    R1,??DataTable12_2
   \   00000178   0x6008             STR      R0,[R1, #+0]
    839                  for (j = col3; j < 80; j++)
   \   0000017A   0x....             LDR.N    R0,??DataTable12_6
   \   0000017C   0x6800             LDR      R0,[R0, #+0]
   \   0000017E   0xE000             B.N      ??rightRepair_21
   \                     ??rightRepair_22: (+1)
   \   00000180   0x1C40             ADDS     R0,R0,#+1
   \                     ??rightRepair_21: (+1)
   \   00000182   0x2850             CMP      R0,#+80
   \   00000184   0xDA14             BGE.N    ??rightRepair_9
    840                  {
    841                    if (255 == Img[index3][j] && 0 == Img[index3][j+1])
   \   00000186   0x....             LDR.N    R1,??DataTable12_16
   \   00000188   0x....             LDR.N    R2,??DataTable12_5
   \   0000018A   0x6812             LDR      R2,[R2, #+0]
   \   0000018C   0x2350             MOVS     R3,#+80
   \   0000018E   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000192   0x5C41             LDRB     R1,[R0, R1]
   \   00000194   0x29FF             CMP      R1,#+255
   \   00000196   0xD1F3             BNE.N    ??rightRepair_22
   \   00000198   0x....             LDR.N    R1,??DataTable12_16
   \   0000019A   0x....             LDR.N    R2,??DataTable12_5
   \   0000019C   0x6812             LDR      R2,[R2, #+0]
   \   0000019E   0x2350             MOVS     R3,#+80
   \   000001A0   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   000001A4   0x1841             ADDS     R1,R0,R1
   \   000001A6   0x7849             LDRB     R1,[R1, #+1]
   \   000001A8   0x2900             CMP      R1,#+0
   \   000001AA   0xD1E9             BNE.N    ??rightRepair_22
    842                    {
    843                      col4 = j;
   \   000001AC   0x....             LDR.N    R1,??DataTable12_3
   \   000001AE   0x6008             STR      R0,[R1, #+0]
    844                      break;
    845                    }
    846                  }
    847                  //col4 = rightBlack[index3+1];
    848                }
    849              }
    850              
    851              
    852              //四个点都找到
    853              if (-1 != index3 && -1 != index4)
   \                     ??rightRepair_9: (+1)
   \   000001B0   0x....             LDR.N    R0,??DataTable12_5
   \   000001B2   0x6800             LDR      R0,[R0, #+0]
   \   000001B4   0xF110 0x0F01      CMN      R0,#+1
   \   000001B8   0xF000 0x80A4      BEQ.W    ??rightRepair_0
   \   000001BC   0x....             LDR.N    R0,??DataTable12_2
   \   000001BE   0x6800             LDR      R0,[R0, #+0]
   \   000001C0   0xF110 0x0F01      CMN      R0,#+1
   \   000001C4   0xF000 0x809E      BEQ.W    ??rightRepair_0
    854              {  
    855                if (col4 == col1)
   \   000001C8   0x....             LDR.N    R0,??DataTable12_3
   \   000001CA   0x6800             LDR      R0,[R0, #+0]
   \   000001CC   0x....             LDR.N    R1,??DataTable12_1
   \   000001CE   0x6809             LDR      R1,[R1, #+0]
   \   000001D0   0x4288             CMP      R0,R1
   \   000001D2   0xD10F             BNE.N    ??rightRepair_23
    856                {
    857                  for (i = index4; i <= index1; i++)
   \   000001D4   0x....             LDR.N    R0,??DataTable12_2
   \   000001D6   0x6801             LDR      R1,[R0, #+0]
   \                     ??rightRepair_24: (+1)
   \   000001D8   0x....             LDR.N    R0,??DataTable12_15
   \   000001DA   0x6800             LDR      R0,[R0, #+0]
   \   000001DC   0x4288             CMP      R0,R1
   \   000001DE   0xDB42             BLT.N    ??rightRepair_25
    858                  {
    859                    temp = col4;
   \   000001E0   0x....             LDR.N    R0,??DataTable12_3
   \   000001E2   0x6802             LDR      R2,[R0, #+0]
    860                    Img[i][temp] = 0;
   \   000001E4   0x2000             MOVS     R0,#+0
   \   000001E6   0x....             LDR.N    R3,??DataTable12_16
   \   000001E8   0x2450             MOVS     R4,#+80
   \   000001EA   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   000001EE   0x54D0             STRB     R0,[R2, R3]
    861                  }
   \   000001F0   0x1C49             ADDS     R1,R1,#+1
   \   000001F2   0xE7F1             B.N      ??rightRepair_24
    862                }
    863                else
    864                {
    865                  k1 = (index1 - index4)/((col4 - col1) * 1.0);
   \                     ??rightRepair_23: (+1)
   \   000001F4   0x....             LDR.N    R0,??DataTable12_15
   \   000001F6   0x6800             LDR      R0,[R0, #+0]
   \   000001F8   0x....             LDR.N    R1,??DataTable12_2
   \   000001FA   0x6809             LDR      R1,[R1, #+0]
   \   000001FC   0x1A40             SUBS     R0,R0,R1
   \   000001FE   0x.... 0x....      BL       __aeabi_i2d
   \   00000202   0x0004             MOVS     R4,R0
   \   00000204   0x000D             MOVS     R5,R1
   \   00000206   0x....             LDR.N    R0,??DataTable12_3
   \   00000208   0x6800             LDR      R0,[R0, #+0]
   \   0000020A   0x....             LDR.N    R1,??DataTable12_1
   \   0000020C   0x6809             LDR      R1,[R1, #+0]
   \   0000020E   0x1A40             SUBS     R0,R0,R1
   \   00000210   0x.... 0x....      BL       __aeabi_i2d
   \   00000214   0x2200             MOVS     R2,#+0
   \   00000216   0x....             LDR.N    R3,??DataTable12_7  ;; 0x3ff00000
   \   00000218   0x.... 0x....      BL       __aeabi_dmul
   \   0000021C   0x0002             MOVS     R2,R0
   \   0000021E   0x000B             MOVS     R3,R1
   \   00000220   0x0020             MOVS     R0,R4
   \   00000222   0x0029             MOVS     R1,R5
   \   00000224   0x.... 0x....      BL       __aeabi_ddiv
   \   00000228   0x.... 0x....      BL       __aeabi_d2iz
    866                  for (i = index4; i <= index1; i++)
   \   0000022C   0x....             LDR.N    R1,??DataTable12_2
   \   0000022E   0x6809             LDR      R1,[R1, #+0]
   \   00000230   0xE009             B.N      ??rightRepair_26
    867                  {
    868                    temp = (index4 - i)/k1 + col4;
    869                    if (temp >= MAX_COL)
    870                    {
    871                      temp = 79;
    872                    }
    873                    else if(temp < 0)
   \                     ??rightRepair_27: (+1)
   \   00000232   0x2A00             CMP      R2,#+0
   \   00000234   0xD500             BPL.N    ??rightRepair_28
    874                    {
    875                      temp = 0;
   \   00000236   0x2200             MOVS     R2,#+0
    876                    }
    877                    Img[i][temp] = 0;
   \                     ??rightRepair_28: (+1)
   \   00000238   0x2300             MOVS     R3,#+0
   \   0000023A   0x....             LDR.N    R4,??DataTable12_16
   \   0000023C   0x2550             MOVS     R5,#+80
   \   0000023E   0xFB05 0x4401      MLA      R4,R5,R1,R4
   \   00000242   0x5513             STRB     R3,[R2, R4]
   \   00000244   0x1C49             ADDS     R1,R1,#+1
   \                     ??rightRepair_26: (+1)
   \   00000246   0x....             LDR.N    R2,??DataTable12_15
   \   00000248   0x6812             LDR      R2,[R2, #+0]
   \   0000024A   0x428A             CMP      R2,R1
   \   0000024C   0xDB0B             BLT.N    ??rightRepair_25
   \   0000024E   0x....             LDR.N    R2,??DataTable12_2
   \   00000250   0x6812             LDR      R2,[R2, #+0]
   \   00000252   0x1A52             SUBS     R2,R2,R1
   \   00000254   0xFB92 0xF2F0      SDIV     R2,R2,R0
   \   00000258   0x....             LDR.N    R3,??DataTable12_3
   \   0000025A   0x681B             LDR      R3,[R3, #+0]
   \   0000025C   0x189A             ADDS     R2,R3,R2
   \   0000025E   0x2A50             CMP      R2,#+80
   \   00000260   0xDBE7             BLT.N    ??rightRepair_27
   \   00000262   0x224F             MOVS     R2,#+79
   \   00000264   0xE7E8             B.N      ??rightRepair_28
    878                  }
    879                }
    880          
    881               
    882                if (col3 == col2)
   \                     ??rightRepair_25: (+1)
   \   00000266   0x....             LDR.N    R0,??DataTable12_6
   \   00000268   0x6800             LDR      R0,[R0, #+0]
   \   0000026A   0x....             LDR.N    R1,??DataTable12_4
   \   0000026C   0x6809             LDR      R1,[R1, #+0]
   \   0000026E   0x4288             CMP      R0,R1
   \   00000270   0xD10F             BNE.N    ??rightRepair_29
    883                {
    884                  for (i = index3; i <= index2; i++)
   \   00000272   0x....             LDR.N    R0,??DataTable12_5
   \   00000274   0x6801             LDR      R1,[R0, #+0]
   \                     ??rightRepair_30: (+1)
   \   00000276   0x....             LDR.N    R0,??DataTable12_12
   \   00000278   0x6800             LDR      R0,[R0, #+0]
   \   0000027A   0x4288             CMP      R0,R1
   \   0000027C   0xDB42             BLT.N    ??rightRepair_0
    885                  {
    886                    temp = col3;
   \   0000027E   0x....             LDR.N    R0,??DataTable12_6
   \   00000280   0x6802             LDR      R2,[R0, #+0]
    887                    Img[i][temp] = 0;
   \   00000282   0x2000             MOVS     R0,#+0
   \   00000284   0x....             LDR.N    R3,??DataTable12_16
   \   00000286   0x2450             MOVS     R4,#+80
   \   00000288   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   0000028C   0x54D0             STRB     R0,[R2, R3]
    888                  }
   \   0000028E   0x1C49             ADDS     R1,R1,#+1
   \   00000290   0xE7F1             B.N      ??rightRepair_30
    889                }
    890                else
    891                {
    892                  k2 = (index2 - index3)/((col3 - col2) * 1.0);
   \                     ??rightRepair_29: (+1)
   \   00000292   0x....             LDR.N    R0,??DataTable12_12
   \   00000294   0x6800             LDR      R0,[R0, #+0]
   \   00000296   0x....             LDR.N    R1,??DataTable12_5
   \   00000298   0x6809             LDR      R1,[R1, #+0]
   \   0000029A   0x1A40             SUBS     R0,R0,R1
   \   0000029C   0x.... 0x....      BL       __aeabi_i2d
   \   000002A0   0x0004             MOVS     R4,R0
   \   000002A2   0x000D             MOVS     R5,R1
   \   000002A4   0x....             LDR.N    R0,??DataTable12_6
   \   000002A6   0x6800             LDR      R0,[R0, #+0]
   \   000002A8   0x....             LDR.N    R1,??DataTable12_4
   \   000002AA   0x6809             LDR      R1,[R1, #+0]
   \   000002AC   0x1A40             SUBS     R0,R0,R1
   \   000002AE   0x.... 0x....      BL       __aeabi_i2d
   \   000002B2   0x2200             MOVS     R2,#+0
   \   000002B4   0x....             LDR.N    R3,??DataTable12_7  ;; 0x3ff00000
   \   000002B6   0x.... 0x....      BL       __aeabi_dmul
   \   000002BA   0x0002             MOVS     R2,R0
   \   000002BC   0x000B             MOVS     R3,R1
   \   000002BE   0x0020             MOVS     R0,R4
   \   000002C0   0x0029             MOVS     R1,R5
   \   000002C2   0x.... 0x....      BL       __aeabi_ddiv
   \   000002C6   0x.... 0x....      BL       __aeabi_d2iz
    893                  for (int i = index3; i <= index2; i++)
   \   000002CA   0x....             LDR.N    R1,??DataTable12_5
   \   000002CC   0x6809             LDR      R1,[R1, #+0]
   \   000002CE   0xE009             B.N      ??rightRepair_31
    894                  {
    895                    temp = (index3 - i)/k2 + col3;
    896                    if (temp >= MAX_COL)
    897                    {
    898                      temp = 79;
    899                    }
    900                    else if(temp < 0)
   \                     ??rightRepair_32: (+1)
   \   000002D0   0x2A00             CMP      R2,#+0
   \   000002D2   0xD500             BPL.N    ??rightRepair_33
    901                    {
    902                      temp = 0;
   \   000002D4   0x2200             MOVS     R2,#+0
    903                    }
    904                    Img[i][temp] = 0;
   \                     ??rightRepair_33: (+1)
   \   000002D6   0x2300             MOVS     R3,#+0
   \   000002D8   0x....             LDR.N    R4,??DataTable12_16
   \   000002DA   0x2550             MOVS     R5,#+80
   \   000002DC   0xFB05 0x4401      MLA      R4,R5,R1,R4
   \   000002E0   0x5513             STRB     R3,[R2, R4]
   \   000002E2   0x1C49             ADDS     R1,R1,#+1
   \                     ??rightRepair_31: (+1)
   \   000002E4   0x....             LDR.N    R2,??DataTable12_12
   \   000002E6   0x6812             LDR      R2,[R2, #+0]
   \   000002E8   0x428A             CMP      R2,R1
   \   000002EA   0xDB0B             BLT.N    ??rightRepair_0
   \   000002EC   0x....             LDR.N    R2,??DataTable12_5
   \   000002EE   0x6812             LDR      R2,[R2, #+0]
   \   000002F0   0x1A52             SUBS     R2,R2,R1
   \   000002F2   0xFB92 0xF2F0      SDIV     R2,R2,R0
   \   000002F6   0x....             LDR.N    R3,??DataTable12_6
   \   000002F8   0x681B             LDR      R3,[R3, #+0]
   \   000002FA   0x189A             ADDS     R2,R3,R2
   \   000002FC   0x2A50             CMP      R2,#+80
   \   000002FE   0xDBE7             BLT.N    ??rightRepair_32
   \   00000300   0x224F             MOVS     R2,#+79
   \   00000302   0xE7E8             B.N      ??rightRepair_33
    905                  }
    906                }
    907              }
    908            }
    909          }
   \                     ??rightRepair_0: (+1)
   \   00000304   0xB03D             ADD      SP,SP,#+244
   \   00000306   0xBD30             POP      {R4,R5,PC}       ;; return
    910          
    911          

   \                                 In section .text, align 2, keep-with-next
    912          void reCameraScan()
    913          {
   \                     reCameraScan: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    914            int i, j;
    915            int t = absMid;
   \   00000002   0x....             LDR.N    R0,??DataTable12_17
   \   00000004   0x6800             LDR      R0,[R0, #+0]
    916            int left, right, temp;
    917          
    918            endLine = 5; 
   \   00000006   0x2105             MOVS     R1,#+5
   \   00000008   0x....             LDR.N    R2,??DataTable12
   \   0000000A   0x6011             STR      R1,[R2, #+0]
    919            leftDot[startLine] = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x....             LDR.N    R2,??DataTable12_8
   \   00000010   0x....             LDR.N    R3,??DataTable12_9
   \   00000012   0x681B             LDR      R3,[R3, #+0]
   \   00000014   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
    920            rightDot[startLine] = MAX_COL-1;
   \   00000018   0x214F             MOVS     R1,#+79
   \   0000001A   0x....             LDR.N    R2,??DataTable12_14
   \   0000001C   0x....             LDR.N    R3,??DataTable12_9
   \   0000001E   0x681B             LDR      R3,[R3, #+0]
   \   00000020   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
    921          
    922            //找边界点,并存入左右数组
    923            for (i = startLine; i >= endLine; i--)
   \   00000024   0x....             LDR.N    R1,??DataTable12_9
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0xE020             B.N      ??reCameraScan_0
    924            {
    925              left = 0;
    926              right = MAX_COL-1;
    927              //从上一行中点向左遇到的第一个黑点
    928              if (0 == Img[i][t])
    929              {
    930                endLine = i;
    931                break;
    932              }
    933              for (j = t; j >= 2; j--)
    934              {
    935                if (255 == Img[i][j] && 0 == Img[i][j-1])
    936                {
    937                  left = j;
    938                  break;
    939                }
    940              }
    941              //从上一行中点向右遇到的第一个黑点
    942              for (j = t; j < MAX_COL-2; j++)
   \                     ??reCameraScan_1: (+1)
   \   0000002A   0x1C64             ADDS     R4,R4,#+1
   \                     ??reCameraScan_2: (+1)
   \   0000002C   0x2C4E             CMP      R4,#+78
   \   0000002E   0xDA0F             BGE.N    ??reCameraScan_3
    943              { 
    944                if (255 == Img[i][j] && 0 == Img[i][j+1])
   \   00000030   0x....             LDR.N    R0,??DataTable12_16
   \   00000032   0x2550             MOVS     R5,#+80
   \   00000034   0xFB05 0x0001      MLA      R0,R5,R1,R0
   \   00000038   0x5C20             LDRB     R0,[R4, R0]
   \   0000003A   0x28FF             CMP      R0,#+255
   \   0000003C   0xD1F5             BNE.N    ??reCameraScan_1
   \   0000003E   0x....             LDR.N    R0,??DataTable12_16
   \   00000040   0x2550             MOVS     R5,#+80
   \   00000042   0xFB05 0x0001      MLA      R0,R5,R1,R0
   \   00000046   0x1820             ADDS     R0,R4,R0
   \   00000048   0x7840             LDRB     R0,[R0, #+1]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD1ED             BNE.N    ??reCameraScan_1
    945                {
    946                  right = j;
   \   0000004E   0x0023             MOVS     R3,R4
    947                  break;
    948                }
    949              }
    950              
    951              temp = (left + right)/2;
   \                     ??reCameraScan_3: (+1)
   \   00000050   0x1898             ADDS     R0,R3,R2
   \   00000052   0x2402             MOVS     R4,#+2
   \   00000054   0xFB90 0xF0F4      SDIV     R0,R0,R4
    952              t = temp;
    953              //左边点坐标，右边点坐标，中点坐标
    954              leftDot[i] = left;
   \   00000058   0x....             LDR.N    R4,??DataTable12_8
   \   0000005A   0xF844 0x2021      STR      R2,[R4, R1, LSL #+2]
    955              rightDot[i] = right;
   \   0000005E   0x....             LDR.N    R2,??DataTable12_14
   \   00000060   0xF842 0x3021      STR      R3,[R2, R1, LSL #+2]
    956              midDot[i] = temp;
   \   00000064   0x....             LDR.N    R2,??DataTable12_18
   \   00000066   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   0000006A   0x1E49             SUBS     R1,R1,#+1
   \                     ??reCameraScan_0: (+1)
   \   0000006C   0x....             LDR.N    R2,??DataTable12
   \   0000006E   0x6812             LDR      R2,[R2, #+0]
   \   00000070   0x4291             CMP      R1,R2
   \   00000072   0xDB0A             BLT.N    ??reCameraScan_4
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x234F             MOVS     R3,#+79
   \   00000078   0x....             LDR.N    R4,??DataTable12_16
   \   0000007A   0x2550             MOVS     R5,#+80
   \   0000007C   0xFB05 0x4401      MLA      R4,R5,R1,R4
   \   00000080   0x5D04             LDRB     R4,[R0, R4]
   \   00000082   0x2C00             CMP      R4,#+0
   \   00000084   0xD103             BNE.N    ??reCameraScan_5
   \   00000086   0x....             LDR.N    R0,??DataTable12
   \   00000088   0x6001             STR      R1,[R0, #+0]
    957            }
    958          }
   \                     ??reCameraScan_4: (+1)
   \   0000008A   0xBC70             POP      {R4-R6}
   \   0000008C   0x4770             BX       LR               ;; return
   \                     ??reCameraScan_5: (+1)
   \   0000008E   0x0004             MOVS     R4,R0
   \   00000090   0xE000             B.N      ??reCameraScan_6
   \                     ??reCameraScan_7: (+1)
   \   00000092   0x1E64             SUBS     R4,R4,#+1
   \                     ??reCameraScan_6: (+1)
   \   00000094   0x2C02             CMP      R4,#+2
   \   00000096   0xDB10             BLT.N    ??reCameraScan_8
   \   00000098   0x....             LDR.N    R5,??DataTable12_16
   \   0000009A   0x2650             MOVS     R6,#+80
   \   0000009C   0xFB06 0x5501      MLA      R5,R6,R1,R5
   \   000000A0   0x5D65             LDRB     R5,[R4, R5]
   \   000000A2   0x2DFF             CMP      R5,#+255
   \   000000A4   0xD1F5             BNE.N    ??reCameraScan_7
   \   000000A6   0x....             LDR.N    R5,??DataTable12_16
   \   000000A8   0x2650             MOVS     R6,#+80
   \   000000AA   0xFB06 0x5501      MLA      R5,R6,R1,R5
   \   000000AE   0x1965             ADDS     R5,R4,R5
   \   000000B0   0xF815 0x5C01      LDRB     R5,[R5, #-1]
   \   000000B4   0x2D00             CMP      R5,#+0
   \   000000B6   0xD1EC             BNE.N    ??reCameraScan_7
   \   000000B8   0x0022             MOVS     R2,R4
   \                     ??reCameraScan_8: (+1)
   \   000000BA   0x0004             MOVS     R4,R0
   \   000000BC   0xE7B6             B.N      ??reCameraScan_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     lostSide

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     runwayType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     absMid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     advanceLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     endLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     leftDot

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x........         DC32     startLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     rightDot

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x........         DC32     midDot

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     countBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x........         DC32     Left

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     Right

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     crossFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     Img

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     Line3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     vertical

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     index1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     index2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     Line2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     endLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     col1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     index4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     col4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     col2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     index3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x........         DC32     col3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     leftDot

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x........         DC32     startLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x........         DC32     Right

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     Left

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x........         DC32     index2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x........         DC32     vertical

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x........         DC32     rightDot

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x........         DC32     index1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     Img

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x........         DC32     absMid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x........         DC32     midDot

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   cameraScan
       8   handleImg
         8   -> identifyRunway
         8   -> isLost
         8   -> isOutCross
         8   -> leftProcess
         8   -> rightProcess
       8   identifyRunway
         8   -> isFindAngle
         8   -> isLost
       0   isFindAngle
       4   isLost
       0   isOutCross
       0   leftProcess
     256   leftRepair
       256   -> __aeabi_d2iz
       256   -> __aeabi_ddiv
       256   -> __aeabi_dmul
       256   -> __aeabi_i2d
       8   paint
      12   reCameraScan
       0   rightProcess
     256   rightRepair
       256   -> __aeabi_d2iz
       256   -> __aeabi_ddiv
       256   -> __aeabi_dmul
       256   -> __aeabi_i2d
      16   straightRepair
        16   -> __aeabi_d2iz
        16   -> __aeabi_ddiv
        16   -> __aeabi_dmul
        16   -> __aeabi_i2d


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable11
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
     352  cameraScan
     120  handleImg
     178  identifyRunway
     344  isFindAngle
     146  isLost
      44  isOutCross
     134  leftProcess
     838  leftRepair
     128  paint
     190  reCameraScan
     134  rightProcess
     776  rightRepair
     844  straightRepair

 
 4 380 bytes in section .text
 
 4 380 bytes of CODE memory

Errors: none
Warnings: 6
